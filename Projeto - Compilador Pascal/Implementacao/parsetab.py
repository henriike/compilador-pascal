
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftEQUALSLTHANLEQUALSGTHANGEQUALSDIFFERENTleftPLUSMINUSORleftTIMESDIVIDEDIVMODANDleftUMINUSUPLUSrightNOTleftLPARENTRPARENTAND ARRAY ASSIGNMENT BEGIN BOOLEAN CASE CHAR COMMA COMMENT CONST DIFFERENT DIV DIVIDE DIVIDE_INT DO DOWNTO ELSE END EQUALS EXP FALSE FOR FUNCTION GEQUALS GTHAN ID IF INTEGER LBRACKET LEQUALS LPARENT LTHAN MINUS MOD NOT OF OR PLUS PROCEDURE PROGRAM RBRACKET REAL REPEAT RESERVED RPARENT SCORE SEMICOLON STRING THEN TIMES TO TRUE TWOPOINTS UMINUS UNTIL UPLUS VAR WHILE\n    program : PROGRAM ID SEMICOLON block\n            | PROGRAM ID SEMICOLON\n    \n    block : const_declaration_part var_declaration_part subroutine_declaration_part compound_statement_score\n    \n    const_declaration_part : CONST const_definition\n                           |          \n    \n    const_definition : ID EQUALS types SEMICOLON const_definition\n                    |  ID EQUALS types SEMICOLON\n    \n    var_declaration_part : VAR var_declaration\n                         |\n    \n    var_declaration : identifier_list TWOPOINTS types SEMICOLON var_declaration\n                    | identifier_list TWOPOINTS types SEMICOLON\n    \n    types : INTEGER\n          | REAL\n          | STRING\n          | BOOLEAN\n          | CHAR\n          | ID\n    \n    identifier_list : ID\n                    | ID COMMA identifier_list\n    \n    subroutine_declaration_part : procedure_declaration subroutine_declaration_part\n                                | function_declaration subroutine_declaration_part\n                                |\n    \n    procedure_declaration : PROCEDURE ID LPARENT param_section RPARENT SEMICOLON\n    \n    function_declaration : FUNCTION ID LPARENT param_section RPARENT TWOPOINTS types SEMICOLON\n    \n    param_section : identifier_list TWOPOINTS types SEMICOLON param_section\n                  | identifier_list TWOPOINTS types\n                  |\n    \n    compound_statement_score : BEGIN statements END SCORE\n                             | BEGIN END SCORE\n    \n    compound_statement_semicolon : BEGIN statements END SEMICOLON\n                                 | BEGIN END SEMICOLON\n    \n    statements : statement\n               | statement statements\n    \n    statement : nstatement\n              | if2_statement\n    \n    nstatement : assign_statement\n               | procedure_function_call_statement\n               | IF LPARENT expr RPARENT THEN nstatement ELSE nstatement\n               | case_statement\n               | while_statement\n               | repeat_statement\n               | for_statement\n               | compound_statement_semicolon\n    \n    assign_statement : ID ASSIGNMENT expr SEMICOLON\n    \n    procedure_function_call_statement :  ID LPARENT expr_list RPARENT SEMICOLON\n    \n    procedure_function_call_exp :  ID LPARENT expr_list RPARENT\n    \n    if2_statement : IF LPARENT expr RPARENT THEN statement\n                  | IF LPARENT expr RPARENT THEN nstatement ELSE if2_statement\n    \n    while_statement : WHILE expr DO statement\n    \n    repeat_statement : REPEAT statement UNTIL expr SEMICOLON\n    \n    for_statement : FOR ID ASSIGNMENT expr TO expr DO statement\n    \n    case_statement : CASE LPARENT expr RPARENT OF cases END SEMICOLON\n    \n    cases : case\n          | case cases\n    \n    case : INTEGER TWOPOINTS statement\n         | CHAR TWOPOINTS statement\n         | ID TWOPOINTS statement\n    \n    expr_list : expr\n              | expr COMMA expr_list\n    \n    expr :  expr EQUALS expr\n          | expr LTHAN expr\n          | expr GTHAN expr\n          | expr DIFFERENT expr\n          | expr GEQUALS expr\n          | expr LEQUALS expr\n          | expr PLUS expr\n          | expr MINUS expr\n          | expr OR expr\n          | expr TIMES expr\n          | expr DIVIDE expr\n          | expr DIV expr\n          | expr MOD expr\n          | expr AND expr\n          | PLUS expr %prec UPLUS\n          | MINUS expr %prec UMINUS\n          | LPARENT expr RPARENT\n          | factor\n    \n    factor : ID\n           | INTEGER\n           | REAL\n           | STRING\n           | CHAR\n           | TRUE\n           | FALSE\n           | NOT factor\n           | procedure_function_call_exp\n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,4,5,21,63,92,],[0,-2,-1,-3,-29,-28,]),'ID':([2,7,9,15,16,20,22,27,28,36,39,40,41,42,43,45,46,47,48,49,52,53,54,55,56,59,65,66,67,68,70,71,72,81,88,91,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,116,118,119,121,124,126,128,130,151,152,153,155,157,158,159,161,162,164,171,174,175,176,177,178,179,180,181,182,183,184,],[3,11,19,25,26,29,50,29,19,50,50,-34,-35,-36,-37,-39,-40,-41,-42,-43,74,50,84,19,19,11,74,74,74,74,74,74,74,74,19,-31,50,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,29,-30,-44,74,-49,29,50,-45,167,-50,74,19,-34,-47,167,50,50,50,50,50,-38,-48,-52,-55,-56,-57,-51,]),'SEMICOLON':([3,29,30,31,32,33,34,35,57,61,73,74,75,76,77,78,79,80,82,90,94,113,114,117,120,127,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,147,150,156,160,172,],[4,-17,59,-12,-13,-14,-15,-16,88,91,-77,-78,-79,-80,-81,-82,-83,-84,-86,124,126,-74,-75,-85,149,153,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-76,157,159,-46,170,180,]),'CONST':([4,],[7,]),'VAR':([4,6,10,59,89,],[-5,9,-4,-7,-6,]),'PROCEDURE':([4,6,8,10,13,14,17,59,88,89,123,149,170,],[-5,-9,15,-4,15,15,-8,-7,-11,-6,-10,-23,-24,]),'FUNCTION':([4,6,8,10,13,14,17,59,88,89,123,149,170,],[-5,-9,16,-4,16,16,-8,-7,-11,-6,-10,-23,-24,]),'BEGIN':([4,6,8,10,12,13,14,17,22,23,24,36,39,40,41,42,43,45,46,47,48,49,53,59,88,89,91,98,123,124,126,130,149,152,153,157,161,162,170,171,174,175,176,177,178,179,180,184,],[-5,-9,-22,-4,22,-22,-22,-8,36,-20,-21,36,36,-34,-35,-36,-37,-39,-40,-41,-42,-43,36,-7,-11,-6,-31,36,-10,-30,-44,-49,-23,36,-45,-50,-34,-47,-24,36,36,36,36,36,-38,-48,-52,-51,]),'EQUALS':([11,69,73,74,75,76,77,78,79,80,82,93,94,96,97,113,114,115,117,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,147,148,156,168,],[20,99,-77,-78,-79,-80,-81,-82,-83,-84,-86,99,99,99,99,-74,-75,99,-85,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-76,99,99,-46,99,]),'TWOPOINTS':([18,19,58,86,122,165,166,167,],[27,-18,-19,121,151,174,175,176,]),'COMMA':([19,73,74,75,76,77,78,79,80,82,96,113,114,117,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,156,],[28,-77,-78,-79,-80,-81,-82,-83,-84,-86,128,-74,-75,-85,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-76,-46,]),'INTEGER':([20,27,40,41,42,43,45,46,47,48,49,52,65,66,67,68,70,71,72,81,91,99,100,101,102,103,104,105,106,107,108,109,110,111,112,116,118,119,121,124,126,128,130,151,153,155,157,158,161,162,164,178,179,180,181,182,183,184,],[31,31,-34,-35,-36,-37,-39,-40,-41,-42,-43,75,75,75,75,75,75,75,75,75,-31,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,31,-30,-44,75,-49,31,-45,165,-50,75,-34,-47,165,-38,-48,-52,-55,-56,-57,-51,]),'REAL':([20,27,52,65,66,67,68,70,71,72,81,99,100,101,102,103,104,105,106,107,108,109,110,111,112,116,118,119,121,128,151,158,],[32,32,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,32,76,32,76,]),'STRING':([20,27,52,65,66,67,68,70,71,72,81,99,100,101,102,103,104,105,106,107,108,109,110,111,112,116,118,119,121,128,151,158,],[33,33,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,33,77,33,77,]),'BOOLEAN':([20,27,121,151,],[34,34,34,34,]),'CHAR':([20,27,40,41,42,43,45,46,47,48,49,52,65,66,67,68,70,71,72,81,91,99,100,101,102,103,104,105,106,107,108,109,110,111,112,116,118,119,121,124,126,128,130,151,153,155,157,158,161,162,164,178,179,180,181,182,183,184,],[35,35,-34,-35,-36,-37,-39,-40,-41,-42,-43,78,78,78,78,78,78,78,78,78,-31,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,35,-30,-44,78,-49,35,-45,166,-50,78,-34,-47,166,-38,-48,-52,-55,-56,-57,-51,]),'END':([22,36,37,39,40,41,42,43,45,46,47,48,49,60,64,91,124,126,130,153,157,161,162,163,164,173,178,179,180,181,182,183,184,],[38,61,62,-32,-34,-35,-36,-37,-39,-40,-41,-42,-43,90,-33,-31,-30,-44,-49,-45,-50,-34,-47,172,-53,-54,-38,-48,-52,-55,-56,-57,-51,]),'IF':([22,36,39,40,41,42,43,45,46,47,48,49,53,91,98,124,126,130,152,153,157,161,162,171,174,175,176,177,178,179,180,184,],[44,44,44,-34,-35,-36,-37,-39,-40,-41,-42,-43,44,-31,44,-30,-44,-49,44,-45,-50,-34,-47,44,44,44,44,44,-38,-48,-52,-51,]),'CASE':([22,36,39,40,41,42,43,45,46,47,48,49,53,91,98,124,126,130,152,153,157,161,162,171,174,175,176,177,178,179,180,184,],[51,51,51,-34,-35,-36,-37,-39,-40,-41,-42,-43,51,-31,51,-30,-44,-49,51,-45,-50,-34,-47,51,51,51,51,51,-38,-48,-52,-51,]),'WHILE':([22,36,39,40,41,42,43,45,46,47,48,49,53,91,98,124,126,130,152,153,157,161,162,171,174,175,176,177,178,179,180,184,],[52,52,52,-34,-35,-36,-37,-39,-40,-41,-42,-43,52,-31,52,-30,-44,-49,52,-45,-50,-34,-47,52,52,52,52,52,-38,-48,-52,-51,]),'REPEAT':([22,36,39,40,41,42,43,45,46,47,48,49,53,91,98,124,126,130,152,153,157,161,162,171,174,175,176,177,178,179,180,184,],[53,53,53,-34,-35,-36,-37,-39,-40,-41,-42,-43,53,-31,53,-30,-44,-49,53,-45,-50,-34,-47,53,53,53,53,53,-38,-48,-52,-51,]),'FOR':([22,36,39,40,41,42,43,45,46,47,48,49,53,91,98,124,126,130,152,153,157,161,162,171,174,175,176,177,178,179,180,184,],[54,54,54,-34,-35,-36,-37,-39,-40,-41,-42,-43,54,-31,54,-30,-44,-49,54,-45,-50,-34,-47,54,54,54,54,54,-38,-48,-52,-51,]),'LPARENT':([25,26,44,50,51,52,65,66,67,68,70,71,72,74,99,100,101,102,103,104,105,106,107,108,109,110,111,112,116,118,119,128,158,],[55,56,65,67,68,72,72,72,72,72,72,72,72,116,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'RPARENT':([29,31,32,33,34,35,55,56,73,74,75,76,77,78,79,80,82,85,87,93,95,96,97,113,114,115,117,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,150,154,156,159,169,],[-17,-12,-13,-14,-15,-16,-27,-27,-77,-78,-79,-80,-81,-82,-83,-84,-86,120,122,125,127,-58,129,-74,-75,145,-85,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-76,156,-26,-59,-46,-27,-25,]),'SCORE':([38,62,],[63,92,]),'UNTIL':([40,41,42,43,45,46,47,48,49,83,91,124,126,130,153,157,161,162,178,179,180,184,],[-34,-35,-36,-37,-39,-40,-41,-42,-43,118,-31,-30,-44,-49,-45,-50,-34,-47,-38,-48,-52,-51,]),'ELSE':([40,41,42,43,45,46,47,48,49,91,124,126,130,153,157,161,162,178,179,180,184,],[-34,-35,-36,-37,-39,-40,-41,-42,-43,-31,-30,-44,-49,-45,-50,171,-47,-38,-48,-52,-51,]),'ASSIGNMENT':([50,84,],[66,119,]),'PLUS':([52,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82,93,94,96,97,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,128,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,147,148,156,158,168,],[70,70,70,70,70,105,70,70,70,-77,-78,-79,-80,-81,-82,-83,-84,-86,105,105,105,105,70,70,70,70,70,70,70,70,70,70,70,70,70,70,-74,-75,105,70,-85,70,70,70,105,105,105,105,105,105,-66,-67,-68,-69,-70,-71,-72,-73,-76,105,105,-46,70,105,]),'MINUS':([52,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82,93,94,96,97,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,128,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,147,148,156,158,168,],[71,71,71,71,71,106,71,71,71,-77,-78,-79,-80,-81,-82,-83,-84,-86,106,106,106,106,71,71,71,71,71,71,71,71,71,71,71,71,71,71,-74,-75,106,71,-85,71,71,71,106,106,106,106,106,106,-66,-67,-68,-69,-70,-71,-72,-73,-76,106,106,-46,71,106,]),'TRUE':([52,65,66,67,68,70,71,72,81,99,100,101,102,103,104,105,106,107,108,109,110,111,112,116,118,119,128,158,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'FALSE':([52,65,66,67,68,70,71,72,81,99,100,101,102,103,104,105,106,107,108,109,110,111,112,116,118,119,128,158,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'NOT':([52,65,66,67,68,70,71,72,81,99,100,101,102,103,104,105,106,107,108,109,110,111,112,116,118,119,128,158,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'DO':([69,73,74,75,76,77,78,79,80,82,113,114,117,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,156,168,],[98,-77,-78,-79,-80,-81,-82,-83,-84,-86,-74,-75,-85,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-76,-46,177,]),'LTHAN':([69,73,74,75,76,77,78,79,80,82,93,94,96,97,113,114,115,117,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,147,148,156,168,],[100,-77,-78,-79,-80,-81,-82,-83,-84,-86,100,100,100,100,-74,-75,100,-85,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-76,100,100,-46,100,]),'GTHAN':([69,73,74,75,76,77,78,79,80,82,93,94,96,97,113,114,115,117,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,147,148,156,168,],[101,-77,-78,-79,-80,-81,-82,-83,-84,-86,101,101,101,101,-74,-75,101,-85,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-76,101,101,-46,101,]),'DIFFERENT':([69,73,74,75,76,77,78,79,80,82,93,94,96,97,113,114,115,117,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,147,148,156,168,],[102,-77,-78,-79,-80,-81,-82,-83,-84,-86,102,102,102,102,-74,-75,102,-85,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-76,102,102,-46,102,]),'GEQUALS':([69,73,74,75,76,77,78,79,80,82,93,94,96,97,113,114,115,117,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,147,148,156,168,],[103,-77,-78,-79,-80,-81,-82,-83,-84,-86,103,103,103,103,-74,-75,103,-85,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-76,103,103,-46,103,]),'LEQUALS':([69,73,74,75,76,77,78,79,80,82,93,94,96,97,113,114,115,117,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,147,148,156,168,],[104,-77,-78,-79,-80,-81,-82,-83,-84,-86,104,104,104,104,-74,-75,104,-85,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-76,104,104,-46,104,]),'OR':([69,73,74,75,76,77,78,79,80,82,93,94,96,97,113,114,115,117,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,147,148,156,168,],[107,-77,-78,-79,-80,-81,-82,-83,-84,-86,107,107,107,107,-74,-75,107,-85,107,107,107,107,107,107,-66,-67,-68,-69,-70,-71,-72,-73,-76,107,107,-46,107,]),'TIMES':([69,73,74,75,76,77,78,79,80,82,93,94,96,97,113,114,115,117,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,147,148,156,168,],[108,-77,-78,-79,-80,-81,-82,-83,-84,-86,108,108,108,108,-74,-75,108,-85,108,108,108,108,108,108,108,108,108,-69,-70,-71,-72,-73,-76,108,108,-46,108,]),'DIVIDE':([69,73,74,75,76,77,78,79,80,82,93,94,96,97,113,114,115,117,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,147,148,156,168,],[109,-77,-78,-79,-80,-81,-82,-83,-84,-86,109,109,109,109,-74,-75,109,-85,109,109,109,109,109,109,109,109,109,-69,-70,-71,-72,-73,-76,109,109,-46,109,]),'DIV':([69,73,74,75,76,77,78,79,80,82,93,94,96,97,113,114,115,117,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,147,148,156,168,],[110,-77,-78,-79,-80,-81,-82,-83,-84,-86,110,110,110,110,-74,-75,110,-85,110,110,110,110,110,110,110,110,110,-69,-70,-71,-72,-73,-76,110,110,-46,110,]),'MOD':([69,73,74,75,76,77,78,79,80,82,93,94,96,97,113,114,115,117,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,147,148,156,168,],[111,-77,-78,-79,-80,-81,-82,-83,-84,-86,111,111,111,111,-74,-75,111,-85,111,111,111,111,111,111,111,111,111,-69,-70,-71,-72,-73,-76,111,111,-46,111,]),'AND':([69,73,74,75,76,77,78,79,80,82,93,94,96,97,113,114,115,117,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,147,148,156,168,],[112,-77,-78,-79,-80,-81,-82,-83,-84,-86,112,112,112,112,-74,-75,112,-85,112,112,112,112,112,112,112,112,112,-69,-70,-71,-72,-73,-76,112,112,-46,112,]),'TO':([73,74,75,76,77,78,79,80,82,113,114,117,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,148,156,],[-77,-78,-79,-80,-81,-82,-83,-84,-86,-74,-75,-85,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-76,158,-46,]),'THEN':([125,],[152,]),'OF':([129,],[155,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([4,],[5,]),'const_declaration_part':([4,],[6,]),'var_declaration_part':([6,],[8,]),'const_definition':([7,59,],[10,89,]),'subroutine_declaration_part':([8,13,14,],[12,23,24,]),'procedure_declaration':([8,13,14,],[13,13,13,]),'function_declaration':([8,13,14,],[14,14,14,]),'var_declaration':([9,88,],[17,123,]),'identifier_list':([9,28,55,56,88,159,],[18,58,86,86,18,86,]),'compound_statement_score':([12,],[21,]),'types':([20,27,121,151,],[30,57,150,160,]),'statements':([22,36,39,],[37,60,64,]),'statement':([22,36,39,53,98,152,174,175,176,177,],[39,39,39,83,130,162,181,182,183,184,]),'nstatement':([22,36,39,53,98,152,171,174,175,176,177,],[40,40,40,40,40,161,178,40,40,40,40,]),'if2_statement':([22,36,39,53,98,152,171,174,175,176,177,],[41,41,41,41,41,41,179,41,41,41,41,]),'assign_statement':([22,36,39,53,98,152,171,174,175,176,177,],[42,42,42,42,42,42,42,42,42,42,42,]),'procedure_function_call_statement':([22,36,39,53,98,152,171,174,175,176,177,],[43,43,43,43,43,43,43,43,43,43,43,]),'case_statement':([22,36,39,53,98,152,171,174,175,176,177,],[45,45,45,45,45,45,45,45,45,45,45,]),'while_statement':([22,36,39,53,98,152,171,174,175,176,177,],[46,46,46,46,46,46,46,46,46,46,46,]),'repeat_statement':([22,36,39,53,98,152,171,174,175,176,177,],[47,47,47,47,47,47,47,47,47,47,47,]),'for_statement':([22,36,39,53,98,152,171,174,175,176,177,],[48,48,48,48,48,48,48,48,48,48,48,]),'compound_statement_semicolon':([22,36,39,53,98,152,171,174,175,176,177,],[49,49,49,49,49,49,49,49,49,49,49,]),'expr':([52,65,66,67,68,70,71,72,99,100,101,102,103,104,105,106,107,108,109,110,111,112,116,118,119,128,158,],[69,93,94,96,97,113,114,115,131,132,133,134,135,136,137,138,139,140,141,142,143,144,96,147,148,96,168,]),'factor':([52,65,66,67,68,70,71,72,81,99,100,101,102,103,104,105,106,107,108,109,110,111,112,116,118,119,128,158,],[73,73,73,73,73,73,73,73,117,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'procedure_function_call_exp':([52,65,66,67,68,70,71,72,81,99,100,101,102,103,104,105,106,107,108,109,110,111,112,116,118,119,128,158,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'param_section':([55,56,159,],[85,87,169,]),'expr_list':([67,116,128,],[95,146,154,]),'cases':([155,164,],[163,173,]),'case':([155,164,],[164,164,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON block','program',4,'p_program','ExpressionLanguageParser.py',37),
  ('program -> PROGRAM ID SEMICOLON','program',3,'p_program','ExpressionLanguageParser.py',38),
  ('block -> const_declaration_part var_declaration_part subroutine_declaration_part compound_statement_score','block',4,'p_block','ExpressionLanguageParser.py',50),
  ('const_declaration_part -> CONST const_definition','const_declaration_part',2,'p_const_declaration_part','ExpressionLanguageParser.py',59),
  ('const_declaration_part -> <empty>','const_declaration_part',0,'p_const_declaration_part','ExpressionLanguageParser.py',60),
  ('const_definition -> ID EQUALS types SEMICOLON const_definition','const_definition',5,'p_const_definition','ExpressionLanguageParser.py',69),
  ('const_definition -> ID EQUALS types SEMICOLON','const_definition',4,'p_const_definition','ExpressionLanguageParser.py',70),
  ('var_declaration_part -> VAR var_declaration','var_declaration_part',2,'p_var_declaration_part','ExpressionLanguageParser.py',85),
  ('var_declaration_part -> <empty>','var_declaration_part',0,'p_var_declaration_part','ExpressionLanguageParser.py',86),
  ('var_declaration -> identifier_list TWOPOINTS types SEMICOLON var_declaration','var_declaration',5,'p_var_declaration','ExpressionLanguageParser.py',95),
  ('var_declaration -> identifier_list TWOPOINTS types SEMICOLON','var_declaration',4,'p_var_declaration','ExpressionLanguageParser.py',96),
  ('types -> INTEGER','types',1,'p_types','ExpressionLanguageParser.py',108),
  ('types -> REAL','types',1,'p_types','ExpressionLanguageParser.py',109),
  ('types -> STRING','types',1,'p_types','ExpressionLanguageParser.py',110),
  ('types -> BOOLEAN','types',1,'p_types','ExpressionLanguageParser.py',111),
  ('types -> CHAR','types',1,'p_types','ExpressionLanguageParser.py',112),
  ('types -> ID','types',1,'p_types','ExpressionLanguageParser.py',113),
  ('identifier_list -> ID','identifier_list',1,'p_identifier_list','ExpressionLanguageParser.py',121),
  ('identifier_list -> ID COMMA identifier_list','identifier_list',3,'p_identifier_list','ExpressionLanguageParser.py',122),
  ('subroutine_declaration_part -> procedure_declaration subroutine_declaration_part','subroutine_declaration_part',2,'p_subroutine_declaration_part','ExpressionLanguageParser.py',135),
  ('subroutine_declaration_part -> function_declaration subroutine_declaration_part','subroutine_declaration_part',2,'p_subroutine_declaration_part','ExpressionLanguageParser.py',136),
  ('subroutine_declaration_part -> <empty>','subroutine_declaration_part',0,'p_subroutine_declaration_part','ExpressionLanguageParser.py',137),
  ('procedure_declaration -> PROCEDURE ID LPARENT param_section RPARENT SEMICOLON','procedure_declaration',6,'p_procedure_declaration','ExpressionLanguageParser.py',149),
  ('function_declaration -> FUNCTION ID LPARENT param_section RPARENT TWOPOINTS types SEMICOLON','function_declaration',8,'p_function_declaration','ExpressionLanguageParser.py',159),
  ('param_section -> identifier_list TWOPOINTS types SEMICOLON param_section','param_section',5,'p_param_section','ExpressionLanguageParser.py',168),
  ('param_section -> identifier_list TWOPOINTS types','param_section',3,'p_param_section','ExpressionLanguageParser.py',169),
  ('param_section -> <empty>','param_section',0,'p_param_section','ExpressionLanguageParser.py',170),
  ('compound_statement_score -> BEGIN statements END SCORE','compound_statement_score',4,'p_compound_statement_score','ExpressionLanguageParser.py',186),
  ('compound_statement_score -> BEGIN END SCORE','compound_statement_score',3,'p_compound_statement_score','ExpressionLanguageParser.py',187),
  ('compound_statement_semicolon -> BEGIN statements END SEMICOLON','compound_statement_semicolon',4,'p_compound_statement_semicolon','ExpressionLanguageParser.py',196),
  ('compound_statement_semicolon -> BEGIN END SEMICOLON','compound_statement_semicolon',3,'p_compound_statement_semicolon','ExpressionLanguageParser.py',197),
  ('statements -> statement','statements',1,'p_statements','ExpressionLanguageParser.py',205),
  ('statements -> statement statements','statements',2,'p_statements','ExpressionLanguageParser.py',206),
  ('statement -> nstatement','statement',1,'p_statement','ExpressionLanguageParser.py',216),
  ('statement -> if2_statement','statement',1,'p_statement','ExpressionLanguageParser.py',217),
  ('nstatement -> assign_statement','nstatement',1,'p_nstatement','ExpressionLanguageParser.py',224),
  ('nstatement -> procedure_function_call_statement','nstatement',1,'p_nstatement','ExpressionLanguageParser.py',225),
  ('nstatement -> IF LPARENT expr RPARENT THEN nstatement ELSE nstatement','nstatement',8,'p_nstatement','ExpressionLanguageParser.py',226),
  ('nstatement -> case_statement','nstatement',1,'p_nstatement','ExpressionLanguageParser.py',227),
  ('nstatement -> while_statement','nstatement',1,'p_nstatement','ExpressionLanguageParser.py',228),
  ('nstatement -> repeat_statement','nstatement',1,'p_nstatement','ExpressionLanguageParser.py',229),
  ('nstatement -> for_statement','nstatement',1,'p_nstatement','ExpressionLanguageParser.py',230),
  ('nstatement -> compound_statement_semicolon','nstatement',1,'p_nstatement','ExpressionLanguageParser.py',231),
  ('assign_statement -> ID ASSIGNMENT expr SEMICOLON','assign_statement',4,'p_assign_statement','ExpressionLanguageParser.py',244),
  ('procedure_function_call_statement -> ID LPARENT expr_list RPARENT SEMICOLON','procedure_function_call_statement',5,'p_procedure_function_call_statement','ExpressionLanguageParser.py',252),
  ('procedure_function_call_exp -> ID LPARENT expr_list RPARENT','procedure_function_call_exp',4,'p_procedure_function_call_exp','ExpressionLanguageParser.py',259),
  ('if2_statement -> IF LPARENT expr RPARENT THEN statement','if2_statement',6,'p_if2_statement','ExpressionLanguageParser.py',266),
  ('if2_statement -> IF LPARENT expr RPARENT THEN nstatement ELSE if2_statement','if2_statement',8,'p_if2_statement','ExpressionLanguageParser.py',267),
  ('while_statement -> WHILE expr DO statement','while_statement',4,'p_while_statement','ExpressionLanguageParser.py',278),
  ('repeat_statement -> REPEAT statement UNTIL expr SEMICOLON','repeat_statement',5,'p_repeat_statement','ExpressionLanguageParser.py',286),
  ('for_statement -> FOR ID ASSIGNMENT expr TO expr DO statement','for_statement',8,'p_for_statement','ExpressionLanguageParser.py',297),
  ('case_statement -> CASE LPARENT expr RPARENT OF cases END SEMICOLON','case_statement',8,'p_case_statement','ExpressionLanguageParser.py',306),
  ('cases -> case','cases',1,'p_cases','ExpressionLanguageParser.py',313),
  ('cases -> case cases','cases',2,'p_cases','ExpressionLanguageParser.py',314),
  ('case -> INTEGER TWOPOINTS statement','case',3,'p_case','ExpressionLanguageParser.py',324),
  ('case -> CHAR TWOPOINTS statement','case',3,'p_case','ExpressionLanguageParser.py',325),
  ('case -> ID TWOPOINTS statement','case',3,'p_case','ExpressionLanguageParser.py',326),
  ('expr_list -> expr','expr_list',1,'p_expr_list','ExpressionLanguageParser.py',340),
  ('expr_list -> expr COMMA expr_list','expr_list',3,'p_expr_list','ExpressionLanguageParser.py',341),
  ('expr -> expr EQUALS expr','expr',3,'p_expr','ExpressionLanguageParser.py',351),
  ('expr -> expr LTHAN expr','expr',3,'p_expr','ExpressionLanguageParser.py',352),
  ('expr -> expr GTHAN expr','expr',3,'p_expr','ExpressionLanguageParser.py',353),
  ('expr -> expr DIFFERENT expr','expr',3,'p_expr','ExpressionLanguageParser.py',354),
  ('expr -> expr GEQUALS expr','expr',3,'p_expr','ExpressionLanguageParser.py',355),
  ('expr -> expr LEQUALS expr','expr',3,'p_expr','ExpressionLanguageParser.py',356),
  ('expr -> expr PLUS expr','expr',3,'p_expr','ExpressionLanguageParser.py',357),
  ('expr -> expr MINUS expr','expr',3,'p_expr','ExpressionLanguageParser.py',358),
  ('expr -> expr OR expr','expr',3,'p_expr','ExpressionLanguageParser.py',359),
  ('expr -> expr TIMES expr','expr',3,'p_expr','ExpressionLanguageParser.py',360),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr','ExpressionLanguageParser.py',361),
  ('expr -> expr DIV expr','expr',3,'p_expr','ExpressionLanguageParser.py',362),
  ('expr -> expr MOD expr','expr',3,'p_expr','ExpressionLanguageParser.py',363),
  ('expr -> expr AND expr','expr',3,'p_expr','ExpressionLanguageParser.py',364),
  ('expr -> PLUS expr','expr',2,'p_expr','ExpressionLanguageParser.py',365),
  ('expr -> MINUS expr','expr',2,'p_expr','ExpressionLanguageParser.py',366),
  ('expr -> LPARENT expr RPARENT','expr',3,'p_expr','ExpressionLanguageParser.py',367),
  ('expr -> factor','expr',1,'p_expr','ExpressionLanguageParser.py',368),
  ('factor -> ID','factor',1,'p_factor','ExpressionLanguageParser.py',416),
  ('factor -> INTEGER','factor',1,'p_factor','ExpressionLanguageParser.py',417),
  ('factor -> REAL','factor',1,'p_factor','ExpressionLanguageParser.py',418),
  ('factor -> STRING','factor',1,'p_factor','ExpressionLanguageParser.py',419),
  ('factor -> CHAR','factor',1,'p_factor','ExpressionLanguageParser.py',420),
  ('factor -> TRUE','factor',1,'p_factor','ExpressionLanguageParser.py',421),
  ('factor -> FALSE','factor',1,'p_factor','ExpressionLanguageParser.py',422),
  ('factor -> NOT factor','factor',2,'p_factor','ExpressionLanguageParser.py',423),
  ('factor -> procedure_function_call_exp','factor',1,'p_factor','ExpressionLanguageParser.py',424),
]
