
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COMMA ID IGUAL LPAREN NUMBER POT RPAREN SOMA VEZESexp : exp SOMA exp1\n         | exp1exp1 : exp1 VEZES exp2\n            | exp2exp2 : exp3 POT exp2\n            | exp3exp3 : call\n            | assign\n            | NUMBER\n            | IDcall : ID LPAREN params RPAREN\n          | ID LPAREN RPARENparams : exp COMMA params\n            | exp assign : ID IGUAL exp'
    
_lr_action_items = {'NUMBER':([0,9,10,11,12,13,22,],[7,7,7,7,7,7,7,]),'ID':([0,9,10,11,12,13,22,],[8,8,8,8,8,8,8,]),'$end':([1,2,3,4,5,6,7,8,14,15,16,18,20,21,],[0,-2,-4,-6,-7,-8,-9,-10,-1,-3,-5,-12,-15,-11,]),'SOMA':([1,2,3,4,5,6,7,8,14,15,16,18,19,20,21,],[9,-2,-4,-6,-7,-8,-9,-10,-1,-3,-5,-12,9,9,-11,]),'COMMA':([2,3,4,5,6,7,8,14,15,16,18,19,20,21,],[-2,-4,-6,-7,-8,-9,-10,-1,-3,-5,-12,22,-15,-11,]),'RPAREN':([2,3,4,5,6,7,8,12,14,15,16,17,18,19,20,21,23,],[-2,-4,-6,-7,-8,-9,-10,18,-1,-3,-5,21,-12,-14,-15,-11,-13,]),'VEZES':([2,3,4,5,6,7,8,14,15,16,18,20,21,],[10,-4,-6,-7,-8,-9,-10,10,-3,-5,-12,-15,-11,]),'POT':([2,3,4,5,6,7,8,14,15,16,18,20,21,],[-2,-4,11,-7,-8,-9,-10,-1,-3,-5,-12,-15,-11,]),'LPAREN':([8,],[12,]),'IGUAL':([8,],[13,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'exp':([0,12,13,22,],[1,19,20,19,]),'exp1':([0,9,12,13,22,],[2,14,2,2,2,]),'exp2':([0,9,10,11,12,13,22,],[3,3,15,16,3,3,3,]),'exp3':([0,9,10,11,12,13,22,],[4,4,4,4,4,4,4,]),'call':([0,9,10,11,12,13,22,],[5,5,5,5,5,5,5,]),'assign':([0,9,10,11,12,13,22,],[6,6,6,6,6,6,6,]),'params':([12,22,],[17,23,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> exp","S'",1,None,None,None),
  ('exp -> exp SOMA exp1','exp',3,'p_exp_soma','ExpressionLanguageParser.py',12),
  ('exp -> exp1','exp',1,'p_exp_soma','ExpressionLanguageParser.py',13),
  ('exp1 -> exp1 VEZES exp2','exp1',3,'p_exp1_vezes','ExpressionLanguageParser.py',16),
  ('exp1 -> exp2','exp1',1,'p_exp1_vezes','ExpressionLanguageParser.py',17),
  ('exp2 -> exp3 POT exp2','exp2',3,'p_exp2_pot','ExpressionLanguageParser.py',20),
  ('exp2 -> exp3','exp2',1,'p_exp2_pot','ExpressionLanguageParser.py',21),
  ('exp3 -> call','exp3',1,'p_exp3_call','ExpressionLanguageParser.py',24),
  ('exp3 -> assign','exp3',1,'p_exp3_call','ExpressionLanguageParser.py',25),
  ('exp3 -> NUMBER','exp3',1,'p_exp3_call','ExpressionLanguageParser.py',26),
  ('exp3 -> ID','exp3',1,'p_exp3_call','ExpressionLanguageParser.py',27),
  ('call -> ID LPAREN params RPAREN','call',4,'p_call_id_params','ExpressionLanguageParser.py',31),
  ('call -> ID LPAREN RPAREN','call',3,'p_call_id_params','ExpressionLanguageParser.py',32),
  ('params -> exp COMMA params','params',3,'p_params_ids','ExpressionLanguageParser.py',36),
  ('params -> exp','params',1,'p_params_ids','ExpressionLanguageParser.py',37),
  ('assign -> ID IGUAL exp','assign',3,'p_assign','ExpressionLanguageParser.py',40),
]
