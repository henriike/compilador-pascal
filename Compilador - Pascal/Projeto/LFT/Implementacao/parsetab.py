
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocEQUALSLTHANLEQUALSGTHANGEQUALSDIFFERENTleftPLUSMINUSORleftTIMESDIVIDEDIVMODANDleftUMINUSUPLUSrightNOTleftLPARENTRPARENTAND ARRAY ASSIGNMENT BEGIN BOOLEAN CASE CHAR COMMA COMMENT CONST DIFFERENT DIV DIVIDE DIVIDE_INT DO DOWNTO ELSE END EQUALS EXP FALSE FOR FUNCTION GEQUALS GTHAN ID IF INTEGER LBRACKET LEQUALS LPARENT LTHAN MINUS MOD NOT OF OR PLUS PROCEDURE PROGRAM RBRACKET REAL REPEAT RESERVED RPARENT SCORE SEMICOLON STRING THEN TIMES TO TRUE TWOPOINTS UMINUS UNTIL UPLUS VAR WHILE\n    program : PROGRAM ID SEMICOLON block\n            | PROGRAM ID SEMICOLON\n    \n    block : const_declaration_part var_declaration_part subroutine_declaration_part compound_statement_score\n    \n    const_declaration_part : CONST const_definition\n                           |          \n    \n    const_definition : ID EQUALS types SEMICOLON const_definition\n                    |  ID EQUALS types SEMICOLON\n    \n    var_declaration_part : VAR var_declaration\n                         |\n    \n    var_declaration : identifier_list TWOPOINTS types SEMICOLON var_declaration\n                    | identifier_list TWOPOINTS types SEMICOLON\n    \n    types : INTEGER\n          | REAL\n          | STRING\n          | BOOLEAN\n          | CHAR\n          | ID\n    \n    identifier_list : ID\n                    | ID COMMA identifier_list\n    \n    subroutine_declaration_part : procedure_declaration subroutine_declaration_part\n                                | function_declaration subroutine_declaration_part\n                                |\n    \n    procedure_declaration : PROCEDURE ID LPARENT param_section RPARENT SEMICOLON\n    \n    function_declaration : FUNCTION ID LPARENT param_section RPARENT TWOPOINTS types SEMICOLON\n    \n    param_section : identifier_list TWOPOINTS types SEMICOLON param_section\n                  |\n    \n    compound_statement_score : BEGIN statement END SCORE\n                             |\n    \n    compound_statement_semicolon : BEGIN statement END SEMICOLON\n    \n    statement : assign_statement statement\n              | procedure_call statement\n              | if_statement statement\n              | case_statement statement\n              | while_statement statement\n              | repeat_statement statement\n              | for_statement statement\n              | compound_statement_semicolon statement\n              |\n    \n    assign_statement : ID ASSIGNMENT expr SEMICOLON\n    \n    procedure_call :  ID LPARENT expr_list RPARENT SEMICOLON\n    \n    if_statement : if1\n                 | if2\n                 |\n    \n    if1 : IF expr_list THEN if1\n        | IF expr_list THEN if2\n        | ELSE if1\n        |\n    \n    if2 : IF expr_list THEN if2\n        | ELSE if2\n        |\n    \n    case_statement : CASE expr OF case END SEMICOLON\n                   | case\n    \n    case : INTEGER TWOPOINTS statement\n         | REAL TWOPOINTS statement\n         | ID TWOPOINTS statement\n    \n    while_statement : WHILE expr DO statement\n    \n    repeat_statement : REPEAT statement UNTIL expr SEMICOLON\n                     | statement\n    \n    for_statement : FOR ID ASSIGNMENT expr TO expr DO\n                  | statement\n    \n    expr_list : expr\n              | expr COMMA expr_list\n    \n    expr : simple_expr relop_simple_expr\n    \n    relop_simple_expr : relop simple_expr relop_simple_expr\n                      |\n    \n    relop : EQUALS\n          | LTHAN\n          | GTHAN\n          | DIFFERENT\n          | GEQUALS\n          | LEQUALS\n    \n    simple_expr : uplus_uminus factor\n                | uplus_uminus factor addop_mulop factor simple_expr\n    \n    uplus_uminus : UPLUS\n                 | UMINUS\n                 |\n    \n    addop_mulop : PLUS\n                | MINUS\n                | OR\n                | TIMES\n                | DIVIDE\n                | DIV\n                | MOD\n                | AND\n                |\n    \n    factor : ID\n           | INTEGER\n           | REAL\n           | STRING\n           | NOT factor\n           |\n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,4,5,6,8,10,12,13,14,17,21,23,24,62,93,94,96,125,148,163,],[0,-2,-1,-9,-22,-4,-28,-22,-22,-8,-3,-20,-21,-7,-11,-6,-27,-10,-23,-24,]),'ID':([2,7,9,15,16,20,22,27,28,36,37,38,39,40,41,42,43,44,45,47,48,49,50,51,52,53,54,55,58,59,62,63,65,66,67,68,69,70,71,72,73,74,75,78,79,80,82,86,87,88,89,93,99,100,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,123,126,127,132,133,134,135,136,137,138,139,140,141,142,145,146,150,151,154,155,156,157,159,164,],[3,11,19,25,26,29,46,29,19,46,-58,46,46,46,46,46,46,46,46,-41,-42,-76,-52,-76,46,83,-76,-47,19,19,11,-58,-30,-31,-32,-33,-34,-35,-36,-37,-76,-76,46,110,-74,-75,-58,-46,-49,46,46,19,-55,130,-76,-66,-67,-68,-69,-70,-71,-85,-86,-87,-88,-89,110,46,-76,-76,-47,-76,-53,-54,29,-29,-39,110,-77,-78,-79,-80,-81,-82,-83,-84,-90,-56,-44,-45,29,-40,-76,-57,-76,19,-51,-59,]),'SEMICOLON':([3,29,30,31,32,33,34,35,60,73,77,78,79,80,95,97,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,122,128,131,132,133,134,135,136,137,138,139,140,141,143,149,152,153,154,158,160,],[4,-17,62,-12,-13,-14,-15,-16,93,-76,-65,-91,-74,-75,126,127,-63,-76,-66,-67,-68,-69,-70,-71,-72,-86,-87,-88,-89,-91,-76,148,151,-65,-91,-77,-78,-79,-80,-81,-82,-83,-84,-90,155,157,159,-64,-76,163,-73,]),'CONST':([4,],[7,]),'VAR':([4,6,10,62,94,],[-5,9,-4,-7,-6,]),'PROCEDURE':([4,6,8,10,13,14,17,62,93,94,125,148,163,],[-5,-9,15,-4,15,15,-8,-7,-11,-6,-10,-23,-24,]),'FUNCTION':([4,6,8,10,13,14,17,62,93,94,125,148,163,],[-5,-9,16,-4,16,16,-8,-7,-11,-6,-10,-23,-24,]),'BEGIN':([4,6,8,10,12,13,14,17,22,23,24,36,37,38,39,40,41,42,43,44,45,47,48,50,52,55,62,63,65,66,67,68,69,70,71,72,75,82,86,87,88,89,93,94,99,115,118,120,121,125,126,127,142,145,146,148,151,155,159,163,164,],[-5,-9,-22,-4,22,-22,-22,-8,36,-20,-21,36,-58,36,36,36,36,36,36,36,36,-41,-42,-52,36,-47,-7,-58,-30,-31,-32,-33,-34,-35,-36,-37,36,-58,-46,-49,36,36,-11,-6,-55,36,-47,-53,-54,-10,-29,-39,-56,-44,-45,-23,-40,-57,-51,-24,-59,]),'EQUALS':([11,49,51,54,73,74,77,78,79,80,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,119,131,132,133,134,135,136,137,138,139,140,141,154,156,160,],[20,-76,-76,-76,-76,-76,103,-91,-74,-75,-76,-66,-67,-68,-69,-70,-71,-72,-86,-87,-88,-89,-91,-76,-76,-76,103,-91,-77,-78,-79,-80,-81,-82,-83,-84,-90,-76,-76,-73,]),'TWOPOINTS':([18,19,46,56,57,61,91,124,130,],[27,-18,75,88,89,-19,123,150,75,]),'COMMA':([19,54,74,77,78,79,80,85,101,102,103,104,105,106,107,108,109,110,111,112,113,114,119,131,132,133,134,135,136,137,138,139,140,141,153,154,160,],[28,-76,-76,-65,-91,-74,-75,119,-63,-76,-66,-67,-68,-69,-70,-71,-72,-86,-87,-88,-89,-91,-76,-65,-91,-77,-78,-79,-80,-81,-82,-83,-84,-90,-64,-76,-73,]),'INTEGER':([20,22,27,36,37,38,39,40,41,42,43,44,45,47,48,49,50,51,52,54,55,63,65,66,67,68,69,70,71,72,73,74,75,78,79,80,82,86,87,88,89,99,100,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,123,126,127,132,133,134,135,136,137,138,139,140,141,142,145,146,150,151,154,155,156,159,164,],[31,56,31,56,-58,56,56,56,56,56,56,56,56,-41,-42,-76,-52,-76,56,-76,-47,-58,-30,-31,-32,-33,-34,-35,-36,-37,-76,-76,56,111,-74,-75,-58,-46,-49,56,56,-55,56,-76,-66,-67,-68,-69,-70,-71,-85,-86,-87,-88,-89,111,56,-76,-76,-47,-76,-53,-54,31,-29,-39,111,-77,-78,-79,-80,-81,-82,-83,-84,-90,-56,-44,-45,31,-40,-76,-57,-76,-51,-59,]),'REAL':([20,22,27,36,37,38,39,40,41,42,43,44,45,47,48,49,50,51,52,54,55,63,65,66,67,68,69,70,71,72,73,74,75,78,79,80,82,86,87,88,89,99,100,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,123,126,127,132,133,134,135,136,137,138,139,140,141,142,145,146,150,151,154,155,156,159,164,],[32,57,32,57,-58,57,57,57,57,57,57,57,57,-41,-42,-76,-52,-76,57,-76,-47,-58,-30,-31,-32,-33,-34,-35,-36,-37,-76,-76,57,112,-74,-75,-58,-46,-49,57,57,-55,57,-76,-66,-67,-68,-69,-70,-71,-85,-86,-87,-88,-89,112,57,-76,-76,-47,-76,-53,-54,32,-29,-39,112,-77,-78,-79,-80,-81,-82,-83,-84,-90,-56,-44,-45,32,-40,-76,-57,-76,-51,-59,]),'STRING':([20,27,49,51,54,73,74,78,79,80,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,119,123,132,133,134,135,136,137,138,139,140,141,150,154,156,],[33,33,-76,-76,-76,-76,-76,113,-74,-75,-76,-66,-67,-68,-69,-70,-71,-85,-86,-87,-88,-89,113,-76,-76,-76,33,113,-77,-78,-79,-80,-81,-82,-83,-84,-90,33,-76,-76,]),'BOOLEAN':([20,27,123,150,],[34,34,34,34,]),'CHAR':([20,27,123,150,],[35,35,35,35,]),'END':([22,36,37,38,39,40,41,42,43,44,45,47,48,50,55,63,65,66,67,68,69,70,71,72,75,86,87,88,89,99,115,118,120,121,126,127,129,142,145,146,151,155,159,164,],[-38,-38,64,-38,-38,-38,-38,-38,-38,-38,-38,-41,-42,-52,-47,95,-30,-31,-32,-33,-34,-35,-36,-37,-38,-46,-49,-38,-38,-55,-38,-47,-53,-54,-29,-39,152,-56,-44,-45,-40,-57,-51,-59,]),'CASE':([22,36,37,38,39,40,41,42,43,44,45,47,48,50,52,55,63,65,66,67,68,69,70,71,72,75,82,86,87,88,89,99,115,118,120,121,126,127,142,145,146,151,155,159,164,],[49,49,-58,49,49,49,49,49,49,49,49,-41,-42,-52,49,-47,-58,-30,-31,-32,-33,-34,-35,-36,-37,49,-58,-46,-49,49,49,-55,49,-47,-53,-54,-29,-39,-56,-44,-45,-40,-57,-51,-59,]),'WHILE':([22,36,37,38,39,40,41,42,43,44,45,47,48,50,52,55,63,65,66,67,68,69,70,71,72,75,82,86,87,88,89,99,115,118,120,121,126,127,142,145,146,151,155,159,164,],[51,51,-58,51,51,51,51,51,51,51,51,-41,-42,-52,51,-47,-58,-30,-31,-32,-33,-34,-35,-36,-37,51,-58,-46,-49,51,51,-55,51,-47,-53,-54,-29,-39,-56,-44,-45,-40,-57,-51,-59,]),'REPEAT':([22,36,37,38,39,40,41,42,43,44,45,47,48,50,52,55,63,65,66,67,68,69,70,71,72,75,82,86,87,88,89,99,115,118,120,121,126,127,142,145,146,151,155,159,164,],[52,52,-58,52,52,52,52,52,52,52,52,-41,-42,-52,52,-47,-58,-30,-31,-32,-33,-34,-35,-36,-37,52,-58,-46,-49,52,52,-55,52,-47,-53,-54,-29,-39,-56,-44,-45,-40,-57,-51,-59,]),'FOR':([22,36,37,38,39,40,41,42,43,44,45,47,48,50,52,55,63,65,66,67,68,69,70,71,72,75,82,86,87,88,89,99,115,118,120,121,126,127,142,145,146,151,155,159,164,],[53,53,-58,53,53,53,53,53,53,53,53,-41,-42,-52,53,-47,-58,-30,-31,-32,-33,-34,-35,-36,-37,53,-58,-46,-49,53,53,-55,53,-47,-53,-54,-29,-39,-56,-44,-45,-40,-57,-51,-59,]),'IF':([22,36,37,38,39,40,41,42,43,44,45,47,48,50,52,55,63,65,66,67,68,69,70,71,72,75,82,86,87,88,89,99,115,118,120,121,126,127,142,145,146,151,155,159,164,],[54,54,-58,54,54,54,54,54,54,54,54,-41,-42,-52,54,54,-58,-30,-31,-32,-33,-34,-35,-36,-37,54,-58,-46,-49,54,54,-55,54,54,-53,-54,-29,-39,-56,-44,-45,-40,-57,-51,-59,]),'ELSE':([22,36,37,38,39,40,41,42,43,44,45,47,48,50,52,55,63,65,66,67,68,69,70,71,72,75,82,86,87,88,89,99,115,118,120,121,126,127,142,145,146,151,155,159,164,],[55,55,-58,55,55,55,55,55,55,55,55,-41,-42,-52,55,55,-58,-30,-31,-32,-33,-34,-35,-36,-37,55,-58,-46,-49,55,55,-55,55,55,-53,-54,-29,-39,-56,-44,-45,-40,-57,-51,-59,]),'LPARENT':([25,26,46,],[58,59,74,]),'UNTIL':([38,39,40,41,42,43,44,45,47,48,50,52,55,65,66,67,68,69,70,71,72,75,82,86,87,88,89,99,115,118,120,121,126,127,142,145,146,151,155,159,164,],[-38,-38,-38,-38,-38,-38,-38,-38,-41,-42,-52,-38,-47,-30,-31,-32,-33,-34,-35,-36,-37,-38,116,-46,-49,-38,-38,-55,-38,-47,-53,-54,-29,-39,-56,-44,-45,-40,-57,-51,-59,]),'ASSIGNMENT':([46,83,],[73,117,]),'UPLUS':([49,51,54,73,74,78,79,80,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,119,132,133,134,135,136,137,138,139,140,141,154,156,],[79,79,79,79,79,-91,-74,-75,79,-66,-67,-68,-69,-70,-71,-85,-86,-87,-88,-89,-91,79,79,79,-91,-77,-78,-79,-80,-81,-82,-83,-84,-90,79,79,]),'UMINUS':([49,51,54,73,74,78,79,80,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,119,132,133,134,135,136,137,138,139,140,141,154,156,],[80,80,80,80,80,-91,-74,-75,80,-66,-67,-68,-69,-70,-71,-85,-86,-87,-88,-89,-91,80,80,80,-91,-77,-78,-79,-80,-81,-82,-83,-84,-90,80,80,]),'NOT':([49,51,54,73,74,78,79,80,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,119,132,133,134,135,136,137,138,139,140,141,154,156,],[-76,-76,-76,-76,-76,114,-74,-75,-76,-66,-67,-68,-69,-70,-71,-85,-86,-87,-88,-89,114,-76,-76,-76,114,-77,-78,-79,-80,-81,-82,-83,-84,-90,-76,-76,]),'PLUS':([49,51,54,73,74,78,79,80,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,119,132,133,134,135,136,137,138,139,140,141,154,156,],[-76,-76,-76,-76,-76,-91,-74,-75,-76,-66,-67,-68,-69,-70,-71,133,-86,-87,-88,-89,-91,-76,-76,-76,-91,-77,-78,-79,-80,-81,-82,-83,-84,-90,-76,-76,]),'MINUS':([49,51,54,73,74,78,79,80,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,119,132,133,134,135,136,137,138,139,140,141,154,156,],[-76,-76,-76,-76,-76,-91,-74,-75,-76,-66,-67,-68,-69,-70,-71,134,-86,-87,-88,-89,-91,-76,-76,-76,-91,-77,-78,-79,-80,-81,-82,-83,-84,-90,-76,-76,]),'OR':([49,51,54,73,74,78,79,80,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,119,132,133,134,135,136,137,138,139,140,141,154,156,],[-76,-76,-76,-76,-76,-91,-74,-75,-76,-66,-67,-68,-69,-70,-71,135,-86,-87,-88,-89,-91,-76,-76,-76,-91,-77,-78,-79,-80,-81,-82,-83,-84,-90,-76,-76,]),'TIMES':([49,51,54,73,74,78,79,80,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,119,132,133,134,135,136,137,138,139,140,141,154,156,],[-76,-76,-76,-76,-76,-91,-74,-75,-76,-66,-67,-68,-69,-70,-71,136,-86,-87,-88,-89,-91,-76,-76,-76,-91,-77,-78,-79,-80,-81,-82,-83,-84,-90,-76,-76,]),'DIVIDE':([49,51,54,73,74,78,79,80,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,119,132,133,134,135,136,137,138,139,140,141,154,156,],[-76,-76,-76,-76,-76,-91,-74,-75,-76,-66,-67,-68,-69,-70,-71,137,-86,-87,-88,-89,-91,-76,-76,-76,-91,-77,-78,-79,-80,-81,-82,-83,-84,-90,-76,-76,]),'DIV':([49,51,54,73,74,78,79,80,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,119,132,133,134,135,136,137,138,139,140,141,154,156,],[-76,-76,-76,-76,-76,-91,-74,-75,-76,-66,-67,-68,-69,-70,-71,138,-86,-87,-88,-89,-91,-76,-76,-76,-91,-77,-78,-79,-80,-81,-82,-83,-84,-90,-76,-76,]),'MOD':([49,51,54,73,74,78,79,80,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,119,132,133,134,135,136,137,138,139,140,141,154,156,],[-76,-76,-76,-76,-76,-91,-74,-75,-76,-66,-67,-68,-69,-70,-71,139,-86,-87,-88,-89,-91,-76,-76,-76,-91,-77,-78,-79,-80,-81,-82,-83,-84,-90,-76,-76,]),'AND':([49,51,54,73,74,78,79,80,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,119,132,133,134,135,136,137,138,139,140,141,154,156,],[-76,-76,-76,-76,-76,-91,-74,-75,-76,-66,-67,-68,-69,-70,-71,140,-86,-87,-88,-89,-91,-76,-76,-76,-91,-77,-78,-79,-80,-81,-82,-83,-84,-90,-76,-76,]),'LTHAN':([49,51,54,73,74,77,78,79,80,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,119,131,132,133,134,135,136,137,138,139,140,141,154,156,160,],[-76,-76,-76,-76,-76,104,-91,-74,-75,-76,-66,-67,-68,-69,-70,-71,-72,-86,-87,-88,-89,-91,-76,-76,-76,104,-91,-77,-78,-79,-80,-81,-82,-83,-84,-90,-76,-76,-73,]),'GTHAN':([49,51,54,73,74,77,78,79,80,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,119,131,132,133,134,135,136,137,138,139,140,141,154,156,160,],[-76,-76,-76,-76,-76,105,-91,-74,-75,-76,-66,-67,-68,-69,-70,-71,-72,-86,-87,-88,-89,-91,-76,-76,-76,105,-91,-77,-78,-79,-80,-81,-82,-83,-84,-90,-76,-76,-73,]),'DIFFERENT':([49,51,54,73,74,77,78,79,80,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,119,131,132,133,134,135,136,137,138,139,140,141,154,156,160,],[-76,-76,-76,-76,-76,106,-91,-74,-75,-76,-66,-67,-68,-69,-70,-71,-72,-86,-87,-88,-89,-91,-76,-76,-76,106,-91,-77,-78,-79,-80,-81,-82,-83,-84,-90,-76,-76,-73,]),'GEQUALS':([49,51,54,73,74,77,78,79,80,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,119,131,132,133,134,135,136,137,138,139,140,141,154,156,160,],[-76,-76,-76,-76,-76,107,-91,-74,-75,-76,-66,-67,-68,-69,-70,-71,-72,-86,-87,-88,-89,-91,-76,-76,-76,107,-91,-77,-78,-79,-80,-81,-82,-83,-84,-90,-76,-76,-73,]),'LEQUALS':([49,51,54,73,74,77,78,79,80,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,119,131,132,133,134,135,136,137,138,139,140,141,154,156,160,],[-76,-76,-76,-76,-76,108,-91,-74,-75,-76,-66,-67,-68,-69,-70,-71,-72,-86,-87,-88,-89,-91,-76,-76,-76,108,-91,-77,-78,-79,-80,-81,-82,-83,-84,-90,-76,-76,-73,]),'OF':([49,76,77,78,79,80,101,102,103,104,105,106,107,108,109,110,111,112,113,114,131,132,133,134,135,136,137,138,139,140,141,153,154,160,],[-76,100,-65,-91,-74,-75,-63,-76,-66,-67,-68,-69,-70,-71,-72,-86,-87,-88,-89,-91,-65,-91,-77,-78,-79,-80,-81,-82,-83,-84,-90,-64,-76,-73,]),'DO':([51,77,78,79,80,81,101,102,103,104,105,106,107,108,109,110,111,112,113,114,131,132,133,134,135,136,137,138,139,140,141,153,154,156,160,161,],[-76,-65,-91,-74,-75,115,-63,-76,-66,-67,-68,-69,-70,-71,-72,-86,-87,-88,-89,-91,-65,-91,-77,-78,-79,-80,-81,-82,-83,-84,-90,-64,-76,-76,-73,164,]),'THEN':([54,77,78,79,80,84,85,101,102,103,104,105,106,107,108,109,110,111,112,113,114,119,131,132,133,134,135,136,137,138,139,140,141,147,153,154,160,],[-76,-65,-91,-74,-75,118,-61,-63,-76,-66,-67,-68,-69,-70,-71,-72,-86,-87,-88,-89,-91,-76,-65,-91,-77,-78,-79,-80,-81,-82,-83,-84,-90,-62,-64,-76,-73,]),'RPARENT':([58,59,74,77,78,79,80,85,90,92,98,101,102,103,104,105,106,107,108,109,110,111,112,113,114,119,131,132,133,134,135,136,137,138,139,140,141,147,153,154,157,160,162,],[-26,-26,-76,-65,-91,-74,-75,-61,122,124,128,-63,-76,-66,-67,-68,-69,-70,-71,-72,-86,-87,-88,-89,-91,-76,-65,-91,-77,-78,-79,-80,-81,-82,-83,-84,-90,-62,-64,-76,-26,-73,-25,]),'SCORE':([64,],[96,]),'TO':([77,78,79,80,101,102,103,104,105,106,107,108,109,110,111,112,113,114,117,131,132,133,134,135,136,137,138,139,140,141,144,153,154,160,],[-65,-91,-74,-75,-63,-76,-66,-67,-68,-69,-70,-71,-72,-86,-87,-88,-89,-91,-76,-65,-91,-77,-78,-79,-80,-81,-82,-83,-84,-90,156,-64,-76,-73,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([4,],[5,]),'const_declaration_part':([4,],[6,]),'var_declaration_part':([6,],[8,]),'const_definition':([7,62,],[10,94,]),'subroutine_declaration_part':([8,13,14,],[12,23,24,]),'procedure_declaration':([8,13,14,],[13,13,13,]),'function_declaration':([8,13,14,],[14,14,14,]),'var_declaration':([9,93,],[17,125,]),'identifier_list':([9,28,58,59,93,157,],[18,61,91,91,18,91,]),'compound_statement_score':([12,],[21,]),'types':([20,27,123,150,],[30,60,149,158,]),'statement':([22,36,38,39,40,41,42,43,44,45,52,75,88,89,115,],[37,63,65,66,67,68,69,70,71,72,82,99,120,121,142,]),'assign_statement':([22,36,38,39,40,41,42,43,44,45,52,75,88,89,115,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'procedure_call':([22,36,38,39,40,41,42,43,44,45,52,75,88,89,115,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'if_statement':([22,36,38,39,40,41,42,43,44,45,52,75,88,89,115,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'case_statement':([22,36,38,39,40,41,42,43,44,45,52,75,88,89,115,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'while_statement':([22,36,38,39,40,41,42,43,44,45,52,75,88,89,115,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'repeat_statement':([22,36,38,39,40,41,42,43,44,45,52,75,88,89,115,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'for_statement':([22,36,38,39,40,41,42,43,44,45,52,75,88,89,115,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'compound_statement_semicolon':([22,36,38,39,40,41,42,43,44,45,52,75,88,89,115,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'if1':([22,36,38,39,40,41,42,43,44,45,52,55,75,88,89,115,118,],[47,47,47,47,47,47,47,47,47,47,47,86,47,47,47,47,145,]),'if2':([22,36,38,39,40,41,42,43,44,45,52,55,75,88,89,115,118,],[48,48,48,48,48,48,48,48,48,48,48,87,48,48,48,48,146,]),'case':([22,36,38,39,40,41,42,43,44,45,52,75,88,89,100,115,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,129,50,]),'expr':([49,51,54,73,74,116,117,119,156,],[76,81,85,97,85,143,144,85,161,]),'simple_expr':([49,51,54,73,74,102,116,117,119,154,156,],[77,77,77,77,77,131,77,77,77,160,77,]),'uplus_uminus':([49,51,54,73,74,102,116,117,119,154,156,],[78,78,78,78,78,78,78,78,78,78,78,]),'expr_list':([54,74,119,],[84,98,147,]),'param_section':([58,59,157,],[90,92,162,]),'relop_simple_expr':([77,131,],[101,153,]),'relop':([77,131,],[102,102,]),'factor':([78,114,132,],[109,141,154,]),'addop_mulop':([109,],[132,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON block','program',4,'p_program','ExpressionLanguageParser.py',36),
  ('program -> PROGRAM ID SEMICOLON','program',3,'p_program','ExpressionLanguageParser.py',37),
  ('block -> const_declaration_part var_declaration_part subroutine_declaration_part compound_statement_score','block',4,'p_block','ExpressionLanguageParser.py',49),
  ('const_declaration_part -> CONST const_definition','const_declaration_part',2,'p_const_declaration_part','ExpressionLanguageParser.py',58),
  ('const_declaration_part -> <empty>','const_declaration_part',0,'p_const_declaration_part','ExpressionLanguageParser.py',59),
  ('const_definition -> ID EQUALS types SEMICOLON const_definition','const_definition',5,'p_const_definition','ExpressionLanguageParser.py',69),
  ('const_definition -> ID EQUALS types SEMICOLON','const_definition',4,'p_const_definition','ExpressionLanguageParser.py',70),
  ('var_declaration_part -> VAR var_declaration','var_declaration_part',2,'p_var_declaration_part','ExpressionLanguageParser.py',85),
  ('var_declaration_part -> <empty>','var_declaration_part',0,'p_var_declaration_part','ExpressionLanguageParser.py',86),
  ('var_declaration -> identifier_list TWOPOINTS types SEMICOLON var_declaration','var_declaration',5,'p_var_declaration','ExpressionLanguageParser.py',95),
  ('var_declaration -> identifier_list TWOPOINTS types SEMICOLON','var_declaration',4,'p_var_declaration','ExpressionLanguageParser.py',96),
  ('types -> INTEGER','types',1,'p_types','ExpressionLanguageParser.py',108),
  ('types -> REAL','types',1,'p_types','ExpressionLanguageParser.py',109),
  ('types -> STRING','types',1,'p_types','ExpressionLanguageParser.py',110),
  ('types -> BOOLEAN','types',1,'p_types','ExpressionLanguageParser.py',111),
  ('types -> CHAR','types',1,'p_types','ExpressionLanguageParser.py',112),
  ('types -> ID','types',1,'p_types','ExpressionLanguageParser.py',113),
  ('identifier_list -> ID','identifier_list',1,'p_identifier_list','ExpressionLanguageParser.py',120),
  ('identifier_list -> ID COMMA identifier_list','identifier_list',3,'p_identifier_list','ExpressionLanguageParser.py',121),
  ('subroutine_declaration_part -> procedure_declaration subroutine_declaration_part','subroutine_declaration_part',2,'p_subroutine_declaration_part','ExpressionLanguageParser.py',134),
  ('subroutine_declaration_part -> function_declaration subroutine_declaration_part','subroutine_declaration_part',2,'p_subroutine_declaration_part','ExpressionLanguageParser.py',135),
  ('subroutine_declaration_part -> <empty>','subroutine_declaration_part',0,'p_subroutine_declaration_part','ExpressionLanguageParser.py',136),
  ('procedure_declaration -> PROCEDURE ID LPARENT param_section RPARENT SEMICOLON','procedure_declaration',6,'p_procedure_declaration','ExpressionLanguageParser.py',148),
  ('function_declaration -> FUNCTION ID LPARENT param_section RPARENT TWOPOINTS types SEMICOLON','function_declaration',8,'p_function_declaration','ExpressionLanguageParser.py',161),
  ('param_section -> identifier_list TWOPOINTS types SEMICOLON param_section','param_section',5,'p_param_section','ExpressionLanguageParser.py',170),
  ('param_section -> <empty>','param_section',0,'p_param_section','ExpressionLanguageParser.py',171),
  ('compound_statement_score -> BEGIN statement END SCORE','compound_statement_score',4,'p_compound_statement_score','ExpressionLanguageParser.py',188),
  ('compound_statement_score -> <empty>','compound_statement_score',0,'p_compound_statement_score','ExpressionLanguageParser.py',189),
  ('compound_statement_semicolon -> BEGIN statement END SEMICOLON','compound_statement_semicolon',4,'p_compound_statement_semicolon','ExpressionLanguageParser.py',196),
  ('statement -> assign_statement statement','statement',2,'p_statement','ExpressionLanguageParser.py',202),
  ('statement -> procedure_call statement','statement',2,'p_statement','ExpressionLanguageParser.py',203),
  ('statement -> if_statement statement','statement',2,'p_statement','ExpressionLanguageParser.py',204),
  ('statement -> case_statement statement','statement',2,'p_statement','ExpressionLanguageParser.py',205),
  ('statement -> while_statement statement','statement',2,'p_statement','ExpressionLanguageParser.py',206),
  ('statement -> repeat_statement statement','statement',2,'p_statement','ExpressionLanguageParser.py',207),
  ('statement -> for_statement statement','statement',2,'p_statement','ExpressionLanguageParser.py',208),
  ('statement -> compound_statement_semicolon statement','statement',2,'p_statement','ExpressionLanguageParser.py',209),
  ('statement -> <empty>','statement',0,'p_statement','ExpressionLanguageParser.py',210),
  ('assign_statement -> ID ASSIGNMENT expr SEMICOLON','assign_statement',4,'p_assign_statement','ExpressionLanguageParser.py',218),
  ('procedure_call -> ID LPARENT expr_list RPARENT SEMICOLON','procedure_call',5,'p_procedure_call','ExpressionLanguageParser.py',226),
  ('if_statement -> if1','if_statement',1,'p_if_statement','ExpressionLanguageParser.py',234),
  ('if_statement -> if2','if_statement',1,'p_if_statement','ExpressionLanguageParser.py',235),
  ('if_statement -> <empty>','if_statement',0,'p_if_statement','ExpressionLanguageParser.py',236),
  ('if1 -> IF expr_list THEN if1','if1',4,'p_if1','ExpressionLanguageParser.py',242),
  ('if1 -> IF expr_list THEN if2','if1',4,'p_if1','ExpressionLanguageParser.py',243),
  ('if1 -> ELSE if1','if1',2,'p_if1','ExpressionLanguageParser.py',244),
  ('if1 -> <empty>','if1',0,'p_if1','ExpressionLanguageParser.py',245),
  ('if2 -> IF expr_list THEN if2','if2',4,'p_if2','ExpressionLanguageParser.py',251),
  ('if2 -> ELSE if2','if2',2,'p_if2','ExpressionLanguageParser.py',252),
  ('if2 -> <empty>','if2',0,'p_if2','ExpressionLanguageParser.py',253),
  ('case_statement -> CASE expr OF case END SEMICOLON','case_statement',6,'p_case_statement','ExpressionLanguageParser.py',262),
  ('case_statement -> case','case_statement',1,'p_case_statement','ExpressionLanguageParser.py',263),
  ('case -> INTEGER TWOPOINTS statement','case',3,'p_case','ExpressionLanguageParser.py',269),
  ('case -> REAL TWOPOINTS statement','case',3,'p_case','ExpressionLanguageParser.py',270),
  ('case -> ID TWOPOINTS statement','case',3,'p_case','ExpressionLanguageParser.py',271),
  ('while_statement -> WHILE expr DO statement','while_statement',4,'p_while_statement','ExpressionLanguageParser.py',279),
  ('repeat_statement -> REPEAT statement UNTIL expr SEMICOLON','repeat_statement',5,'p_repeat_statement','ExpressionLanguageParser.py',288),
  ('repeat_statement -> statement','repeat_statement',1,'p_repeat_statement','ExpressionLanguageParser.py',289),
  ('for_statement -> FOR ID ASSIGNMENT expr TO expr DO','for_statement',7,'p_for_statement','ExpressionLanguageParser.py',299),
  ('for_statement -> statement','for_statement',1,'p_for_statement','ExpressionLanguageParser.py',300),
  ('expr_list -> expr','expr_list',1,'p_expr_list','ExpressionLanguageParser.py',310),
  ('expr_list -> expr COMMA expr_list','expr_list',3,'p_expr_list','ExpressionLanguageParser.py',311),
  ('expr -> simple_expr relop_simple_expr','expr',2,'p_expr','ExpressionLanguageParser.py',317),
  ('relop_simple_expr -> relop simple_expr relop_simple_expr','relop_simple_expr',3,'p_relop_simple_expr','ExpressionLanguageParser.py',325),
  ('relop_simple_expr -> <empty>','relop_simple_expr',0,'p_relop_simple_expr','ExpressionLanguageParser.py',326),
  ('relop -> EQUALS','relop',1,'p_relop','ExpressionLanguageParser.py',333),
  ('relop -> LTHAN','relop',1,'p_relop','ExpressionLanguageParser.py',334),
  ('relop -> GTHAN','relop',1,'p_relop','ExpressionLanguageParser.py',335),
  ('relop -> DIFFERENT','relop',1,'p_relop','ExpressionLanguageParser.py',336),
  ('relop -> GEQUALS','relop',1,'p_relop','ExpressionLanguageParser.py',337),
  ('relop -> LEQUALS','relop',1,'p_relop','ExpressionLanguageParser.py',338),
  ('simple_expr -> uplus_uminus factor','simple_expr',2,'p_simple_expr','ExpressionLanguageParser.py',345),
  ('simple_expr -> uplus_uminus factor addop_mulop factor simple_expr','simple_expr',5,'p_simple_expr','ExpressionLanguageParser.py',346),
  ('uplus_uminus -> UPLUS','uplus_uminus',1,'p_uplus_uminus','ExpressionLanguageParser.py',354),
  ('uplus_uminus -> UMINUS','uplus_uminus',1,'p_uplus_uminus','ExpressionLanguageParser.py',355),
  ('uplus_uminus -> <empty>','uplus_uminus',0,'p_uplus_uminus','ExpressionLanguageParser.py',356),
  ('addop_mulop -> PLUS','addop_mulop',1,'p_addop_mulop','ExpressionLanguageParser.py',364),
  ('addop_mulop -> MINUS','addop_mulop',1,'p_addop_mulop','ExpressionLanguageParser.py',365),
  ('addop_mulop -> OR','addop_mulop',1,'p_addop_mulop','ExpressionLanguageParser.py',366),
  ('addop_mulop -> TIMES','addop_mulop',1,'p_addop_mulop','ExpressionLanguageParser.py',367),
  ('addop_mulop -> DIVIDE','addop_mulop',1,'p_addop_mulop','ExpressionLanguageParser.py',368),
  ('addop_mulop -> DIV','addop_mulop',1,'p_addop_mulop','ExpressionLanguageParser.py',369),
  ('addop_mulop -> MOD','addop_mulop',1,'p_addop_mulop','ExpressionLanguageParser.py',370),
  ('addop_mulop -> AND','addop_mulop',1,'p_addop_mulop','ExpressionLanguageParser.py',371),
  ('addop_mulop -> <empty>','addop_mulop',0,'p_addop_mulop','ExpressionLanguageParser.py',372),
  ('factor -> ID','factor',1,'p_factor','ExpressionLanguageParser.py',380),
  ('factor -> INTEGER','factor',1,'p_factor','ExpressionLanguageParser.py',381),
  ('factor -> REAL','factor',1,'p_factor','ExpressionLanguageParser.py',382),
  ('factor -> STRING','factor',1,'p_factor','ExpressionLanguageParser.py',383),
  ('factor -> NOT factor','factor',2,'p_factor','ExpressionLanguageParser.py',384),
  ('factor -> <empty>','factor',0,'p_factor','ExpressionLanguageParser.py',385),
]
