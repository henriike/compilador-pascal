
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY ASSIGNMENT BEGIN BOOLEAN CASE CHAR COMMA COMMENT CONST DIFFERENT DIV DIVIDE DO DOWNTO ELSE END EQUALS EXP FALSE FOR FUNCTION GEQUALS GTHAN ID IF INTEGER LBRACKET LEQUALS LPARENT LTHAN MINUS MOD NOT OF OR PLUS PROCEDURE PROGRAM RBRACKET REAL REPEAT RESERVED RPARENT SCORE SEMICOLON STRING THEN TIMES TO TRUE TWOPOINTS UNTIL VAR WHILE\n    program : PROGRAM ID SEMICOLON block\n            | PROGRAM ID SEMICOLON\n    \n    block : const_declaration_part var_declaration_part subroutine_declaration_part\n    \n    const_declaration_part : CONST const_definition\n                           |          \n    \n    const_definition : ID EQUALS types SEMICOLON const_definition\n                    |  ID EQUALS types SEMICOLON\n    \n    var_declaration_part : VAR var_declaration\n                         |\n    \n    var_declaration : identifier_list TWOPOINTS types SEMICOLON var_declaration\n                    | identifier_list TWOPOINTS types SEMICOLON\n    \n    types : INTEGER\n          | REAL\n          | STRING\n          | BOOLEAN\n          | CHAR\n          | ID\n    \n    identifier_list : ID\n                    | ID COMMA identifier_list\n    \n    subroutine_declaration_part : procedure_declaration subroutine_declaration_part\n                                | function_declaration subroutine_declaration_part\n                                |\n    \n    procedure_declaration : PROCEDURE ID LPARENT param_section RPARENT SEMICOLON\n    \n    function_declaration : FUNCTION ID LPARENT param_section RPARENT TWOPOINTS types SEMICOLON\n    \n    param_section : identifier_list TWOPOINTS types SEMICOLON param_section\n                  |\n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,4,5,6,8,10,12,13,14,17,21,22,38,42,43,47,48,54,],[0,-2,-1,-9,-22,-4,-3,-22,-22,-8,-20,-21,-7,-11,-6,-10,-23,-24,]),'ID':([2,7,9,15,16,20,25,26,34,35,38,42,45,50,51,],[3,11,19,23,24,27,27,19,19,19,11,19,27,27,19,]),'SEMICOLON':([3,27,28,29,30,31,32,33,36,44,49,52,],[4,-17,38,-12,-13,-14,-15,-16,42,48,51,54,]),'CONST':([4,],[7,]),'VAR':([4,6,10,38,43,],[-5,9,-4,-7,-6,]),'PROCEDURE':([4,6,8,10,13,14,17,38,42,43,47,48,54,],[-5,-9,15,-4,15,15,-8,-7,-11,-6,-10,-23,-24,]),'FUNCTION':([4,6,8,10,13,14,17,38,42,43,47,48,54,],[-5,-9,16,-4,16,16,-8,-7,-11,-6,-10,-23,-24,]),'EQUALS':([11,],[20,]),'TWOPOINTS':([18,19,37,40,46,],[25,-18,-19,45,50,]),'COMMA':([19,],[26,]),'INTEGER':([20,25,45,50,],[29,29,29,29,]),'REAL':([20,25,45,50,],[30,30,30,30,]),'STRING':([20,25,45,50,],[31,31,31,31,]),'BOOLEAN':([20,25,45,50,],[32,32,32,32,]),'CHAR':([20,25,45,50,],[33,33,33,33,]),'LPARENT':([23,24,],[34,35,]),'RPARENT':([34,35,39,41,51,53,],[-26,-26,44,46,-26,-25,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([4,],[5,]),'const_declaration_part':([4,],[6,]),'var_declaration_part':([6,],[8,]),'const_definition':([7,38,],[10,43,]),'subroutine_declaration_part':([8,13,14,],[12,21,22,]),'procedure_declaration':([8,13,14,],[13,13,13,]),'function_declaration':([8,13,14,],[14,14,14,]),'var_declaration':([9,42,],[17,47,]),'identifier_list':([9,26,34,35,42,51,],[18,37,40,40,18,40,]),'types':([20,25,45,50,],[28,36,49,52,]),'param_section':([34,35,51,],[39,41,53,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON block','program',4,'p_program','ExpressionLanguageParser.py',15),
  ('program -> PROGRAM ID SEMICOLON','program',3,'p_program','ExpressionLanguageParser.py',16),
  ('block -> const_declaration_part var_declaration_part subroutine_declaration_part','block',3,'p_block','ExpressionLanguageParser.py',28),
  ('const_declaration_part -> CONST const_definition','const_declaration_part',2,'p_const_declaration_part','ExpressionLanguageParser.py',37),
  ('const_declaration_part -> <empty>','const_declaration_part',0,'p_const_declaration_part','ExpressionLanguageParser.py',38),
  ('const_definition -> ID EQUALS types SEMICOLON const_definition','const_definition',5,'p_const_definition','ExpressionLanguageParser.py',48),
  ('const_definition -> ID EQUALS types SEMICOLON','const_definition',4,'p_const_definition','ExpressionLanguageParser.py',49),
  ('var_declaration_part -> VAR var_declaration','var_declaration_part',2,'p_var_declaration_part','ExpressionLanguageParser.py',64),
  ('var_declaration_part -> <empty>','var_declaration_part',0,'p_var_declaration_part','ExpressionLanguageParser.py',65),
  ('var_declaration -> identifier_list TWOPOINTS types SEMICOLON var_declaration','var_declaration',5,'p_var_declaration','ExpressionLanguageParser.py',74),
  ('var_declaration -> identifier_list TWOPOINTS types SEMICOLON','var_declaration',4,'p_var_declaration','ExpressionLanguageParser.py',75),
  ('types -> INTEGER','types',1,'p_types','ExpressionLanguageParser.py',87),
  ('types -> REAL','types',1,'p_types','ExpressionLanguageParser.py',88),
  ('types -> STRING','types',1,'p_types','ExpressionLanguageParser.py',89),
  ('types -> BOOLEAN','types',1,'p_types','ExpressionLanguageParser.py',90),
  ('types -> CHAR','types',1,'p_types','ExpressionLanguageParser.py',91),
  ('types -> ID','types',1,'p_types','ExpressionLanguageParser.py',92),
  ('identifier_list -> ID','identifier_list',1,'p_identifier_list','ExpressionLanguageParser.py',99),
  ('identifier_list -> ID COMMA identifier_list','identifier_list',3,'p_identifier_list','ExpressionLanguageParser.py',100),
  ('subroutine_declaration_part -> procedure_declaration subroutine_declaration_part','subroutine_declaration_part',2,'p_subroutine_declaration_part','ExpressionLanguageParser.py',113),
  ('subroutine_declaration_part -> function_declaration subroutine_declaration_part','subroutine_declaration_part',2,'p_subroutine_declaration_part','ExpressionLanguageParser.py',114),
  ('subroutine_declaration_part -> <empty>','subroutine_declaration_part',0,'p_subroutine_declaration_part','ExpressionLanguageParser.py',115),
  ('procedure_declaration -> PROCEDURE ID LPARENT param_section RPARENT SEMICOLON','procedure_declaration',6,'p_procedure_declaration','ExpressionLanguageParser.py',127),
  ('function_declaration -> FUNCTION ID LPARENT param_section RPARENT TWOPOINTS types SEMICOLON','function_declaration',8,'p_function_declaration','ExpressionLanguageParser.py',140),
  ('param_section -> identifier_list TWOPOINTS types SEMICOLON param_section','param_section',5,'p_param_section','ExpressionLanguageParser.py',149),
  ('param_section -> <empty>','param_section',0,'p_param_section','ExpressionLanguageParser.py',150),
]
