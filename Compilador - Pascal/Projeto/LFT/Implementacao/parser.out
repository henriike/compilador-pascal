Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARRAY
    COMMENT
    DIVIDE_INT
    DOWNTO
    EXP
    FALSE
    LBRACKET
    RBRACKET
    RESERVED
    TRUE

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON block
Rule 2     program -> PROGRAM ID SEMICOLON
Rule 3     block -> const_declaration_part var_declaration_part subroutine_declaration_part compound_statement_score
Rule 4     const_declaration_part -> CONST const_definition
Rule 5     const_declaration_part -> <empty>
Rule 6     const_definition -> ID EQUALS types SEMICOLON const_definition
Rule 7     const_definition -> ID EQUALS types SEMICOLON
Rule 8     var_declaration_part -> VAR var_declaration
Rule 9     var_declaration_part -> <empty>
Rule 10    var_declaration -> identifier_list TWOPOINTS types SEMICOLON var_declaration
Rule 11    var_declaration -> identifier_list TWOPOINTS types SEMICOLON
Rule 12    types -> INTEGER
Rule 13    types -> REAL
Rule 14    types -> STRING
Rule 15    types -> BOOLEAN
Rule 16    types -> CHAR
Rule 17    types -> ID
Rule 18    identifier_list -> ID
Rule 19    identifier_list -> ID COMMA identifier_list
Rule 20    subroutine_declaration_part -> procedure_declaration subroutine_declaration_part
Rule 21    subroutine_declaration_part -> function_declaration subroutine_declaration_part
Rule 22    subroutine_declaration_part -> <empty>
Rule 23    procedure_declaration -> PROCEDURE ID LPARENT param_section RPARENT SEMICOLON
Rule 24    function_declaration -> FUNCTION ID LPARENT param_section RPARENT TWOPOINTS types SEMICOLON
Rule 25    param_section -> identifier_list TWOPOINTS types SEMICOLON param_section
Rule 26    param_section -> <empty>
Rule 27    compound_statement_score -> BEGIN statement END SCORE
Rule 28    compound_statement_score -> <empty>
Rule 29    compound_statement_semicolon -> BEGIN statement END SEMICOLON
Rule 30    statement -> assign_statement statement
Rule 31    statement -> procedure_call statement
Rule 32    statement -> if_statement statement
Rule 33    statement -> case_statement statement
Rule 34    statement -> while_statement statement
Rule 35    statement -> repeat_statement statement
Rule 36    statement -> for_statement statement
Rule 37    statement -> compound_statement_semicolon statement
Rule 38    statement -> <empty>
Rule 39    assign_statement -> ID ASSIGNMENT expr SEMICOLON
Rule 40    procedure_call -> ID LPARENT expr_list RPARENT SEMICOLON
Rule 41    if_statement -> if1
Rule 42    if_statement -> if2
Rule 43    if_statement -> <empty>
Rule 44    if1 -> IF expr_list THEN if1
Rule 45    if1 -> IF expr_list THEN if2
Rule 46    if1 -> ELSE if1
Rule 47    if1 -> <empty>
Rule 48    if2 -> IF expr_list THEN if2
Rule 49    if2 -> ELSE if2
Rule 50    if2 -> <empty>
Rule 51    case_statement -> CASE expr OF case END SEMICOLON
Rule 52    case_statement -> case
Rule 53    case -> INTEGER TWOPOINTS statement
Rule 54    case -> REAL TWOPOINTS statement
Rule 55    case -> ID TWOPOINTS statement
Rule 56    while_statement -> WHILE expr DO statement
Rule 57    repeat_statement -> REPEAT statement UNTIL expr SEMICOLON
Rule 58    repeat_statement -> statement
Rule 59    for_statement -> FOR ID ASSIGNMENT expr TO expr DO
Rule 60    for_statement -> statement
Rule 61    expr_list -> expr
Rule 62    expr_list -> expr COMMA expr_list
Rule 63    expr -> simple_expr relop_simple_expr
Rule 64    relop_simple_expr -> relop simple_expr relop_simple_expr
Rule 65    relop_simple_expr -> <empty>
Rule 66    relop -> EQUALS
Rule 67    relop -> LTHAN
Rule 68    relop -> GTHAN
Rule 69    relop -> DIFFERENT
Rule 70    relop -> GEQUALS
Rule 71    relop -> LEQUALS
Rule 72    simple_expr -> uplus_uminus factor
Rule 73    simple_expr -> uplus_uminus factor addop_mulop factor simple_expr
Rule 74    uplus_uminus -> UPLUS
Rule 75    uplus_uminus -> UMINUS
Rule 76    uplus_uminus -> <empty>
Rule 77    addop_mulop -> PLUS
Rule 78    addop_mulop -> MINUS
Rule 79    addop_mulop -> OR
Rule 80    addop_mulop -> TIMES
Rule 81    addop_mulop -> DIVIDE
Rule 82    addop_mulop -> DIV
Rule 83    addop_mulop -> MOD
Rule 84    addop_mulop -> AND
Rule 85    addop_mulop -> <empty>
Rule 86    factor -> ID
Rule 87    factor -> INTEGER
Rule 88    factor -> REAL
Rule 89    factor -> STRING
Rule 90    factor -> NOT factor
Rule 91    factor -> <empty>

Terminals, with rules where they appear

AND                  : 84
ARRAY                : 
ASSIGNMENT           : 39 59
BEGIN                : 27 29
BOOLEAN              : 15
CASE                 : 51
CHAR                 : 16
COMMA                : 19 62
COMMENT              : 
CONST                : 4
DIFFERENT            : 69
DIV                  : 82
DIVIDE               : 81
DIVIDE_INT           : 
DO                   : 56 59
DOWNTO               : 
ELSE                 : 46 49
END                  : 27 29 51
EQUALS               : 6 7 66
EXP                  : 
FALSE                : 
FOR                  : 59
FUNCTION             : 24
GEQUALS              : 70
GTHAN                : 68
ID                   : 1 2 6 7 17 18 19 23 24 39 40 55 59 86
IF                   : 44 45 48
INTEGER              : 12 53 87
LBRACKET             : 
LEQUALS              : 71
LPARENT              : 23 24 40
LTHAN                : 67
MINUS                : 78
MOD                  : 83
NOT                  : 90
OF                   : 51
OR                   : 79
PLUS                 : 77
PROCEDURE            : 23
PROGRAM              : 1 2
RBRACKET             : 
REAL                 : 13 54 88
REPEAT               : 57
RESERVED             : 
RPARENT              : 23 24 40
SCORE                : 27
SEMICOLON            : 1 2 6 7 10 11 23 24 25 29 39 40 51 57
STRING               : 14 89
THEN                 : 44 45 48
TIMES                : 80
TO                   : 59
TRUE                 : 
TWOPOINTS            : 10 11 24 25 53 54 55
UMINUS               : 75
UNTIL                : 57
UPLUS                : 74
VAR                  : 8
WHILE                : 56
error                : 

Nonterminals, with rules where they appear

addop_mulop          : 73
assign_statement     : 30
block                : 1
case                 : 51 52
case_statement       : 33
compound_statement_score : 3
compound_statement_semicolon : 37
const_declaration_part : 3
const_definition     : 4 6
expr                 : 39 51 56 57 59 59 61 62
expr_list            : 40 44 45 48 62
factor               : 72 73 73 90
for_statement        : 36
function_declaration : 21
identifier_list      : 10 11 19 25
if1                  : 41 44 46
if2                  : 42 45 48 49
if_statement         : 32
param_section        : 23 24 25
procedure_call       : 31
procedure_declaration : 20
program              : 0
relop                : 64
relop_simple_expr    : 63 64
repeat_statement     : 35
simple_expr          : 63 64 73
statement            : 27 29 30 31 32 33 34 35 36 37 53 54 55 56 57 58 60
subroutine_declaration_part : 3 20 21
types                : 6 7 10 11 24 25
uplus_uminus         : 72 73
var_declaration      : 8 10
var_declaration_part : 3
while_statement      : 34

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON block
    (2) program -> . PROGRAM ID SEMICOLON

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON block
    (2) program -> PROGRAM . ID SEMICOLON

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON block
    (2) program -> PROGRAM ID . SEMICOLON

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . block
    (2) program -> PROGRAM ID SEMICOLON .
    (3) block -> . const_declaration_part var_declaration_part subroutine_declaration_part compound_statement_score
    (4) const_declaration_part -> . CONST const_definition
    (5) const_declaration_part -> .

  ! reduce/reduce conflict for $end resolved using rule 2 (program -> PROGRAM ID SEMICOLON .)
    $end            reduce using rule 2 (program -> PROGRAM ID SEMICOLON .)
    CONST           shift and go to state 7
    VAR             reduce using rule 5 (const_declaration_part -> .)
    PROCEDURE       reduce using rule 5 (const_declaration_part -> .)
    FUNCTION        reduce using rule 5 (const_declaration_part -> .)
    BEGIN           reduce using rule 5 (const_declaration_part -> .)

  ! $end            [ reduce using rule 5 (const_declaration_part -> .) ]

    block                          shift and go to state 5
    const_declaration_part         shift and go to state 6

state 5

    (1) program -> PROGRAM ID SEMICOLON block .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON block .)


state 6

    (3) block -> const_declaration_part . var_declaration_part subroutine_declaration_part compound_statement_score
    (8) var_declaration_part -> . VAR var_declaration
    (9) var_declaration_part -> .

    VAR             shift and go to state 9
    PROCEDURE       reduce using rule 9 (var_declaration_part -> .)
    FUNCTION        reduce using rule 9 (var_declaration_part -> .)
    BEGIN           reduce using rule 9 (var_declaration_part -> .)
    $end            reduce using rule 9 (var_declaration_part -> .)

    var_declaration_part           shift and go to state 8

state 7

    (4) const_declaration_part -> CONST . const_definition
    (6) const_definition -> . ID EQUALS types SEMICOLON const_definition
    (7) const_definition -> . ID EQUALS types SEMICOLON

    ID              shift and go to state 11

    const_definition               shift and go to state 10

state 8

    (3) block -> const_declaration_part var_declaration_part . subroutine_declaration_part compound_statement_score
    (20) subroutine_declaration_part -> . procedure_declaration subroutine_declaration_part
    (21) subroutine_declaration_part -> . function_declaration subroutine_declaration_part
    (22) subroutine_declaration_part -> .
    (23) procedure_declaration -> . PROCEDURE ID LPARENT param_section RPARENT SEMICOLON
    (24) function_declaration -> . FUNCTION ID LPARENT param_section RPARENT TWOPOINTS types SEMICOLON

    BEGIN           reduce using rule 22 (subroutine_declaration_part -> .)
    $end            reduce using rule 22 (subroutine_declaration_part -> .)
    PROCEDURE       shift and go to state 15
    FUNCTION        shift and go to state 16

    subroutine_declaration_part    shift and go to state 12
    procedure_declaration          shift and go to state 13
    function_declaration           shift and go to state 14

state 9

    (8) var_declaration_part -> VAR . var_declaration
    (10) var_declaration -> . identifier_list TWOPOINTS types SEMICOLON var_declaration
    (11) var_declaration -> . identifier_list TWOPOINTS types SEMICOLON
    (18) identifier_list -> . ID
    (19) identifier_list -> . ID COMMA identifier_list

    ID              shift and go to state 19

    var_declaration                shift and go to state 17
    identifier_list                shift and go to state 18

state 10

    (4) const_declaration_part -> CONST const_definition .

    VAR             reduce using rule 4 (const_declaration_part -> CONST const_definition .)
    PROCEDURE       reduce using rule 4 (const_declaration_part -> CONST const_definition .)
    FUNCTION        reduce using rule 4 (const_declaration_part -> CONST const_definition .)
    BEGIN           reduce using rule 4 (const_declaration_part -> CONST const_definition .)
    $end            reduce using rule 4 (const_declaration_part -> CONST const_definition .)


state 11

    (6) const_definition -> ID . EQUALS types SEMICOLON const_definition
    (7) const_definition -> ID . EQUALS types SEMICOLON

    EQUALS          shift and go to state 20


state 12

    (3) block -> const_declaration_part var_declaration_part subroutine_declaration_part . compound_statement_score
    (27) compound_statement_score -> . BEGIN statement END SCORE
    (28) compound_statement_score -> .

    BEGIN           shift and go to state 22
    $end            reduce using rule 28 (compound_statement_score -> .)

    compound_statement_score       shift and go to state 21

state 13

    (20) subroutine_declaration_part -> procedure_declaration . subroutine_declaration_part
    (20) subroutine_declaration_part -> . procedure_declaration subroutine_declaration_part
    (21) subroutine_declaration_part -> . function_declaration subroutine_declaration_part
    (22) subroutine_declaration_part -> .
    (23) procedure_declaration -> . PROCEDURE ID LPARENT param_section RPARENT SEMICOLON
    (24) function_declaration -> . FUNCTION ID LPARENT param_section RPARENT TWOPOINTS types SEMICOLON

    BEGIN           reduce using rule 22 (subroutine_declaration_part -> .)
    $end            reduce using rule 22 (subroutine_declaration_part -> .)
    PROCEDURE       shift and go to state 15
    FUNCTION        shift and go to state 16

    procedure_declaration          shift and go to state 13
    subroutine_declaration_part    shift and go to state 23
    function_declaration           shift and go to state 14

state 14

    (21) subroutine_declaration_part -> function_declaration . subroutine_declaration_part
    (20) subroutine_declaration_part -> . procedure_declaration subroutine_declaration_part
    (21) subroutine_declaration_part -> . function_declaration subroutine_declaration_part
    (22) subroutine_declaration_part -> .
    (23) procedure_declaration -> . PROCEDURE ID LPARENT param_section RPARENT SEMICOLON
    (24) function_declaration -> . FUNCTION ID LPARENT param_section RPARENT TWOPOINTS types SEMICOLON

    BEGIN           reduce using rule 22 (subroutine_declaration_part -> .)
    $end            reduce using rule 22 (subroutine_declaration_part -> .)
    PROCEDURE       shift and go to state 15
    FUNCTION        shift and go to state 16

    function_declaration           shift and go to state 14
    subroutine_declaration_part    shift and go to state 24
    procedure_declaration          shift and go to state 13

state 15

    (23) procedure_declaration -> PROCEDURE . ID LPARENT param_section RPARENT SEMICOLON

    ID              shift and go to state 25


state 16

    (24) function_declaration -> FUNCTION . ID LPARENT param_section RPARENT TWOPOINTS types SEMICOLON

    ID              shift and go to state 26


state 17

    (8) var_declaration_part -> VAR var_declaration .

    PROCEDURE       reduce using rule 8 (var_declaration_part -> VAR var_declaration .)
    FUNCTION        reduce using rule 8 (var_declaration_part -> VAR var_declaration .)
    BEGIN           reduce using rule 8 (var_declaration_part -> VAR var_declaration .)
    $end            reduce using rule 8 (var_declaration_part -> VAR var_declaration .)


state 18

    (10) var_declaration -> identifier_list . TWOPOINTS types SEMICOLON var_declaration
    (11) var_declaration -> identifier_list . TWOPOINTS types SEMICOLON

    TWOPOINTS       shift and go to state 27


state 19

    (18) identifier_list -> ID .
    (19) identifier_list -> ID . COMMA identifier_list

    TWOPOINTS       reduce using rule 18 (identifier_list -> ID .)
    COMMA           shift and go to state 28


state 20

    (6) const_definition -> ID EQUALS . types SEMICOLON const_definition
    (7) const_definition -> ID EQUALS . types SEMICOLON
    (12) types -> . INTEGER
    (13) types -> . REAL
    (14) types -> . STRING
    (15) types -> . BOOLEAN
    (16) types -> . CHAR
    (17) types -> . ID

    INTEGER         shift and go to state 31
    REAL            shift and go to state 32
    STRING          shift and go to state 33
    BOOLEAN         shift and go to state 34
    CHAR            shift and go to state 35
    ID              shift and go to state 29

    types                          shift and go to state 30

state 21

    (3) block -> const_declaration_part var_declaration_part subroutine_declaration_part compound_statement_score .

    $end            reduce using rule 3 (block -> const_declaration_part var_declaration_part subroutine_declaration_part compound_statement_score .)


state 22

    (27) compound_statement_score -> BEGIN . statement END SCORE
    (30) statement -> . assign_statement statement
    (31) statement -> . procedure_call statement
    (32) statement -> . if_statement statement
    (33) statement -> . case_statement statement
    (34) statement -> . while_statement statement
    (35) statement -> . repeat_statement statement
    (36) statement -> . for_statement statement
    (37) statement -> . compound_statement_semicolon statement
    (38) statement -> .
    (39) assign_statement -> . ID ASSIGNMENT expr SEMICOLON
    (40) procedure_call -> . ID LPARENT expr_list RPARENT SEMICOLON
    (41) if_statement -> . if1
    (42) if_statement -> . if2
    (43) if_statement -> .
    (51) case_statement -> . CASE expr OF case END SEMICOLON
    (52) case_statement -> . case
    (56) while_statement -> . WHILE expr DO statement
    (57) repeat_statement -> . REPEAT statement UNTIL expr SEMICOLON
    (58) repeat_statement -> . statement
    (59) for_statement -> . FOR ID ASSIGNMENT expr TO expr DO
    (60) for_statement -> . statement
    (29) compound_statement_semicolon -> . BEGIN statement END SEMICOLON
    (44) if1 -> . IF expr_list THEN if1
    (45) if1 -> . IF expr_list THEN if2
    (46) if1 -> . ELSE if1
    (47) if1 -> .
    (48) if2 -> . IF expr_list THEN if2
    (49) if2 -> . ELSE if2
    (50) if2 -> .
    (53) case -> . INTEGER TWOPOINTS statement
    (54) case -> . REAL TWOPOINTS statement
    (55) case -> . ID TWOPOINTS statement

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! reduce/reduce conflict for CASE resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REPEAT resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for FOR resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for BEGIN resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for IF resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for INTEGER resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REAL resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for END resolved using rule 38 (statement -> .)
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! reduce/reduce conflict for INTEGER resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REAL resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for END resolved using rule 38 (statement -> .)
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! reduce/reduce conflict for INTEGER resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REAL resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for END resolved using rule 38 (statement -> .)
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for REAL resolved as shift
    END             reduce using rule 38 (statement -> .)
    ID              shift and go to state 46
    CASE            shift and go to state 49
    WHILE           shift and go to state 51
    REPEAT          shift and go to state 52
    FOR             shift and go to state 53
    BEGIN           shift and go to state 36
    IF              shift and go to state 54
    ELSE            shift and go to state 55
    INTEGER         shift and go to state 56
    REAL            shift and go to state 57

  ! ID              [ reduce using rule 38 (statement -> .) ]
  ! CASE            [ reduce using rule 38 (statement -> .) ]
  ! WHILE           [ reduce using rule 38 (statement -> .) ]
  ! REPEAT          [ reduce using rule 38 (statement -> .) ]
  ! FOR             [ reduce using rule 38 (statement -> .) ]
  ! BEGIN           [ reduce using rule 38 (statement -> .) ]
  ! IF              [ reduce using rule 38 (statement -> .) ]
  ! ELSE            [ reduce using rule 38 (statement -> .) ]
  ! INTEGER         [ reduce using rule 38 (statement -> .) ]
  ! REAL            [ reduce using rule 38 (statement -> .) ]
  ! ID              [ reduce using rule 43 (if_statement -> .) ]
  ! CASE            [ reduce using rule 43 (if_statement -> .) ]
  ! WHILE           [ reduce using rule 43 (if_statement -> .) ]
  ! REPEAT          [ reduce using rule 43 (if_statement -> .) ]
  ! FOR             [ reduce using rule 43 (if_statement -> .) ]
  ! BEGIN           [ reduce using rule 43 (if_statement -> .) ]
  ! IF              [ reduce using rule 43 (if_statement -> .) ]
  ! ELSE            [ reduce using rule 43 (if_statement -> .) ]
  ! INTEGER         [ reduce using rule 43 (if_statement -> .) ]
  ! REAL            [ reduce using rule 43 (if_statement -> .) ]
  ! END             [ reduce using rule 43 (if_statement -> .) ]
  ! ID              [ reduce using rule 47 (if1 -> .) ]
  ! CASE            [ reduce using rule 47 (if1 -> .) ]
  ! WHILE           [ reduce using rule 47 (if1 -> .) ]
  ! REPEAT          [ reduce using rule 47 (if1 -> .) ]
  ! FOR             [ reduce using rule 47 (if1 -> .) ]
  ! BEGIN           [ reduce using rule 47 (if1 -> .) ]
  ! IF              [ reduce using rule 47 (if1 -> .) ]
  ! ELSE            [ reduce using rule 47 (if1 -> .) ]
  ! INTEGER         [ reduce using rule 47 (if1 -> .) ]
  ! REAL            [ reduce using rule 47 (if1 -> .) ]
  ! END             [ reduce using rule 47 (if1 -> .) ]
  ! ID              [ reduce using rule 50 (if2 -> .) ]
  ! CASE            [ reduce using rule 50 (if2 -> .) ]
  ! WHILE           [ reduce using rule 50 (if2 -> .) ]
  ! REPEAT          [ reduce using rule 50 (if2 -> .) ]
  ! FOR             [ reduce using rule 50 (if2 -> .) ]
  ! BEGIN           [ reduce using rule 50 (if2 -> .) ]
  ! IF              [ reduce using rule 50 (if2 -> .) ]
  ! ELSE            [ reduce using rule 50 (if2 -> .) ]
  ! INTEGER         [ reduce using rule 50 (if2 -> .) ]
  ! REAL            [ reduce using rule 50 (if2 -> .) ]
  ! END             [ reduce using rule 50 (if2 -> .) ]

    statement                      shift and go to state 37
    assign_statement               shift and go to state 38
    procedure_call                 shift and go to state 39
    if_statement                   shift and go to state 40
    case_statement                 shift and go to state 41
    while_statement                shift and go to state 42
    repeat_statement               shift and go to state 43
    for_statement                  shift and go to state 44
    compound_statement_semicolon   shift and go to state 45
    if1                            shift and go to state 47
    if2                            shift and go to state 48
    case                           shift and go to state 50

state 23

    (20) subroutine_declaration_part -> procedure_declaration subroutine_declaration_part .

    BEGIN           reduce using rule 20 (subroutine_declaration_part -> procedure_declaration subroutine_declaration_part .)
    $end            reduce using rule 20 (subroutine_declaration_part -> procedure_declaration subroutine_declaration_part .)


state 24

    (21) subroutine_declaration_part -> function_declaration subroutine_declaration_part .

    BEGIN           reduce using rule 21 (subroutine_declaration_part -> function_declaration subroutine_declaration_part .)
    $end            reduce using rule 21 (subroutine_declaration_part -> function_declaration subroutine_declaration_part .)


state 25

    (23) procedure_declaration -> PROCEDURE ID . LPARENT param_section RPARENT SEMICOLON

    LPARENT         shift and go to state 58


state 26

    (24) function_declaration -> FUNCTION ID . LPARENT param_section RPARENT TWOPOINTS types SEMICOLON

    LPARENT         shift and go to state 59


state 27

    (10) var_declaration -> identifier_list TWOPOINTS . types SEMICOLON var_declaration
    (11) var_declaration -> identifier_list TWOPOINTS . types SEMICOLON
    (12) types -> . INTEGER
    (13) types -> . REAL
    (14) types -> . STRING
    (15) types -> . BOOLEAN
    (16) types -> . CHAR
    (17) types -> . ID

    INTEGER         shift and go to state 31
    REAL            shift and go to state 32
    STRING          shift and go to state 33
    BOOLEAN         shift and go to state 34
    CHAR            shift and go to state 35
    ID              shift and go to state 29

    types                          shift and go to state 60

state 28

    (19) identifier_list -> ID COMMA . identifier_list
    (18) identifier_list -> . ID
    (19) identifier_list -> . ID COMMA identifier_list

    ID              shift and go to state 19

    identifier_list                shift and go to state 61

state 29

    (17) types -> ID .

    SEMICOLON       reduce using rule 17 (types -> ID .)


state 30

    (6) const_definition -> ID EQUALS types . SEMICOLON const_definition
    (7) const_definition -> ID EQUALS types . SEMICOLON

    SEMICOLON       shift and go to state 62


state 31

    (12) types -> INTEGER .

    SEMICOLON       reduce using rule 12 (types -> INTEGER .)


state 32

    (13) types -> REAL .

    SEMICOLON       reduce using rule 13 (types -> REAL .)


state 33

    (14) types -> STRING .

    SEMICOLON       reduce using rule 14 (types -> STRING .)


state 34

    (15) types -> BOOLEAN .

    SEMICOLON       reduce using rule 15 (types -> BOOLEAN .)


state 35

    (16) types -> CHAR .

    SEMICOLON       reduce using rule 16 (types -> CHAR .)


state 36

    (29) compound_statement_semicolon -> BEGIN . statement END SEMICOLON
    (30) statement -> . assign_statement statement
    (31) statement -> . procedure_call statement
    (32) statement -> . if_statement statement
    (33) statement -> . case_statement statement
    (34) statement -> . while_statement statement
    (35) statement -> . repeat_statement statement
    (36) statement -> . for_statement statement
    (37) statement -> . compound_statement_semicolon statement
    (38) statement -> .
    (39) assign_statement -> . ID ASSIGNMENT expr SEMICOLON
    (40) procedure_call -> . ID LPARENT expr_list RPARENT SEMICOLON
    (41) if_statement -> . if1
    (42) if_statement -> . if2
    (43) if_statement -> .
    (51) case_statement -> . CASE expr OF case END SEMICOLON
    (52) case_statement -> . case
    (56) while_statement -> . WHILE expr DO statement
    (57) repeat_statement -> . REPEAT statement UNTIL expr SEMICOLON
    (58) repeat_statement -> . statement
    (59) for_statement -> . FOR ID ASSIGNMENT expr TO expr DO
    (60) for_statement -> . statement
    (29) compound_statement_semicolon -> . BEGIN statement END SEMICOLON
    (44) if1 -> . IF expr_list THEN if1
    (45) if1 -> . IF expr_list THEN if2
    (46) if1 -> . ELSE if1
    (47) if1 -> .
    (48) if2 -> . IF expr_list THEN if2
    (49) if2 -> . ELSE if2
    (50) if2 -> .
    (53) case -> . INTEGER TWOPOINTS statement
    (54) case -> . REAL TWOPOINTS statement
    (55) case -> . ID TWOPOINTS statement

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! reduce/reduce conflict for CASE resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REPEAT resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for FOR resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for BEGIN resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for IF resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for INTEGER resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REAL resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for END resolved using rule 38 (statement -> .)
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! reduce/reduce conflict for INTEGER resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REAL resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for END resolved using rule 38 (statement -> .)
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! reduce/reduce conflict for INTEGER resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REAL resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for END resolved using rule 38 (statement -> .)
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for REAL resolved as shift
    END             reduce using rule 38 (statement -> .)
    ID              shift and go to state 46
    CASE            shift and go to state 49
    WHILE           shift and go to state 51
    REPEAT          shift and go to state 52
    FOR             shift and go to state 53
    BEGIN           shift and go to state 36
    IF              shift and go to state 54
    ELSE            shift and go to state 55
    INTEGER         shift and go to state 56
    REAL            shift and go to state 57

  ! ID              [ reduce using rule 38 (statement -> .) ]
  ! CASE            [ reduce using rule 38 (statement -> .) ]
  ! WHILE           [ reduce using rule 38 (statement -> .) ]
  ! REPEAT          [ reduce using rule 38 (statement -> .) ]
  ! FOR             [ reduce using rule 38 (statement -> .) ]
  ! BEGIN           [ reduce using rule 38 (statement -> .) ]
  ! IF              [ reduce using rule 38 (statement -> .) ]
  ! ELSE            [ reduce using rule 38 (statement -> .) ]
  ! INTEGER         [ reduce using rule 38 (statement -> .) ]
  ! REAL            [ reduce using rule 38 (statement -> .) ]
  ! ID              [ reduce using rule 43 (if_statement -> .) ]
  ! CASE            [ reduce using rule 43 (if_statement -> .) ]
  ! WHILE           [ reduce using rule 43 (if_statement -> .) ]
  ! REPEAT          [ reduce using rule 43 (if_statement -> .) ]
  ! FOR             [ reduce using rule 43 (if_statement -> .) ]
  ! BEGIN           [ reduce using rule 43 (if_statement -> .) ]
  ! IF              [ reduce using rule 43 (if_statement -> .) ]
  ! ELSE            [ reduce using rule 43 (if_statement -> .) ]
  ! INTEGER         [ reduce using rule 43 (if_statement -> .) ]
  ! REAL            [ reduce using rule 43 (if_statement -> .) ]
  ! END             [ reduce using rule 43 (if_statement -> .) ]
  ! ID              [ reduce using rule 47 (if1 -> .) ]
  ! CASE            [ reduce using rule 47 (if1 -> .) ]
  ! WHILE           [ reduce using rule 47 (if1 -> .) ]
  ! REPEAT          [ reduce using rule 47 (if1 -> .) ]
  ! FOR             [ reduce using rule 47 (if1 -> .) ]
  ! BEGIN           [ reduce using rule 47 (if1 -> .) ]
  ! IF              [ reduce using rule 47 (if1 -> .) ]
  ! ELSE            [ reduce using rule 47 (if1 -> .) ]
  ! INTEGER         [ reduce using rule 47 (if1 -> .) ]
  ! REAL            [ reduce using rule 47 (if1 -> .) ]
  ! END             [ reduce using rule 47 (if1 -> .) ]
  ! ID              [ reduce using rule 50 (if2 -> .) ]
  ! CASE            [ reduce using rule 50 (if2 -> .) ]
  ! WHILE           [ reduce using rule 50 (if2 -> .) ]
  ! REPEAT          [ reduce using rule 50 (if2 -> .) ]
  ! FOR             [ reduce using rule 50 (if2 -> .) ]
  ! BEGIN           [ reduce using rule 50 (if2 -> .) ]
  ! IF              [ reduce using rule 50 (if2 -> .) ]
  ! ELSE            [ reduce using rule 50 (if2 -> .) ]
  ! INTEGER         [ reduce using rule 50 (if2 -> .) ]
  ! REAL            [ reduce using rule 50 (if2 -> .) ]
  ! END             [ reduce using rule 50 (if2 -> .) ]

    statement                      shift and go to state 63
    assign_statement               shift and go to state 38
    procedure_call                 shift and go to state 39
    if_statement                   shift and go to state 40
    case_statement                 shift and go to state 41
    while_statement                shift and go to state 42
    repeat_statement               shift and go to state 43
    for_statement                  shift and go to state 44
    compound_statement_semicolon   shift and go to state 45
    if1                            shift and go to state 47
    if2                            shift and go to state 48
    case                           shift and go to state 50

state 37

    (27) compound_statement_score -> BEGIN statement . END SCORE
    (58) repeat_statement -> statement .
    (60) for_statement -> statement .

  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for END resolved as shift
  ! reduce/reduce conflict for ID resolved using rule 58 (repeat_statement -> statement .)
  ! reduce/reduce conflict for CASE resolved using rule 58 (repeat_statement -> statement .)
  ! reduce/reduce conflict for WHILE resolved using rule 58 (repeat_statement -> statement .)
  ! reduce/reduce conflict for REPEAT resolved using rule 58 (repeat_statement -> statement .)
  ! reduce/reduce conflict for FOR resolved using rule 58 (repeat_statement -> statement .)
  ! reduce/reduce conflict for BEGIN resolved using rule 58 (repeat_statement -> statement .)
  ! reduce/reduce conflict for IF resolved using rule 58 (repeat_statement -> statement .)
  ! reduce/reduce conflict for ELSE resolved using rule 58 (repeat_statement -> statement .)
  ! reduce/reduce conflict for INTEGER resolved using rule 58 (repeat_statement -> statement .)
  ! reduce/reduce conflict for REAL resolved using rule 58 (repeat_statement -> statement .)
    END             shift and go to state 64
    ID              reduce using rule 58 (repeat_statement -> statement .)
    CASE            reduce using rule 58 (repeat_statement -> statement .)
    WHILE           reduce using rule 58 (repeat_statement -> statement .)
    REPEAT          reduce using rule 58 (repeat_statement -> statement .)
    FOR             reduce using rule 58 (repeat_statement -> statement .)
    BEGIN           reduce using rule 58 (repeat_statement -> statement .)
    IF              reduce using rule 58 (repeat_statement -> statement .)
    ELSE            reduce using rule 58 (repeat_statement -> statement .)
    INTEGER         reduce using rule 58 (repeat_statement -> statement .)
    REAL            reduce using rule 58 (repeat_statement -> statement .)

  ! END             [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! END             [ reduce using rule 60 (for_statement -> statement .) ]
  ! ID              [ reduce using rule 60 (for_statement -> statement .) ]
  ! CASE            [ reduce using rule 60 (for_statement -> statement .) ]
  ! WHILE           [ reduce using rule 60 (for_statement -> statement .) ]
  ! REPEAT          [ reduce using rule 60 (for_statement -> statement .) ]
  ! FOR             [ reduce using rule 60 (for_statement -> statement .) ]
  ! BEGIN           [ reduce using rule 60 (for_statement -> statement .) ]
  ! IF              [ reduce using rule 60 (for_statement -> statement .) ]
  ! ELSE            [ reduce using rule 60 (for_statement -> statement .) ]
  ! INTEGER         [ reduce using rule 60 (for_statement -> statement .) ]
  ! REAL            [ reduce using rule 60 (for_statement -> statement .) ]


state 38

    (30) statement -> assign_statement . statement
    (30) statement -> . assign_statement statement
    (31) statement -> . procedure_call statement
    (32) statement -> . if_statement statement
    (33) statement -> . case_statement statement
    (34) statement -> . while_statement statement
    (35) statement -> . repeat_statement statement
    (36) statement -> . for_statement statement
    (37) statement -> . compound_statement_semicolon statement
    (38) statement -> .
    (39) assign_statement -> . ID ASSIGNMENT expr SEMICOLON
    (40) procedure_call -> . ID LPARENT expr_list RPARENT SEMICOLON
    (41) if_statement -> . if1
    (42) if_statement -> . if2
    (43) if_statement -> .
    (51) case_statement -> . CASE expr OF case END SEMICOLON
    (52) case_statement -> . case
    (56) while_statement -> . WHILE expr DO statement
    (57) repeat_statement -> . REPEAT statement UNTIL expr SEMICOLON
    (58) repeat_statement -> . statement
    (59) for_statement -> . FOR ID ASSIGNMENT expr TO expr DO
    (60) for_statement -> . statement
    (29) compound_statement_semicolon -> . BEGIN statement END SEMICOLON
    (44) if1 -> . IF expr_list THEN if1
    (45) if1 -> . IF expr_list THEN if2
    (46) if1 -> . ELSE if1
    (47) if1 -> .
    (48) if2 -> . IF expr_list THEN if2
    (49) if2 -> . ELSE if2
    (50) if2 -> .
    (53) case -> . INTEGER TWOPOINTS statement
    (54) case -> . REAL TWOPOINTS statement
    (55) case -> . ID TWOPOINTS statement

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! reduce/reduce conflict for CASE resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REPEAT resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for FOR resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for BEGIN resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for IF resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for INTEGER resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REAL resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for END resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for UNTIL resolved using rule 38 (statement -> .)
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! reduce/reduce conflict for INTEGER resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REAL resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for END resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for UNTIL resolved using rule 38 (statement -> .)
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! reduce/reduce conflict for INTEGER resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REAL resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for END resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for UNTIL resolved using rule 38 (statement -> .)
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for REAL resolved as shift
    END             reduce using rule 38 (statement -> .)
    UNTIL           reduce using rule 38 (statement -> .)
    ID              shift and go to state 46
    CASE            shift and go to state 49
    WHILE           shift and go to state 51
    REPEAT          shift and go to state 52
    FOR             shift and go to state 53
    BEGIN           shift and go to state 36
    IF              shift and go to state 54
    ELSE            shift and go to state 55
    INTEGER         shift and go to state 56
    REAL            shift and go to state 57

  ! ID              [ reduce using rule 38 (statement -> .) ]
  ! CASE            [ reduce using rule 38 (statement -> .) ]
  ! WHILE           [ reduce using rule 38 (statement -> .) ]
  ! REPEAT          [ reduce using rule 38 (statement -> .) ]
  ! FOR             [ reduce using rule 38 (statement -> .) ]
  ! BEGIN           [ reduce using rule 38 (statement -> .) ]
  ! IF              [ reduce using rule 38 (statement -> .) ]
  ! ELSE            [ reduce using rule 38 (statement -> .) ]
  ! INTEGER         [ reduce using rule 38 (statement -> .) ]
  ! REAL            [ reduce using rule 38 (statement -> .) ]
  ! ID              [ reduce using rule 43 (if_statement -> .) ]
  ! CASE            [ reduce using rule 43 (if_statement -> .) ]
  ! WHILE           [ reduce using rule 43 (if_statement -> .) ]
  ! REPEAT          [ reduce using rule 43 (if_statement -> .) ]
  ! FOR             [ reduce using rule 43 (if_statement -> .) ]
  ! BEGIN           [ reduce using rule 43 (if_statement -> .) ]
  ! IF              [ reduce using rule 43 (if_statement -> .) ]
  ! ELSE            [ reduce using rule 43 (if_statement -> .) ]
  ! INTEGER         [ reduce using rule 43 (if_statement -> .) ]
  ! REAL            [ reduce using rule 43 (if_statement -> .) ]
  ! END             [ reduce using rule 43 (if_statement -> .) ]
  ! UNTIL           [ reduce using rule 43 (if_statement -> .) ]
  ! ID              [ reduce using rule 47 (if1 -> .) ]
  ! CASE            [ reduce using rule 47 (if1 -> .) ]
  ! WHILE           [ reduce using rule 47 (if1 -> .) ]
  ! REPEAT          [ reduce using rule 47 (if1 -> .) ]
  ! FOR             [ reduce using rule 47 (if1 -> .) ]
  ! BEGIN           [ reduce using rule 47 (if1 -> .) ]
  ! IF              [ reduce using rule 47 (if1 -> .) ]
  ! ELSE            [ reduce using rule 47 (if1 -> .) ]
  ! INTEGER         [ reduce using rule 47 (if1 -> .) ]
  ! REAL            [ reduce using rule 47 (if1 -> .) ]
  ! END             [ reduce using rule 47 (if1 -> .) ]
  ! UNTIL           [ reduce using rule 47 (if1 -> .) ]
  ! ID              [ reduce using rule 50 (if2 -> .) ]
  ! CASE            [ reduce using rule 50 (if2 -> .) ]
  ! WHILE           [ reduce using rule 50 (if2 -> .) ]
  ! REPEAT          [ reduce using rule 50 (if2 -> .) ]
  ! FOR             [ reduce using rule 50 (if2 -> .) ]
  ! BEGIN           [ reduce using rule 50 (if2 -> .) ]
  ! IF              [ reduce using rule 50 (if2 -> .) ]
  ! ELSE            [ reduce using rule 50 (if2 -> .) ]
  ! INTEGER         [ reduce using rule 50 (if2 -> .) ]
  ! REAL            [ reduce using rule 50 (if2 -> .) ]
  ! END             [ reduce using rule 50 (if2 -> .) ]
  ! UNTIL           [ reduce using rule 50 (if2 -> .) ]

    assign_statement               shift and go to state 38
    statement                      shift and go to state 65
    procedure_call                 shift and go to state 39
    if_statement                   shift and go to state 40
    case_statement                 shift and go to state 41
    while_statement                shift and go to state 42
    repeat_statement               shift and go to state 43
    for_statement                  shift and go to state 44
    compound_statement_semicolon   shift and go to state 45
    if1                            shift and go to state 47
    if2                            shift and go to state 48
    case                           shift and go to state 50

state 39

    (31) statement -> procedure_call . statement
    (30) statement -> . assign_statement statement
    (31) statement -> . procedure_call statement
    (32) statement -> . if_statement statement
    (33) statement -> . case_statement statement
    (34) statement -> . while_statement statement
    (35) statement -> . repeat_statement statement
    (36) statement -> . for_statement statement
    (37) statement -> . compound_statement_semicolon statement
    (38) statement -> .
    (39) assign_statement -> . ID ASSIGNMENT expr SEMICOLON
    (40) procedure_call -> . ID LPARENT expr_list RPARENT SEMICOLON
    (41) if_statement -> . if1
    (42) if_statement -> . if2
    (43) if_statement -> .
    (51) case_statement -> . CASE expr OF case END SEMICOLON
    (52) case_statement -> . case
    (56) while_statement -> . WHILE expr DO statement
    (57) repeat_statement -> . REPEAT statement UNTIL expr SEMICOLON
    (58) repeat_statement -> . statement
    (59) for_statement -> . FOR ID ASSIGNMENT expr TO expr DO
    (60) for_statement -> . statement
    (29) compound_statement_semicolon -> . BEGIN statement END SEMICOLON
    (44) if1 -> . IF expr_list THEN if1
    (45) if1 -> . IF expr_list THEN if2
    (46) if1 -> . ELSE if1
    (47) if1 -> .
    (48) if2 -> . IF expr_list THEN if2
    (49) if2 -> . ELSE if2
    (50) if2 -> .
    (53) case -> . INTEGER TWOPOINTS statement
    (54) case -> . REAL TWOPOINTS statement
    (55) case -> . ID TWOPOINTS statement

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! reduce/reduce conflict for CASE resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REPEAT resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for FOR resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for BEGIN resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for IF resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for INTEGER resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REAL resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for END resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for UNTIL resolved using rule 38 (statement -> .)
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! reduce/reduce conflict for INTEGER resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REAL resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for END resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for UNTIL resolved using rule 38 (statement -> .)
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! reduce/reduce conflict for INTEGER resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REAL resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for END resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for UNTIL resolved using rule 38 (statement -> .)
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for REAL resolved as shift
    END             reduce using rule 38 (statement -> .)
    UNTIL           reduce using rule 38 (statement -> .)
    ID              shift and go to state 46
    CASE            shift and go to state 49
    WHILE           shift and go to state 51
    REPEAT          shift and go to state 52
    FOR             shift and go to state 53
    BEGIN           shift and go to state 36
    IF              shift and go to state 54
    ELSE            shift and go to state 55
    INTEGER         shift and go to state 56
    REAL            shift and go to state 57

  ! ID              [ reduce using rule 38 (statement -> .) ]
  ! CASE            [ reduce using rule 38 (statement -> .) ]
  ! WHILE           [ reduce using rule 38 (statement -> .) ]
  ! REPEAT          [ reduce using rule 38 (statement -> .) ]
  ! FOR             [ reduce using rule 38 (statement -> .) ]
  ! BEGIN           [ reduce using rule 38 (statement -> .) ]
  ! IF              [ reduce using rule 38 (statement -> .) ]
  ! ELSE            [ reduce using rule 38 (statement -> .) ]
  ! INTEGER         [ reduce using rule 38 (statement -> .) ]
  ! REAL            [ reduce using rule 38 (statement -> .) ]
  ! ID              [ reduce using rule 43 (if_statement -> .) ]
  ! CASE            [ reduce using rule 43 (if_statement -> .) ]
  ! WHILE           [ reduce using rule 43 (if_statement -> .) ]
  ! REPEAT          [ reduce using rule 43 (if_statement -> .) ]
  ! FOR             [ reduce using rule 43 (if_statement -> .) ]
  ! BEGIN           [ reduce using rule 43 (if_statement -> .) ]
  ! IF              [ reduce using rule 43 (if_statement -> .) ]
  ! ELSE            [ reduce using rule 43 (if_statement -> .) ]
  ! INTEGER         [ reduce using rule 43 (if_statement -> .) ]
  ! REAL            [ reduce using rule 43 (if_statement -> .) ]
  ! END             [ reduce using rule 43 (if_statement -> .) ]
  ! UNTIL           [ reduce using rule 43 (if_statement -> .) ]
  ! ID              [ reduce using rule 47 (if1 -> .) ]
  ! CASE            [ reduce using rule 47 (if1 -> .) ]
  ! WHILE           [ reduce using rule 47 (if1 -> .) ]
  ! REPEAT          [ reduce using rule 47 (if1 -> .) ]
  ! FOR             [ reduce using rule 47 (if1 -> .) ]
  ! BEGIN           [ reduce using rule 47 (if1 -> .) ]
  ! IF              [ reduce using rule 47 (if1 -> .) ]
  ! ELSE            [ reduce using rule 47 (if1 -> .) ]
  ! INTEGER         [ reduce using rule 47 (if1 -> .) ]
  ! REAL            [ reduce using rule 47 (if1 -> .) ]
  ! END             [ reduce using rule 47 (if1 -> .) ]
  ! UNTIL           [ reduce using rule 47 (if1 -> .) ]
  ! ID              [ reduce using rule 50 (if2 -> .) ]
  ! CASE            [ reduce using rule 50 (if2 -> .) ]
  ! WHILE           [ reduce using rule 50 (if2 -> .) ]
  ! REPEAT          [ reduce using rule 50 (if2 -> .) ]
  ! FOR             [ reduce using rule 50 (if2 -> .) ]
  ! BEGIN           [ reduce using rule 50 (if2 -> .) ]
  ! IF              [ reduce using rule 50 (if2 -> .) ]
  ! ELSE            [ reduce using rule 50 (if2 -> .) ]
  ! INTEGER         [ reduce using rule 50 (if2 -> .) ]
  ! REAL            [ reduce using rule 50 (if2 -> .) ]
  ! END             [ reduce using rule 50 (if2 -> .) ]
  ! UNTIL           [ reduce using rule 50 (if2 -> .) ]

    procedure_call                 shift and go to state 39
    statement                      shift and go to state 66
    assign_statement               shift and go to state 38
    if_statement                   shift and go to state 40
    case_statement                 shift and go to state 41
    while_statement                shift and go to state 42
    repeat_statement               shift and go to state 43
    for_statement                  shift and go to state 44
    compound_statement_semicolon   shift and go to state 45
    if1                            shift and go to state 47
    if2                            shift and go to state 48
    case                           shift and go to state 50

state 40

    (32) statement -> if_statement . statement
    (30) statement -> . assign_statement statement
    (31) statement -> . procedure_call statement
    (32) statement -> . if_statement statement
    (33) statement -> . case_statement statement
    (34) statement -> . while_statement statement
    (35) statement -> . repeat_statement statement
    (36) statement -> . for_statement statement
    (37) statement -> . compound_statement_semicolon statement
    (38) statement -> .
    (39) assign_statement -> . ID ASSIGNMENT expr SEMICOLON
    (40) procedure_call -> . ID LPARENT expr_list RPARENT SEMICOLON
    (41) if_statement -> . if1
    (42) if_statement -> . if2
    (43) if_statement -> .
    (51) case_statement -> . CASE expr OF case END SEMICOLON
    (52) case_statement -> . case
    (56) while_statement -> . WHILE expr DO statement
    (57) repeat_statement -> . REPEAT statement UNTIL expr SEMICOLON
    (58) repeat_statement -> . statement
    (59) for_statement -> . FOR ID ASSIGNMENT expr TO expr DO
    (60) for_statement -> . statement
    (29) compound_statement_semicolon -> . BEGIN statement END SEMICOLON
    (44) if1 -> . IF expr_list THEN if1
    (45) if1 -> . IF expr_list THEN if2
    (46) if1 -> . ELSE if1
    (47) if1 -> .
    (48) if2 -> . IF expr_list THEN if2
    (49) if2 -> . ELSE if2
    (50) if2 -> .
    (53) case -> . INTEGER TWOPOINTS statement
    (54) case -> . REAL TWOPOINTS statement
    (55) case -> . ID TWOPOINTS statement

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! reduce/reduce conflict for CASE resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REPEAT resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for FOR resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for BEGIN resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for IF resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for INTEGER resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REAL resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for END resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for UNTIL resolved using rule 38 (statement -> .)
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! reduce/reduce conflict for INTEGER resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REAL resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for END resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for UNTIL resolved using rule 38 (statement -> .)
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! reduce/reduce conflict for INTEGER resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REAL resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for END resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for UNTIL resolved using rule 38 (statement -> .)
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for REAL resolved as shift
    END             reduce using rule 38 (statement -> .)
    UNTIL           reduce using rule 38 (statement -> .)
    ID              shift and go to state 46
    CASE            shift and go to state 49
    WHILE           shift and go to state 51
    REPEAT          shift and go to state 52
    FOR             shift and go to state 53
    BEGIN           shift and go to state 36
    IF              shift and go to state 54
    ELSE            shift and go to state 55
    INTEGER         shift and go to state 56
    REAL            shift and go to state 57

  ! ID              [ reduce using rule 38 (statement -> .) ]
  ! CASE            [ reduce using rule 38 (statement -> .) ]
  ! WHILE           [ reduce using rule 38 (statement -> .) ]
  ! REPEAT          [ reduce using rule 38 (statement -> .) ]
  ! FOR             [ reduce using rule 38 (statement -> .) ]
  ! BEGIN           [ reduce using rule 38 (statement -> .) ]
  ! IF              [ reduce using rule 38 (statement -> .) ]
  ! ELSE            [ reduce using rule 38 (statement -> .) ]
  ! INTEGER         [ reduce using rule 38 (statement -> .) ]
  ! REAL            [ reduce using rule 38 (statement -> .) ]
  ! ID              [ reduce using rule 43 (if_statement -> .) ]
  ! CASE            [ reduce using rule 43 (if_statement -> .) ]
  ! WHILE           [ reduce using rule 43 (if_statement -> .) ]
  ! REPEAT          [ reduce using rule 43 (if_statement -> .) ]
  ! FOR             [ reduce using rule 43 (if_statement -> .) ]
  ! BEGIN           [ reduce using rule 43 (if_statement -> .) ]
  ! IF              [ reduce using rule 43 (if_statement -> .) ]
  ! ELSE            [ reduce using rule 43 (if_statement -> .) ]
  ! INTEGER         [ reduce using rule 43 (if_statement -> .) ]
  ! REAL            [ reduce using rule 43 (if_statement -> .) ]
  ! END             [ reduce using rule 43 (if_statement -> .) ]
  ! UNTIL           [ reduce using rule 43 (if_statement -> .) ]
  ! ID              [ reduce using rule 47 (if1 -> .) ]
  ! CASE            [ reduce using rule 47 (if1 -> .) ]
  ! WHILE           [ reduce using rule 47 (if1 -> .) ]
  ! REPEAT          [ reduce using rule 47 (if1 -> .) ]
  ! FOR             [ reduce using rule 47 (if1 -> .) ]
  ! BEGIN           [ reduce using rule 47 (if1 -> .) ]
  ! IF              [ reduce using rule 47 (if1 -> .) ]
  ! ELSE            [ reduce using rule 47 (if1 -> .) ]
  ! INTEGER         [ reduce using rule 47 (if1 -> .) ]
  ! REAL            [ reduce using rule 47 (if1 -> .) ]
  ! END             [ reduce using rule 47 (if1 -> .) ]
  ! UNTIL           [ reduce using rule 47 (if1 -> .) ]
  ! ID              [ reduce using rule 50 (if2 -> .) ]
  ! CASE            [ reduce using rule 50 (if2 -> .) ]
  ! WHILE           [ reduce using rule 50 (if2 -> .) ]
  ! REPEAT          [ reduce using rule 50 (if2 -> .) ]
  ! FOR             [ reduce using rule 50 (if2 -> .) ]
  ! BEGIN           [ reduce using rule 50 (if2 -> .) ]
  ! IF              [ reduce using rule 50 (if2 -> .) ]
  ! ELSE            [ reduce using rule 50 (if2 -> .) ]
  ! INTEGER         [ reduce using rule 50 (if2 -> .) ]
  ! REAL            [ reduce using rule 50 (if2 -> .) ]
  ! END             [ reduce using rule 50 (if2 -> .) ]
  ! UNTIL           [ reduce using rule 50 (if2 -> .) ]

    if_statement                   shift and go to state 40
    statement                      shift and go to state 67
    assign_statement               shift and go to state 38
    procedure_call                 shift and go to state 39
    case_statement                 shift and go to state 41
    while_statement                shift and go to state 42
    repeat_statement               shift and go to state 43
    for_statement                  shift and go to state 44
    compound_statement_semicolon   shift and go to state 45
    if1                            shift and go to state 47
    if2                            shift and go to state 48
    case                           shift and go to state 50

state 41

    (33) statement -> case_statement . statement
    (30) statement -> . assign_statement statement
    (31) statement -> . procedure_call statement
    (32) statement -> . if_statement statement
    (33) statement -> . case_statement statement
    (34) statement -> . while_statement statement
    (35) statement -> . repeat_statement statement
    (36) statement -> . for_statement statement
    (37) statement -> . compound_statement_semicolon statement
    (38) statement -> .
    (39) assign_statement -> . ID ASSIGNMENT expr SEMICOLON
    (40) procedure_call -> . ID LPARENT expr_list RPARENT SEMICOLON
    (41) if_statement -> . if1
    (42) if_statement -> . if2
    (43) if_statement -> .
    (51) case_statement -> . CASE expr OF case END SEMICOLON
    (52) case_statement -> . case
    (56) while_statement -> . WHILE expr DO statement
    (57) repeat_statement -> . REPEAT statement UNTIL expr SEMICOLON
    (58) repeat_statement -> . statement
    (59) for_statement -> . FOR ID ASSIGNMENT expr TO expr DO
    (60) for_statement -> . statement
    (29) compound_statement_semicolon -> . BEGIN statement END SEMICOLON
    (44) if1 -> . IF expr_list THEN if1
    (45) if1 -> . IF expr_list THEN if2
    (46) if1 -> . ELSE if1
    (47) if1 -> .
    (48) if2 -> . IF expr_list THEN if2
    (49) if2 -> . ELSE if2
    (50) if2 -> .
    (53) case -> . INTEGER TWOPOINTS statement
    (54) case -> . REAL TWOPOINTS statement
    (55) case -> . ID TWOPOINTS statement

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! reduce/reduce conflict for CASE resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REPEAT resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for FOR resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for BEGIN resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for IF resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for INTEGER resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REAL resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for END resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for UNTIL resolved using rule 38 (statement -> .)
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! reduce/reduce conflict for INTEGER resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REAL resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for END resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for UNTIL resolved using rule 38 (statement -> .)
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! reduce/reduce conflict for INTEGER resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REAL resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for END resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for UNTIL resolved using rule 38 (statement -> .)
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for REAL resolved as shift
    END             reduce using rule 38 (statement -> .)
    UNTIL           reduce using rule 38 (statement -> .)
    ID              shift and go to state 46
    CASE            shift and go to state 49
    WHILE           shift and go to state 51
    REPEAT          shift and go to state 52
    FOR             shift and go to state 53
    BEGIN           shift and go to state 36
    IF              shift and go to state 54
    ELSE            shift and go to state 55
    INTEGER         shift and go to state 56
    REAL            shift and go to state 57

  ! ID              [ reduce using rule 38 (statement -> .) ]
  ! CASE            [ reduce using rule 38 (statement -> .) ]
  ! WHILE           [ reduce using rule 38 (statement -> .) ]
  ! REPEAT          [ reduce using rule 38 (statement -> .) ]
  ! FOR             [ reduce using rule 38 (statement -> .) ]
  ! BEGIN           [ reduce using rule 38 (statement -> .) ]
  ! IF              [ reduce using rule 38 (statement -> .) ]
  ! ELSE            [ reduce using rule 38 (statement -> .) ]
  ! INTEGER         [ reduce using rule 38 (statement -> .) ]
  ! REAL            [ reduce using rule 38 (statement -> .) ]
  ! ID              [ reduce using rule 43 (if_statement -> .) ]
  ! CASE            [ reduce using rule 43 (if_statement -> .) ]
  ! WHILE           [ reduce using rule 43 (if_statement -> .) ]
  ! REPEAT          [ reduce using rule 43 (if_statement -> .) ]
  ! FOR             [ reduce using rule 43 (if_statement -> .) ]
  ! BEGIN           [ reduce using rule 43 (if_statement -> .) ]
  ! IF              [ reduce using rule 43 (if_statement -> .) ]
  ! ELSE            [ reduce using rule 43 (if_statement -> .) ]
  ! INTEGER         [ reduce using rule 43 (if_statement -> .) ]
  ! REAL            [ reduce using rule 43 (if_statement -> .) ]
  ! END             [ reduce using rule 43 (if_statement -> .) ]
  ! UNTIL           [ reduce using rule 43 (if_statement -> .) ]
  ! ID              [ reduce using rule 47 (if1 -> .) ]
  ! CASE            [ reduce using rule 47 (if1 -> .) ]
  ! WHILE           [ reduce using rule 47 (if1 -> .) ]
  ! REPEAT          [ reduce using rule 47 (if1 -> .) ]
  ! FOR             [ reduce using rule 47 (if1 -> .) ]
  ! BEGIN           [ reduce using rule 47 (if1 -> .) ]
  ! IF              [ reduce using rule 47 (if1 -> .) ]
  ! ELSE            [ reduce using rule 47 (if1 -> .) ]
  ! INTEGER         [ reduce using rule 47 (if1 -> .) ]
  ! REAL            [ reduce using rule 47 (if1 -> .) ]
  ! END             [ reduce using rule 47 (if1 -> .) ]
  ! UNTIL           [ reduce using rule 47 (if1 -> .) ]
  ! ID              [ reduce using rule 50 (if2 -> .) ]
  ! CASE            [ reduce using rule 50 (if2 -> .) ]
  ! WHILE           [ reduce using rule 50 (if2 -> .) ]
  ! REPEAT          [ reduce using rule 50 (if2 -> .) ]
  ! FOR             [ reduce using rule 50 (if2 -> .) ]
  ! BEGIN           [ reduce using rule 50 (if2 -> .) ]
  ! IF              [ reduce using rule 50 (if2 -> .) ]
  ! ELSE            [ reduce using rule 50 (if2 -> .) ]
  ! INTEGER         [ reduce using rule 50 (if2 -> .) ]
  ! REAL            [ reduce using rule 50 (if2 -> .) ]
  ! END             [ reduce using rule 50 (if2 -> .) ]
  ! UNTIL           [ reduce using rule 50 (if2 -> .) ]

    case_statement                 shift and go to state 41
    statement                      shift and go to state 68
    assign_statement               shift and go to state 38
    procedure_call                 shift and go to state 39
    if_statement                   shift and go to state 40
    while_statement                shift and go to state 42
    repeat_statement               shift and go to state 43
    for_statement                  shift and go to state 44
    compound_statement_semicolon   shift and go to state 45
    if1                            shift and go to state 47
    if2                            shift and go to state 48
    case                           shift and go to state 50

state 42

    (34) statement -> while_statement . statement
    (30) statement -> . assign_statement statement
    (31) statement -> . procedure_call statement
    (32) statement -> . if_statement statement
    (33) statement -> . case_statement statement
    (34) statement -> . while_statement statement
    (35) statement -> . repeat_statement statement
    (36) statement -> . for_statement statement
    (37) statement -> . compound_statement_semicolon statement
    (38) statement -> .
    (39) assign_statement -> . ID ASSIGNMENT expr SEMICOLON
    (40) procedure_call -> . ID LPARENT expr_list RPARENT SEMICOLON
    (41) if_statement -> . if1
    (42) if_statement -> . if2
    (43) if_statement -> .
    (51) case_statement -> . CASE expr OF case END SEMICOLON
    (52) case_statement -> . case
    (56) while_statement -> . WHILE expr DO statement
    (57) repeat_statement -> . REPEAT statement UNTIL expr SEMICOLON
    (58) repeat_statement -> . statement
    (59) for_statement -> . FOR ID ASSIGNMENT expr TO expr DO
    (60) for_statement -> . statement
    (29) compound_statement_semicolon -> . BEGIN statement END SEMICOLON
    (44) if1 -> . IF expr_list THEN if1
    (45) if1 -> . IF expr_list THEN if2
    (46) if1 -> . ELSE if1
    (47) if1 -> .
    (48) if2 -> . IF expr_list THEN if2
    (49) if2 -> . ELSE if2
    (50) if2 -> .
    (53) case -> . INTEGER TWOPOINTS statement
    (54) case -> . REAL TWOPOINTS statement
    (55) case -> . ID TWOPOINTS statement

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! reduce/reduce conflict for CASE resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REPEAT resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for FOR resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for BEGIN resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for IF resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for INTEGER resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REAL resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for END resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for UNTIL resolved using rule 38 (statement -> .)
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! reduce/reduce conflict for INTEGER resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REAL resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for END resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for UNTIL resolved using rule 38 (statement -> .)
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! reduce/reduce conflict for INTEGER resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REAL resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for END resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for UNTIL resolved using rule 38 (statement -> .)
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for REAL resolved as shift
    END             reduce using rule 38 (statement -> .)
    UNTIL           reduce using rule 38 (statement -> .)
    ID              shift and go to state 46
    CASE            shift and go to state 49
    WHILE           shift and go to state 51
    REPEAT          shift and go to state 52
    FOR             shift and go to state 53
    BEGIN           shift and go to state 36
    IF              shift and go to state 54
    ELSE            shift and go to state 55
    INTEGER         shift and go to state 56
    REAL            shift and go to state 57

  ! ID              [ reduce using rule 38 (statement -> .) ]
  ! CASE            [ reduce using rule 38 (statement -> .) ]
  ! WHILE           [ reduce using rule 38 (statement -> .) ]
  ! REPEAT          [ reduce using rule 38 (statement -> .) ]
  ! FOR             [ reduce using rule 38 (statement -> .) ]
  ! BEGIN           [ reduce using rule 38 (statement -> .) ]
  ! IF              [ reduce using rule 38 (statement -> .) ]
  ! ELSE            [ reduce using rule 38 (statement -> .) ]
  ! INTEGER         [ reduce using rule 38 (statement -> .) ]
  ! REAL            [ reduce using rule 38 (statement -> .) ]
  ! ID              [ reduce using rule 43 (if_statement -> .) ]
  ! CASE            [ reduce using rule 43 (if_statement -> .) ]
  ! WHILE           [ reduce using rule 43 (if_statement -> .) ]
  ! REPEAT          [ reduce using rule 43 (if_statement -> .) ]
  ! FOR             [ reduce using rule 43 (if_statement -> .) ]
  ! BEGIN           [ reduce using rule 43 (if_statement -> .) ]
  ! IF              [ reduce using rule 43 (if_statement -> .) ]
  ! ELSE            [ reduce using rule 43 (if_statement -> .) ]
  ! INTEGER         [ reduce using rule 43 (if_statement -> .) ]
  ! REAL            [ reduce using rule 43 (if_statement -> .) ]
  ! END             [ reduce using rule 43 (if_statement -> .) ]
  ! UNTIL           [ reduce using rule 43 (if_statement -> .) ]
  ! ID              [ reduce using rule 47 (if1 -> .) ]
  ! CASE            [ reduce using rule 47 (if1 -> .) ]
  ! WHILE           [ reduce using rule 47 (if1 -> .) ]
  ! REPEAT          [ reduce using rule 47 (if1 -> .) ]
  ! FOR             [ reduce using rule 47 (if1 -> .) ]
  ! BEGIN           [ reduce using rule 47 (if1 -> .) ]
  ! IF              [ reduce using rule 47 (if1 -> .) ]
  ! ELSE            [ reduce using rule 47 (if1 -> .) ]
  ! INTEGER         [ reduce using rule 47 (if1 -> .) ]
  ! REAL            [ reduce using rule 47 (if1 -> .) ]
  ! END             [ reduce using rule 47 (if1 -> .) ]
  ! UNTIL           [ reduce using rule 47 (if1 -> .) ]
  ! ID              [ reduce using rule 50 (if2 -> .) ]
  ! CASE            [ reduce using rule 50 (if2 -> .) ]
  ! WHILE           [ reduce using rule 50 (if2 -> .) ]
  ! REPEAT          [ reduce using rule 50 (if2 -> .) ]
  ! FOR             [ reduce using rule 50 (if2 -> .) ]
  ! BEGIN           [ reduce using rule 50 (if2 -> .) ]
  ! IF              [ reduce using rule 50 (if2 -> .) ]
  ! ELSE            [ reduce using rule 50 (if2 -> .) ]
  ! INTEGER         [ reduce using rule 50 (if2 -> .) ]
  ! REAL            [ reduce using rule 50 (if2 -> .) ]
  ! END             [ reduce using rule 50 (if2 -> .) ]
  ! UNTIL           [ reduce using rule 50 (if2 -> .) ]

    while_statement                shift and go to state 42
    statement                      shift and go to state 69
    assign_statement               shift and go to state 38
    procedure_call                 shift and go to state 39
    if_statement                   shift and go to state 40
    case_statement                 shift and go to state 41
    repeat_statement               shift and go to state 43
    for_statement                  shift and go to state 44
    compound_statement_semicolon   shift and go to state 45
    if1                            shift and go to state 47
    if2                            shift and go to state 48
    case                           shift and go to state 50

state 43

    (35) statement -> repeat_statement . statement
    (30) statement -> . assign_statement statement
    (31) statement -> . procedure_call statement
    (32) statement -> . if_statement statement
    (33) statement -> . case_statement statement
    (34) statement -> . while_statement statement
    (35) statement -> . repeat_statement statement
    (36) statement -> . for_statement statement
    (37) statement -> . compound_statement_semicolon statement
    (38) statement -> .
    (39) assign_statement -> . ID ASSIGNMENT expr SEMICOLON
    (40) procedure_call -> . ID LPARENT expr_list RPARENT SEMICOLON
    (41) if_statement -> . if1
    (42) if_statement -> . if2
    (43) if_statement -> .
    (51) case_statement -> . CASE expr OF case END SEMICOLON
    (52) case_statement -> . case
    (56) while_statement -> . WHILE expr DO statement
    (57) repeat_statement -> . REPEAT statement UNTIL expr SEMICOLON
    (58) repeat_statement -> . statement
    (59) for_statement -> . FOR ID ASSIGNMENT expr TO expr DO
    (60) for_statement -> . statement
    (29) compound_statement_semicolon -> . BEGIN statement END SEMICOLON
    (44) if1 -> . IF expr_list THEN if1
    (45) if1 -> . IF expr_list THEN if2
    (46) if1 -> . ELSE if1
    (47) if1 -> .
    (48) if2 -> . IF expr_list THEN if2
    (49) if2 -> . ELSE if2
    (50) if2 -> .
    (53) case -> . INTEGER TWOPOINTS statement
    (54) case -> . REAL TWOPOINTS statement
    (55) case -> . ID TWOPOINTS statement

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! reduce/reduce conflict for CASE resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REPEAT resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for FOR resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for BEGIN resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for IF resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for INTEGER resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REAL resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for END resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for UNTIL resolved using rule 38 (statement -> .)
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! reduce/reduce conflict for INTEGER resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REAL resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for END resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for UNTIL resolved using rule 38 (statement -> .)
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! reduce/reduce conflict for INTEGER resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REAL resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for END resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for UNTIL resolved using rule 38 (statement -> .)
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for REAL resolved as shift
    END             reduce using rule 38 (statement -> .)
    UNTIL           reduce using rule 38 (statement -> .)
    ID              shift and go to state 46
    CASE            shift and go to state 49
    WHILE           shift and go to state 51
    REPEAT          shift and go to state 52
    FOR             shift and go to state 53
    BEGIN           shift and go to state 36
    IF              shift and go to state 54
    ELSE            shift and go to state 55
    INTEGER         shift and go to state 56
    REAL            shift and go to state 57

  ! ID              [ reduce using rule 38 (statement -> .) ]
  ! CASE            [ reduce using rule 38 (statement -> .) ]
  ! WHILE           [ reduce using rule 38 (statement -> .) ]
  ! REPEAT          [ reduce using rule 38 (statement -> .) ]
  ! FOR             [ reduce using rule 38 (statement -> .) ]
  ! BEGIN           [ reduce using rule 38 (statement -> .) ]
  ! IF              [ reduce using rule 38 (statement -> .) ]
  ! ELSE            [ reduce using rule 38 (statement -> .) ]
  ! INTEGER         [ reduce using rule 38 (statement -> .) ]
  ! REAL            [ reduce using rule 38 (statement -> .) ]
  ! ID              [ reduce using rule 43 (if_statement -> .) ]
  ! CASE            [ reduce using rule 43 (if_statement -> .) ]
  ! WHILE           [ reduce using rule 43 (if_statement -> .) ]
  ! REPEAT          [ reduce using rule 43 (if_statement -> .) ]
  ! FOR             [ reduce using rule 43 (if_statement -> .) ]
  ! BEGIN           [ reduce using rule 43 (if_statement -> .) ]
  ! IF              [ reduce using rule 43 (if_statement -> .) ]
  ! ELSE            [ reduce using rule 43 (if_statement -> .) ]
  ! INTEGER         [ reduce using rule 43 (if_statement -> .) ]
  ! REAL            [ reduce using rule 43 (if_statement -> .) ]
  ! END             [ reduce using rule 43 (if_statement -> .) ]
  ! UNTIL           [ reduce using rule 43 (if_statement -> .) ]
  ! ID              [ reduce using rule 47 (if1 -> .) ]
  ! CASE            [ reduce using rule 47 (if1 -> .) ]
  ! WHILE           [ reduce using rule 47 (if1 -> .) ]
  ! REPEAT          [ reduce using rule 47 (if1 -> .) ]
  ! FOR             [ reduce using rule 47 (if1 -> .) ]
  ! BEGIN           [ reduce using rule 47 (if1 -> .) ]
  ! IF              [ reduce using rule 47 (if1 -> .) ]
  ! ELSE            [ reduce using rule 47 (if1 -> .) ]
  ! INTEGER         [ reduce using rule 47 (if1 -> .) ]
  ! REAL            [ reduce using rule 47 (if1 -> .) ]
  ! END             [ reduce using rule 47 (if1 -> .) ]
  ! UNTIL           [ reduce using rule 47 (if1 -> .) ]
  ! ID              [ reduce using rule 50 (if2 -> .) ]
  ! CASE            [ reduce using rule 50 (if2 -> .) ]
  ! WHILE           [ reduce using rule 50 (if2 -> .) ]
  ! REPEAT          [ reduce using rule 50 (if2 -> .) ]
  ! FOR             [ reduce using rule 50 (if2 -> .) ]
  ! BEGIN           [ reduce using rule 50 (if2 -> .) ]
  ! IF              [ reduce using rule 50 (if2 -> .) ]
  ! ELSE            [ reduce using rule 50 (if2 -> .) ]
  ! INTEGER         [ reduce using rule 50 (if2 -> .) ]
  ! REAL            [ reduce using rule 50 (if2 -> .) ]
  ! END             [ reduce using rule 50 (if2 -> .) ]
  ! UNTIL           [ reduce using rule 50 (if2 -> .) ]

    repeat_statement               shift and go to state 43
    statement                      shift and go to state 70
    assign_statement               shift and go to state 38
    procedure_call                 shift and go to state 39
    if_statement                   shift and go to state 40
    case_statement                 shift and go to state 41
    while_statement                shift and go to state 42
    for_statement                  shift and go to state 44
    compound_statement_semicolon   shift and go to state 45
    if1                            shift and go to state 47
    if2                            shift and go to state 48
    case                           shift and go to state 50

state 44

    (36) statement -> for_statement . statement
    (30) statement -> . assign_statement statement
    (31) statement -> . procedure_call statement
    (32) statement -> . if_statement statement
    (33) statement -> . case_statement statement
    (34) statement -> . while_statement statement
    (35) statement -> . repeat_statement statement
    (36) statement -> . for_statement statement
    (37) statement -> . compound_statement_semicolon statement
    (38) statement -> .
    (39) assign_statement -> . ID ASSIGNMENT expr SEMICOLON
    (40) procedure_call -> . ID LPARENT expr_list RPARENT SEMICOLON
    (41) if_statement -> . if1
    (42) if_statement -> . if2
    (43) if_statement -> .
    (51) case_statement -> . CASE expr OF case END SEMICOLON
    (52) case_statement -> . case
    (56) while_statement -> . WHILE expr DO statement
    (57) repeat_statement -> . REPEAT statement UNTIL expr SEMICOLON
    (58) repeat_statement -> . statement
    (59) for_statement -> . FOR ID ASSIGNMENT expr TO expr DO
    (60) for_statement -> . statement
    (29) compound_statement_semicolon -> . BEGIN statement END SEMICOLON
    (44) if1 -> . IF expr_list THEN if1
    (45) if1 -> . IF expr_list THEN if2
    (46) if1 -> . ELSE if1
    (47) if1 -> .
    (48) if2 -> . IF expr_list THEN if2
    (49) if2 -> . ELSE if2
    (50) if2 -> .
    (53) case -> . INTEGER TWOPOINTS statement
    (54) case -> . REAL TWOPOINTS statement
    (55) case -> . ID TWOPOINTS statement

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! reduce/reduce conflict for CASE resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REPEAT resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for FOR resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for BEGIN resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for IF resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for INTEGER resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REAL resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for END resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for UNTIL resolved using rule 38 (statement -> .)
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! reduce/reduce conflict for INTEGER resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REAL resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for END resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for UNTIL resolved using rule 38 (statement -> .)
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! reduce/reduce conflict for INTEGER resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REAL resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for END resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for UNTIL resolved using rule 38 (statement -> .)
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for REAL resolved as shift
    END             reduce using rule 38 (statement -> .)
    UNTIL           reduce using rule 38 (statement -> .)
    ID              shift and go to state 46
    CASE            shift and go to state 49
    WHILE           shift and go to state 51
    REPEAT          shift and go to state 52
    FOR             shift and go to state 53
    BEGIN           shift and go to state 36
    IF              shift and go to state 54
    ELSE            shift and go to state 55
    INTEGER         shift and go to state 56
    REAL            shift and go to state 57

  ! ID              [ reduce using rule 38 (statement -> .) ]
  ! CASE            [ reduce using rule 38 (statement -> .) ]
  ! WHILE           [ reduce using rule 38 (statement -> .) ]
  ! REPEAT          [ reduce using rule 38 (statement -> .) ]
  ! FOR             [ reduce using rule 38 (statement -> .) ]
  ! BEGIN           [ reduce using rule 38 (statement -> .) ]
  ! IF              [ reduce using rule 38 (statement -> .) ]
  ! ELSE            [ reduce using rule 38 (statement -> .) ]
  ! INTEGER         [ reduce using rule 38 (statement -> .) ]
  ! REAL            [ reduce using rule 38 (statement -> .) ]
  ! ID              [ reduce using rule 43 (if_statement -> .) ]
  ! CASE            [ reduce using rule 43 (if_statement -> .) ]
  ! WHILE           [ reduce using rule 43 (if_statement -> .) ]
  ! REPEAT          [ reduce using rule 43 (if_statement -> .) ]
  ! FOR             [ reduce using rule 43 (if_statement -> .) ]
  ! BEGIN           [ reduce using rule 43 (if_statement -> .) ]
  ! IF              [ reduce using rule 43 (if_statement -> .) ]
  ! ELSE            [ reduce using rule 43 (if_statement -> .) ]
  ! INTEGER         [ reduce using rule 43 (if_statement -> .) ]
  ! REAL            [ reduce using rule 43 (if_statement -> .) ]
  ! END             [ reduce using rule 43 (if_statement -> .) ]
  ! UNTIL           [ reduce using rule 43 (if_statement -> .) ]
  ! ID              [ reduce using rule 47 (if1 -> .) ]
  ! CASE            [ reduce using rule 47 (if1 -> .) ]
  ! WHILE           [ reduce using rule 47 (if1 -> .) ]
  ! REPEAT          [ reduce using rule 47 (if1 -> .) ]
  ! FOR             [ reduce using rule 47 (if1 -> .) ]
  ! BEGIN           [ reduce using rule 47 (if1 -> .) ]
  ! IF              [ reduce using rule 47 (if1 -> .) ]
  ! ELSE            [ reduce using rule 47 (if1 -> .) ]
  ! INTEGER         [ reduce using rule 47 (if1 -> .) ]
  ! REAL            [ reduce using rule 47 (if1 -> .) ]
  ! END             [ reduce using rule 47 (if1 -> .) ]
  ! UNTIL           [ reduce using rule 47 (if1 -> .) ]
  ! ID              [ reduce using rule 50 (if2 -> .) ]
  ! CASE            [ reduce using rule 50 (if2 -> .) ]
  ! WHILE           [ reduce using rule 50 (if2 -> .) ]
  ! REPEAT          [ reduce using rule 50 (if2 -> .) ]
  ! FOR             [ reduce using rule 50 (if2 -> .) ]
  ! BEGIN           [ reduce using rule 50 (if2 -> .) ]
  ! IF              [ reduce using rule 50 (if2 -> .) ]
  ! ELSE            [ reduce using rule 50 (if2 -> .) ]
  ! INTEGER         [ reduce using rule 50 (if2 -> .) ]
  ! REAL            [ reduce using rule 50 (if2 -> .) ]
  ! END             [ reduce using rule 50 (if2 -> .) ]
  ! UNTIL           [ reduce using rule 50 (if2 -> .) ]

    for_statement                  shift and go to state 44
    statement                      shift and go to state 71
    assign_statement               shift and go to state 38
    procedure_call                 shift and go to state 39
    if_statement                   shift and go to state 40
    case_statement                 shift and go to state 41
    while_statement                shift and go to state 42
    repeat_statement               shift and go to state 43
    compound_statement_semicolon   shift and go to state 45
    if1                            shift and go to state 47
    if2                            shift and go to state 48
    case                           shift and go to state 50

state 45

    (37) statement -> compound_statement_semicolon . statement
    (30) statement -> . assign_statement statement
    (31) statement -> . procedure_call statement
    (32) statement -> . if_statement statement
    (33) statement -> . case_statement statement
    (34) statement -> . while_statement statement
    (35) statement -> . repeat_statement statement
    (36) statement -> . for_statement statement
    (37) statement -> . compound_statement_semicolon statement
    (38) statement -> .
    (39) assign_statement -> . ID ASSIGNMENT expr SEMICOLON
    (40) procedure_call -> . ID LPARENT expr_list RPARENT SEMICOLON
    (41) if_statement -> . if1
    (42) if_statement -> . if2
    (43) if_statement -> .
    (51) case_statement -> . CASE expr OF case END SEMICOLON
    (52) case_statement -> . case
    (56) while_statement -> . WHILE expr DO statement
    (57) repeat_statement -> . REPEAT statement UNTIL expr SEMICOLON
    (58) repeat_statement -> . statement
    (59) for_statement -> . FOR ID ASSIGNMENT expr TO expr DO
    (60) for_statement -> . statement
    (29) compound_statement_semicolon -> . BEGIN statement END SEMICOLON
    (44) if1 -> . IF expr_list THEN if1
    (45) if1 -> . IF expr_list THEN if2
    (46) if1 -> . ELSE if1
    (47) if1 -> .
    (48) if2 -> . IF expr_list THEN if2
    (49) if2 -> . ELSE if2
    (50) if2 -> .
    (53) case -> . INTEGER TWOPOINTS statement
    (54) case -> . REAL TWOPOINTS statement
    (55) case -> . ID TWOPOINTS statement

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! reduce/reduce conflict for CASE resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REPEAT resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for FOR resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for BEGIN resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for IF resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for INTEGER resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REAL resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for END resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for UNTIL resolved using rule 38 (statement -> .)
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! reduce/reduce conflict for INTEGER resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REAL resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for END resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for UNTIL resolved using rule 38 (statement -> .)
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! reduce/reduce conflict for INTEGER resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REAL resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for END resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for UNTIL resolved using rule 38 (statement -> .)
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for REAL resolved as shift
    END             reduce using rule 38 (statement -> .)
    UNTIL           reduce using rule 38 (statement -> .)
    ID              shift and go to state 46
    CASE            shift and go to state 49
    WHILE           shift and go to state 51
    REPEAT          shift and go to state 52
    FOR             shift and go to state 53
    BEGIN           shift and go to state 36
    IF              shift and go to state 54
    ELSE            shift and go to state 55
    INTEGER         shift and go to state 56
    REAL            shift and go to state 57

  ! ID              [ reduce using rule 38 (statement -> .) ]
  ! CASE            [ reduce using rule 38 (statement -> .) ]
  ! WHILE           [ reduce using rule 38 (statement -> .) ]
  ! REPEAT          [ reduce using rule 38 (statement -> .) ]
  ! FOR             [ reduce using rule 38 (statement -> .) ]
  ! BEGIN           [ reduce using rule 38 (statement -> .) ]
  ! IF              [ reduce using rule 38 (statement -> .) ]
  ! ELSE            [ reduce using rule 38 (statement -> .) ]
  ! INTEGER         [ reduce using rule 38 (statement -> .) ]
  ! REAL            [ reduce using rule 38 (statement -> .) ]
  ! ID              [ reduce using rule 43 (if_statement -> .) ]
  ! CASE            [ reduce using rule 43 (if_statement -> .) ]
  ! WHILE           [ reduce using rule 43 (if_statement -> .) ]
  ! REPEAT          [ reduce using rule 43 (if_statement -> .) ]
  ! FOR             [ reduce using rule 43 (if_statement -> .) ]
  ! BEGIN           [ reduce using rule 43 (if_statement -> .) ]
  ! IF              [ reduce using rule 43 (if_statement -> .) ]
  ! ELSE            [ reduce using rule 43 (if_statement -> .) ]
  ! INTEGER         [ reduce using rule 43 (if_statement -> .) ]
  ! REAL            [ reduce using rule 43 (if_statement -> .) ]
  ! END             [ reduce using rule 43 (if_statement -> .) ]
  ! UNTIL           [ reduce using rule 43 (if_statement -> .) ]
  ! ID              [ reduce using rule 47 (if1 -> .) ]
  ! CASE            [ reduce using rule 47 (if1 -> .) ]
  ! WHILE           [ reduce using rule 47 (if1 -> .) ]
  ! REPEAT          [ reduce using rule 47 (if1 -> .) ]
  ! FOR             [ reduce using rule 47 (if1 -> .) ]
  ! BEGIN           [ reduce using rule 47 (if1 -> .) ]
  ! IF              [ reduce using rule 47 (if1 -> .) ]
  ! ELSE            [ reduce using rule 47 (if1 -> .) ]
  ! INTEGER         [ reduce using rule 47 (if1 -> .) ]
  ! REAL            [ reduce using rule 47 (if1 -> .) ]
  ! END             [ reduce using rule 47 (if1 -> .) ]
  ! UNTIL           [ reduce using rule 47 (if1 -> .) ]
  ! ID              [ reduce using rule 50 (if2 -> .) ]
  ! CASE            [ reduce using rule 50 (if2 -> .) ]
  ! WHILE           [ reduce using rule 50 (if2 -> .) ]
  ! REPEAT          [ reduce using rule 50 (if2 -> .) ]
  ! FOR             [ reduce using rule 50 (if2 -> .) ]
  ! BEGIN           [ reduce using rule 50 (if2 -> .) ]
  ! IF              [ reduce using rule 50 (if2 -> .) ]
  ! ELSE            [ reduce using rule 50 (if2 -> .) ]
  ! INTEGER         [ reduce using rule 50 (if2 -> .) ]
  ! REAL            [ reduce using rule 50 (if2 -> .) ]
  ! END             [ reduce using rule 50 (if2 -> .) ]
  ! UNTIL           [ reduce using rule 50 (if2 -> .) ]

    compound_statement_semicolon   shift and go to state 45
    statement                      shift and go to state 72
    assign_statement               shift and go to state 38
    procedure_call                 shift and go to state 39
    if_statement                   shift and go to state 40
    case_statement                 shift and go to state 41
    while_statement                shift and go to state 42
    repeat_statement               shift and go to state 43
    for_statement                  shift and go to state 44
    if1                            shift and go to state 47
    if2                            shift and go to state 48
    case                           shift and go to state 50

state 46

    (39) assign_statement -> ID . ASSIGNMENT expr SEMICOLON
    (40) procedure_call -> ID . LPARENT expr_list RPARENT SEMICOLON
    (55) case -> ID . TWOPOINTS statement

    ASSIGNMENT      shift and go to state 73
    LPARENT         shift and go to state 74
    TWOPOINTS       shift and go to state 75


state 47

    (41) if_statement -> if1 .

    ID              reduce using rule 41 (if_statement -> if1 .)
    CASE            reduce using rule 41 (if_statement -> if1 .)
    WHILE           reduce using rule 41 (if_statement -> if1 .)
    REPEAT          reduce using rule 41 (if_statement -> if1 .)
    FOR             reduce using rule 41 (if_statement -> if1 .)
    BEGIN           reduce using rule 41 (if_statement -> if1 .)
    IF              reduce using rule 41 (if_statement -> if1 .)
    ELSE            reduce using rule 41 (if_statement -> if1 .)
    INTEGER         reduce using rule 41 (if_statement -> if1 .)
    REAL            reduce using rule 41 (if_statement -> if1 .)
    END             reduce using rule 41 (if_statement -> if1 .)
    UNTIL           reduce using rule 41 (if_statement -> if1 .)


state 48

    (42) if_statement -> if2 .

    ID              reduce using rule 42 (if_statement -> if2 .)
    CASE            reduce using rule 42 (if_statement -> if2 .)
    WHILE           reduce using rule 42 (if_statement -> if2 .)
    REPEAT          reduce using rule 42 (if_statement -> if2 .)
    FOR             reduce using rule 42 (if_statement -> if2 .)
    BEGIN           reduce using rule 42 (if_statement -> if2 .)
    IF              reduce using rule 42 (if_statement -> if2 .)
    ELSE            reduce using rule 42 (if_statement -> if2 .)
    INTEGER         reduce using rule 42 (if_statement -> if2 .)
    REAL            reduce using rule 42 (if_statement -> if2 .)
    END             reduce using rule 42 (if_statement -> if2 .)
    UNTIL           reduce using rule 42 (if_statement -> if2 .)


state 49

    (51) case_statement -> CASE . expr OF case END SEMICOLON
    (63) expr -> . simple_expr relop_simple_expr
    (72) simple_expr -> . uplus_uminus factor
    (73) simple_expr -> . uplus_uminus factor addop_mulop factor simple_expr
    (74) uplus_uminus -> . UPLUS
    (75) uplus_uminus -> . UMINUS
    (76) uplus_uminus -> .

  ! shift/reduce conflict for UPLUS resolved as shift
  ! shift/reduce conflict for UMINUS resolved as shift
    UPLUS           shift and go to state 79
    UMINUS          shift and go to state 80
    ID              reduce using rule 76 (uplus_uminus -> .)
    INTEGER         reduce using rule 76 (uplus_uminus -> .)
    REAL            reduce using rule 76 (uplus_uminus -> .)
    STRING          reduce using rule 76 (uplus_uminus -> .)
    NOT             reduce using rule 76 (uplus_uminus -> .)
    PLUS            reduce using rule 76 (uplus_uminus -> .)
    MINUS           reduce using rule 76 (uplus_uminus -> .)
    OR              reduce using rule 76 (uplus_uminus -> .)
    TIMES           reduce using rule 76 (uplus_uminus -> .)
    DIVIDE          reduce using rule 76 (uplus_uminus -> .)
    DIV             reduce using rule 76 (uplus_uminus -> .)
    MOD             reduce using rule 76 (uplus_uminus -> .)
    AND             reduce using rule 76 (uplus_uminus -> .)
    EQUALS          reduce using rule 76 (uplus_uminus -> .)
    LTHAN           reduce using rule 76 (uplus_uminus -> .)
    GTHAN           reduce using rule 76 (uplus_uminus -> .)
    DIFFERENT       reduce using rule 76 (uplus_uminus -> .)
    GEQUALS         reduce using rule 76 (uplus_uminus -> .)
    LEQUALS         reduce using rule 76 (uplus_uminus -> .)
    OF              reduce using rule 76 (uplus_uminus -> .)

  ! UPLUS           [ reduce using rule 76 (uplus_uminus -> .) ]
  ! UMINUS          [ reduce using rule 76 (uplus_uminus -> .) ]

    expr                           shift and go to state 76
    simple_expr                    shift and go to state 77
    uplus_uminus                   shift and go to state 78

state 50

    (52) case_statement -> case .

    ID              reduce using rule 52 (case_statement -> case .)
    CASE            reduce using rule 52 (case_statement -> case .)
    WHILE           reduce using rule 52 (case_statement -> case .)
    REPEAT          reduce using rule 52 (case_statement -> case .)
    FOR             reduce using rule 52 (case_statement -> case .)
    BEGIN           reduce using rule 52 (case_statement -> case .)
    IF              reduce using rule 52 (case_statement -> case .)
    ELSE            reduce using rule 52 (case_statement -> case .)
    INTEGER         reduce using rule 52 (case_statement -> case .)
    REAL            reduce using rule 52 (case_statement -> case .)
    END             reduce using rule 52 (case_statement -> case .)
    UNTIL           reduce using rule 52 (case_statement -> case .)


state 51

    (56) while_statement -> WHILE . expr DO statement
    (63) expr -> . simple_expr relop_simple_expr
    (72) simple_expr -> . uplus_uminus factor
    (73) simple_expr -> . uplus_uminus factor addop_mulop factor simple_expr
    (74) uplus_uminus -> . UPLUS
    (75) uplus_uminus -> . UMINUS
    (76) uplus_uminus -> .

  ! shift/reduce conflict for UPLUS resolved as shift
  ! shift/reduce conflict for UMINUS resolved as shift
    UPLUS           shift and go to state 79
    UMINUS          shift and go to state 80
    ID              reduce using rule 76 (uplus_uminus -> .)
    INTEGER         reduce using rule 76 (uplus_uminus -> .)
    REAL            reduce using rule 76 (uplus_uminus -> .)
    STRING          reduce using rule 76 (uplus_uminus -> .)
    NOT             reduce using rule 76 (uplus_uminus -> .)
    PLUS            reduce using rule 76 (uplus_uminus -> .)
    MINUS           reduce using rule 76 (uplus_uminus -> .)
    OR              reduce using rule 76 (uplus_uminus -> .)
    TIMES           reduce using rule 76 (uplus_uminus -> .)
    DIVIDE          reduce using rule 76 (uplus_uminus -> .)
    DIV             reduce using rule 76 (uplus_uminus -> .)
    MOD             reduce using rule 76 (uplus_uminus -> .)
    AND             reduce using rule 76 (uplus_uminus -> .)
    EQUALS          reduce using rule 76 (uplus_uminus -> .)
    LTHAN           reduce using rule 76 (uplus_uminus -> .)
    GTHAN           reduce using rule 76 (uplus_uminus -> .)
    DIFFERENT       reduce using rule 76 (uplus_uminus -> .)
    GEQUALS         reduce using rule 76 (uplus_uminus -> .)
    LEQUALS         reduce using rule 76 (uplus_uminus -> .)
    DO              reduce using rule 76 (uplus_uminus -> .)

  ! UPLUS           [ reduce using rule 76 (uplus_uminus -> .) ]
  ! UMINUS          [ reduce using rule 76 (uplus_uminus -> .) ]

    expr                           shift and go to state 81
    simple_expr                    shift and go to state 77
    uplus_uminus                   shift and go to state 78

state 52

    (57) repeat_statement -> REPEAT . statement UNTIL expr SEMICOLON
    (30) statement -> . assign_statement statement
    (31) statement -> . procedure_call statement
    (32) statement -> . if_statement statement
    (33) statement -> . case_statement statement
    (34) statement -> . while_statement statement
    (35) statement -> . repeat_statement statement
    (36) statement -> . for_statement statement
    (37) statement -> . compound_statement_semicolon statement
    (38) statement -> .
    (39) assign_statement -> . ID ASSIGNMENT expr SEMICOLON
    (40) procedure_call -> . ID LPARENT expr_list RPARENT SEMICOLON
    (41) if_statement -> . if1
    (42) if_statement -> . if2
    (43) if_statement -> .
    (51) case_statement -> . CASE expr OF case END SEMICOLON
    (52) case_statement -> . case
    (56) while_statement -> . WHILE expr DO statement
    (57) repeat_statement -> . REPEAT statement UNTIL expr SEMICOLON
    (58) repeat_statement -> . statement
    (59) for_statement -> . FOR ID ASSIGNMENT expr TO expr DO
    (60) for_statement -> . statement
    (29) compound_statement_semicolon -> . BEGIN statement END SEMICOLON
    (44) if1 -> . IF expr_list THEN if1
    (45) if1 -> . IF expr_list THEN if2
    (46) if1 -> . ELSE if1
    (47) if1 -> .
    (48) if2 -> . IF expr_list THEN if2
    (49) if2 -> . ELSE if2
    (50) if2 -> .
    (53) case -> . INTEGER TWOPOINTS statement
    (54) case -> . REAL TWOPOINTS statement
    (55) case -> . ID TWOPOINTS statement

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! reduce/reduce conflict for CASE resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REPEAT resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for FOR resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for BEGIN resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for IF resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for INTEGER resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REAL resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for UNTIL resolved using rule 38 (statement -> .)
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! reduce/reduce conflict for INTEGER resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REAL resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for UNTIL resolved using rule 38 (statement -> .)
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! reduce/reduce conflict for INTEGER resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REAL resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for UNTIL resolved using rule 38 (statement -> .)
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for REAL resolved as shift
    UNTIL           reduce using rule 38 (statement -> .)
    ID              shift and go to state 46
    CASE            shift and go to state 49
    WHILE           shift and go to state 51
    REPEAT          shift and go to state 52
    FOR             shift and go to state 53
    BEGIN           shift and go to state 36
    IF              shift and go to state 54
    ELSE            shift and go to state 55
    INTEGER         shift and go to state 56
    REAL            shift and go to state 57

  ! ID              [ reduce using rule 38 (statement -> .) ]
  ! CASE            [ reduce using rule 38 (statement -> .) ]
  ! WHILE           [ reduce using rule 38 (statement -> .) ]
  ! REPEAT          [ reduce using rule 38 (statement -> .) ]
  ! FOR             [ reduce using rule 38 (statement -> .) ]
  ! BEGIN           [ reduce using rule 38 (statement -> .) ]
  ! IF              [ reduce using rule 38 (statement -> .) ]
  ! ELSE            [ reduce using rule 38 (statement -> .) ]
  ! INTEGER         [ reduce using rule 38 (statement -> .) ]
  ! REAL            [ reduce using rule 38 (statement -> .) ]
  ! ID              [ reduce using rule 43 (if_statement -> .) ]
  ! CASE            [ reduce using rule 43 (if_statement -> .) ]
  ! WHILE           [ reduce using rule 43 (if_statement -> .) ]
  ! REPEAT          [ reduce using rule 43 (if_statement -> .) ]
  ! FOR             [ reduce using rule 43 (if_statement -> .) ]
  ! BEGIN           [ reduce using rule 43 (if_statement -> .) ]
  ! IF              [ reduce using rule 43 (if_statement -> .) ]
  ! ELSE            [ reduce using rule 43 (if_statement -> .) ]
  ! INTEGER         [ reduce using rule 43 (if_statement -> .) ]
  ! REAL            [ reduce using rule 43 (if_statement -> .) ]
  ! UNTIL           [ reduce using rule 43 (if_statement -> .) ]
  ! ID              [ reduce using rule 47 (if1 -> .) ]
  ! CASE            [ reduce using rule 47 (if1 -> .) ]
  ! WHILE           [ reduce using rule 47 (if1 -> .) ]
  ! REPEAT          [ reduce using rule 47 (if1 -> .) ]
  ! FOR             [ reduce using rule 47 (if1 -> .) ]
  ! BEGIN           [ reduce using rule 47 (if1 -> .) ]
  ! IF              [ reduce using rule 47 (if1 -> .) ]
  ! ELSE            [ reduce using rule 47 (if1 -> .) ]
  ! INTEGER         [ reduce using rule 47 (if1 -> .) ]
  ! REAL            [ reduce using rule 47 (if1 -> .) ]
  ! UNTIL           [ reduce using rule 47 (if1 -> .) ]
  ! ID              [ reduce using rule 50 (if2 -> .) ]
  ! CASE            [ reduce using rule 50 (if2 -> .) ]
  ! WHILE           [ reduce using rule 50 (if2 -> .) ]
  ! REPEAT          [ reduce using rule 50 (if2 -> .) ]
  ! FOR             [ reduce using rule 50 (if2 -> .) ]
  ! BEGIN           [ reduce using rule 50 (if2 -> .) ]
  ! IF              [ reduce using rule 50 (if2 -> .) ]
  ! ELSE            [ reduce using rule 50 (if2 -> .) ]
  ! INTEGER         [ reduce using rule 50 (if2 -> .) ]
  ! REAL            [ reduce using rule 50 (if2 -> .) ]
  ! UNTIL           [ reduce using rule 50 (if2 -> .) ]

    statement                      shift and go to state 82
    assign_statement               shift and go to state 38
    procedure_call                 shift and go to state 39
    if_statement                   shift and go to state 40
    case_statement                 shift and go to state 41
    while_statement                shift and go to state 42
    repeat_statement               shift and go to state 43
    for_statement                  shift and go to state 44
    compound_statement_semicolon   shift and go to state 45
    if1                            shift and go to state 47
    if2                            shift and go to state 48
    case                           shift and go to state 50

state 53

    (59) for_statement -> FOR . ID ASSIGNMENT expr TO expr DO

    ID              shift and go to state 83


state 54

    (44) if1 -> IF . expr_list THEN if1
    (45) if1 -> IF . expr_list THEN if2
    (48) if2 -> IF . expr_list THEN if2
    (61) expr_list -> . expr
    (62) expr_list -> . expr COMMA expr_list
    (63) expr -> . simple_expr relop_simple_expr
    (72) simple_expr -> . uplus_uminus factor
    (73) simple_expr -> . uplus_uminus factor addop_mulop factor simple_expr
    (74) uplus_uminus -> . UPLUS
    (75) uplus_uminus -> . UMINUS
    (76) uplus_uminus -> .

  ! shift/reduce conflict for UPLUS resolved as shift
  ! shift/reduce conflict for UMINUS resolved as shift
    UPLUS           shift and go to state 79
    UMINUS          shift and go to state 80
    ID              reduce using rule 76 (uplus_uminus -> .)
    INTEGER         reduce using rule 76 (uplus_uminus -> .)
    REAL            reduce using rule 76 (uplus_uminus -> .)
    STRING          reduce using rule 76 (uplus_uminus -> .)
    NOT             reduce using rule 76 (uplus_uminus -> .)
    PLUS            reduce using rule 76 (uplus_uminus -> .)
    MINUS           reduce using rule 76 (uplus_uminus -> .)
    OR              reduce using rule 76 (uplus_uminus -> .)
    TIMES           reduce using rule 76 (uplus_uminus -> .)
    DIVIDE          reduce using rule 76 (uplus_uminus -> .)
    DIV             reduce using rule 76 (uplus_uminus -> .)
    MOD             reduce using rule 76 (uplus_uminus -> .)
    AND             reduce using rule 76 (uplus_uminus -> .)
    EQUALS          reduce using rule 76 (uplus_uminus -> .)
    LTHAN           reduce using rule 76 (uplus_uminus -> .)
    GTHAN           reduce using rule 76 (uplus_uminus -> .)
    DIFFERENT       reduce using rule 76 (uplus_uminus -> .)
    GEQUALS         reduce using rule 76 (uplus_uminus -> .)
    LEQUALS         reduce using rule 76 (uplus_uminus -> .)
    COMMA           reduce using rule 76 (uplus_uminus -> .)
    THEN            reduce using rule 76 (uplus_uminus -> .)

  ! UPLUS           [ reduce using rule 76 (uplus_uminus -> .) ]
  ! UMINUS          [ reduce using rule 76 (uplus_uminus -> .) ]

    expr_list                      shift and go to state 84
    expr                           shift and go to state 85
    simple_expr                    shift and go to state 77
    uplus_uminus                   shift and go to state 78

state 55

    (46) if1 -> ELSE . if1
    (49) if2 -> ELSE . if2
    (44) if1 -> . IF expr_list THEN if1
    (45) if1 -> . IF expr_list THEN if2
    (46) if1 -> . ELSE if1
    (47) if1 -> .
    (48) if2 -> . IF expr_list THEN if2
    (49) if2 -> . ELSE if2
    (50) if2 -> .

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! reduce/reduce conflict for ID resolved using rule 47 (if1 -> .)
  ! reduce/reduce conflict for CASE resolved using rule 47 (if1 -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 47 (if1 -> .)
  ! reduce/reduce conflict for REPEAT resolved using rule 47 (if1 -> .)
  ! reduce/reduce conflict for FOR resolved using rule 47 (if1 -> .)
  ! reduce/reduce conflict for BEGIN resolved using rule 47 (if1 -> .)
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! reduce/reduce conflict for INTEGER resolved using rule 47 (if1 -> .)
  ! reduce/reduce conflict for REAL resolved using rule 47 (if1 -> .)
  ! reduce/reduce conflict for END resolved using rule 47 (if1 -> .)
  ! reduce/reduce conflict for UNTIL resolved using rule 47 (if1 -> .)
    IF              shift and go to state 54
    ELSE            shift and go to state 55
    ID              reduce using rule 47 (if1 -> .)
    CASE            reduce using rule 47 (if1 -> .)
    WHILE           reduce using rule 47 (if1 -> .)
    REPEAT          reduce using rule 47 (if1 -> .)
    FOR             reduce using rule 47 (if1 -> .)
    BEGIN           reduce using rule 47 (if1 -> .)
    INTEGER         reduce using rule 47 (if1 -> .)
    REAL            reduce using rule 47 (if1 -> .)
    END             reduce using rule 47 (if1 -> .)
    UNTIL           reduce using rule 47 (if1 -> .)

  ! IF              [ reduce using rule 47 (if1 -> .) ]
  ! ELSE            [ reduce using rule 47 (if1 -> .) ]
  ! ID              [ reduce using rule 50 (if2 -> .) ]
  ! CASE            [ reduce using rule 50 (if2 -> .) ]
  ! WHILE           [ reduce using rule 50 (if2 -> .) ]
  ! REPEAT          [ reduce using rule 50 (if2 -> .) ]
  ! FOR             [ reduce using rule 50 (if2 -> .) ]
  ! BEGIN           [ reduce using rule 50 (if2 -> .) ]
  ! IF              [ reduce using rule 50 (if2 -> .) ]
  ! ELSE            [ reduce using rule 50 (if2 -> .) ]
  ! INTEGER         [ reduce using rule 50 (if2 -> .) ]
  ! REAL            [ reduce using rule 50 (if2 -> .) ]
  ! END             [ reduce using rule 50 (if2 -> .) ]
  ! UNTIL           [ reduce using rule 50 (if2 -> .) ]

    if1                            shift and go to state 86
    if2                            shift and go to state 87

state 56

    (53) case -> INTEGER . TWOPOINTS statement

    TWOPOINTS       shift and go to state 88


state 57

    (54) case -> REAL . TWOPOINTS statement

    TWOPOINTS       shift and go to state 89


state 58

    (23) procedure_declaration -> PROCEDURE ID LPARENT . param_section RPARENT SEMICOLON
    (25) param_section -> . identifier_list TWOPOINTS types SEMICOLON param_section
    (26) param_section -> .
    (18) identifier_list -> . ID
    (19) identifier_list -> . ID COMMA identifier_list

    RPARENT         reduce using rule 26 (param_section -> .)
    ID              shift and go to state 19

    param_section                  shift and go to state 90
    identifier_list                shift and go to state 91

state 59

    (24) function_declaration -> FUNCTION ID LPARENT . param_section RPARENT TWOPOINTS types SEMICOLON
    (25) param_section -> . identifier_list TWOPOINTS types SEMICOLON param_section
    (26) param_section -> .
    (18) identifier_list -> . ID
    (19) identifier_list -> . ID COMMA identifier_list

    RPARENT         reduce using rule 26 (param_section -> .)
    ID              shift and go to state 19

    param_section                  shift and go to state 92
    identifier_list                shift and go to state 91

state 60

    (10) var_declaration -> identifier_list TWOPOINTS types . SEMICOLON var_declaration
    (11) var_declaration -> identifier_list TWOPOINTS types . SEMICOLON

    SEMICOLON       shift and go to state 93


state 61

    (19) identifier_list -> ID COMMA identifier_list .

    TWOPOINTS       reduce using rule 19 (identifier_list -> ID COMMA identifier_list .)


state 62

    (6) const_definition -> ID EQUALS types SEMICOLON . const_definition
    (7) const_definition -> ID EQUALS types SEMICOLON .
    (6) const_definition -> . ID EQUALS types SEMICOLON const_definition
    (7) const_definition -> . ID EQUALS types SEMICOLON

    VAR             reduce using rule 7 (const_definition -> ID EQUALS types SEMICOLON .)
    PROCEDURE       reduce using rule 7 (const_definition -> ID EQUALS types SEMICOLON .)
    FUNCTION        reduce using rule 7 (const_definition -> ID EQUALS types SEMICOLON .)
    BEGIN           reduce using rule 7 (const_definition -> ID EQUALS types SEMICOLON .)
    $end            reduce using rule 7 (const_definition -> ID EQUALS types SEMICOLON .)
    ID              shift and go to state 11

    const_definition               shift and go to state 94

state 63

    (29) compound_statement_semicolon -> BEGIN statement . END SEMICOLON
    (58) repeat_statement -> statement .
    (60) for_statement -> statement .

  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for END resolved as shift
  ! reduce/reduce conflict for ID resolved using rule 58 (repeat_statement -> statement .)
  ! reduce/reduce conflict for CASE resolved using rule 58 (repeat_statement -> statement .)
  ! reduce/reduce conflict for WHILE resolved using rule 58 (repeat_statement -> statement .)
  ! reduce/reduce conflict for REPEAT resolved using rule 58 (repeat_statement -> statement .)
  ! reduce/reduce conflict for FOR resolved using rule 58 (repeat_statement -> statement .)
  ! reduce/reduce conflict for BEGIN resolved using rule 58 (repeat_statement -> statement .)
  ! reduce/reduce conflict for IF resolved using rule 58 (repeat_statement -> statement .)
  ! reduce/reduce conflict for ELSE resolved using rule 58 (repeat_statement -> statement .)
  ! reduce/reduce conflict for INTEGER resolved using rule 58 (repeat_statement -> statement .)
  ! reduce/reduce conflict for REAL resolved using rule 58 (repeat_statement -> statement .)
    END             shift and go to state 95
    ID              reduce using rule 58 (repeat_statement -> statement .)
    CASE            reduce using rule 58 (repeat_statement -> statement .)
    WHILE           reduce using rule 58 (repeat_statement -> statement .)
    REPEAT          reduce using rule 58 (repeat_statement -> statement .)
    FOR             reduce using rule 58 (repeat_statement -> statement .)
    BEGIN           reduce using rule 58 (repeat_statement -> statement .)
    IF              reduce using rule 58 (repeat_statement -> statement .)
    ELSE            reduce using rule 58 (repeat_statement -> statement .)
    INTEGER         reduce using rule 58 (repeat_statement -> statement .)
    REAL            reduce using rule 58 (repeat_statement -> statement .)

  ! END             [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! END             [ reduce using rule 60 (for_statement -> statement .) ]
  ! ID              [ reduce using rule 60 (for_statement -> statement .) ]
  ! CASE            [ reduce using rule 60 (for_statement -> statement .) ]
  ! WHILE           [ reduce using rule 60 (for_statement -> statement .) ]
  ! REPEAT          [ reduce using rule 60 (for_statement -> statement .) ]
  ! FOR             [ reduce using rule 60 (for_statement -> statement .) ]
  ! BEGIN           [ reduce using rule 60 (for_statement -> statement .) ]
  ! IF              [ reduce using rule 60 (for_statement -> statement .) ]
  ! ELSE            [ reduce using rule 60 (for_statement -> statement .) ]
  ! INTEGER         [ reduce using rule 60 (for_statement -> statement .) ]
  ! REAL            [ reduce using rule 60 (for_statement -> statement .) ]


state 64

    (27) compound_statement_score -> BEGIN statement END . SCORE

    SCORE           shift and go to state 96


state 65

    (30) statement -> assign_statement statement .
    (58) repeat_statement -> statement .
    (60) for_statement -> statement .

  ! reduce/reduce conflict for END resolved using rule 30 (statement -> assign_statement statement .)
  ! reduce/reduce conflict for ID resolved using rule 30 (statement -> assign_statement statement .)
  ! reduce/reduce conflict for CASE resolved using rule 30 (statement -> assign_statement statement .)
  ! reduce/reduce conflict for WHILE resolved using rule 30 (statement -> assign_statement statement .)
  ! reduce/reduce conflict for REPEAT resolved using rule 30 (statement -> assign_statement statement .)
  ! reduce/reduce conflict for FOR resolved using rule 30 (statement -> assign_statement statement .)
  ! reduce/reduce conflict for BEGIN resolved using rule 30 (statement -> assign_statement statement .)
  ! reduce/reduce conflict for IF resolved using rule 30 (statement -> assign_statement statement .)
  ! reduce/reduce conflict for ELSE resolved using rule 30 (statement -> assign_statement statement .)
  ! reduce/reduce conflict for INTEGER resolved using rule 30 (statement -> assign_statement statement .)
  ! reduce/reduce conflict for REAL resolved using rule 30 (statement -> assign_statement statement .)
  ! reduce/reduce conflict for UNTIL resolved using rule 30 (statement -> assign_statement statement .)
  ! reduce/reduce conflict for END resolved using rule 30 (statement -> assign_statement statement .)
  ! reduce/reduce conflict for ID resolved using rule 30 (statement -> assign_statement statement .)
  ! reduce/reduce conflict for CASE resolved using rule 30 (statement -> assign_statement statement .)
  ! reduce/reduce conflict for WHILE resolved using rule 30 (statement -> assign_statement statement .)
  ! reduce/reduce conflict for REPEAT resolved using rule 30 (statement -> assign_statement statement .)
  ! reduce/reduce conflict for FOR resolved using rule 30 (statement -> assign_statement statement .)
  ! reduce/reduce conflict for BEGIN resolved using rule 30 (statement -> assign_statement statement .)
  ! reduce/reduce conflict for IF resolved using rule 30 (statement -> assign_statement statement .)
  ! reduce/reduce conflict for ELSE resolved using rule 30 (statement -> assign_statement statement .)
  ! reduce/reduce conflict for INTEGER resolved using rule 30 (statement -> assign_statement statement .)
  ! reduce/reduce conflict for REAL resolved using rule 30 (statement -> assign_statement statement .)
  ! reduce/reduce conflict for UNTIL resolved using rule 30 (statement -> assign_statement statement .)
    END             reduce using rule 30 (statement -> assign_statement statement .)
    ID              reduce using rule 30 (statement -> assign_statement statement .)
    CASE            reduce using rule 30 (statement -> assign_statement statement .)
    WHILE           reduce using rule 30 (statement -> assign_statement statement .)
    REPEAT          reduce using rule 30 (statement -> assign_statement statement .)
    FOR             reduce using rule 30 (statement -> assign_statement statement .)
    BEGIN           reduce using rule 30 (statement -> assign_statement statement .)
    IF              reduce using rule 30 (statement -> assign_statement statement .)
    ELSE            reduce using rule 30 (statement -> assign_statement statement .)
    INTEGER         reduce using rule 30 (statement -> assign_statement statement .)
    REAL            reduce using rule 30 (statement -> assign_statement statement .)
    UNTIL           reduce using rule 30 (statement -> assign_statement statement .)

  ! END             [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! ID              [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! CASE            [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! WHILE           [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! REPEAT          [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! FOR             [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! BEGIN           [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! IF              [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! ELSE            [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! INTEGER         [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! REAL            [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! UNTIL           [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! END             [ reduce using rule 60 (for_statement -> statement .) ]
  ! ID              [ reduce using rule 60 (for_statement -> statement .) ]
  ! CASE            [ reduce using rule 60 (for_statement -> statement .) ]
  ! WHILE           [ reduce using rule 60 (for_statement -> statement .) ]
  ! REPEAT          [ reduce using rule 60 (for_statement -> statement .) ]
  ! FOR             [ reduce using rule 60 (for_statement -> statement .) ]
  ! BEGIN           [ reduce using rule 60 (for_statement -> statement .) ]
  ! IF              [ reduce using rule 60 (for_statement -> statement .) ]
  ! ELSE            [ reduce using rule 60 (for_statement -> statement .) ]
  ! INTEGER         [ reduce using rule 60 (for_statement -> statement .) ]
  ! REAL            [ reduce using rule 60 (for_statement -> statement .) ]
  ! UNTIL           [ reduce using rule 60 (for_statement -> statement .) ]


state 66

    (31) statement -> procedure_call statement .
    (58) repeat_statement -> statement .
    (60) for_statement -> statement .

  ! reduce/reduce conflict for END resolved using rule 31 (statement -> procedure_call statement .)
  ! reduce/reduce conflict for ID resolved using rule 31 (statement -> procedure_call statement .)
  ! reduce/reduce conflict for CASE resolved using rule 31 (statement -> procedure_call statement .)
  ! reduce/reduce conflict for WHILE resolved using rule 31 (statement -> procedure_call statement .)
  ! reduce/reduce conflict for REPEAT resolved using rule 31 (statement -> procedure_call statement .)
  ! reduce/reduce conflict for FOR resolved using rule 31 (statement -> procedure_call statement .)
  ! reduce/reduce conflict for BEGIN resolved using rule 31 (statement -> procedure_call statement .)
  ! reduce/reduce conflict for IF resolved using rule 31 (statement -> procedure_call statement .)
  ! reduce/reduce conflict for ELSE resolved using rule 31 (statement -> procedure_call statement .)
  ! reduce/reduce conflict for INTEGER resolved using rule 31 (statement -> procedure_call statement .)
  ! reduce/reduce conflict for REAL resolved using rule 31 (statement -> procedure_call statement .)
  ! reduce/reduce conflict for UNTIL resolved using rule 31 (statement -> procedure_call statement .)
  ! reduce/reduce conflict for END resolved using rule 31 (statement -> procedure_call statement .)
  ! reduce/reduce conflict for ID resolved using rule 31 (statement -> procedure_call statement .)
  ! reduce/reduce conflict for CASE resolved using rule 31 (statement -> procedure_call statement .)
  ! reduce/reduce conflict for WHILE resolved using rule 31 (statement -> procedure_call statement .)
  ! reduce/reduce conflict for REPEAT resolved using rule 31 (statement -> procedure_call statement .)
  ! reduce/reduce conflict for FOR resolved using rule 31 (statement -> procedure_call statement .)
  ! reduce/reduce conflict for BEGIN resolved using rule 31 (statement -> procedure_call statement .)
  ! reduce/reduce conflict for IF resolved using rule 31 (statement -> procedure_call statement .)
  ! reduce/reduce conflict for ELSE resolved using rule 31 (statement -> procedure_call statement .)
  ! reduce/reduce conflict for INTEGER resolved using rule 31 (statement -> procedure_call statement .)
  ! reduce/reduce conflict for REAL resolved using rule 31 (statement -> procedure_call statement .)
  ! reduce/reduce conflict for UNTIL resolved using rule 31 (statement -> procedure_call statement .)
    END             reduce using rule 31 (statement -> procedure_call statement .)
    ID              reduce using rule 31 (statement -> procedure_call statement .)
    CASE            reduce using rule 31 (statement -> procedure_call statement .)
    WHILE           reduce using rule 31 (statement -> procedure_call statement .)
    REPEAT          reduce using rule 31 (statement -> procedure_call statement .)
    FOR             reduce using rule 31 (statement -> procedure_call statement .)
    BEGIN           reduce using rule 31 (statement -> procedure_call statement .)
    IF              reduce using rule 31 (statement -> procedure_call statement .)
    ELSE            reduce using rule 31 (statement -> procedure_call statement .)
    INTEGER         reduce using rule 31 (statement -> procedure_call statement .)
    REAL            reduce using rule 31 (statement -> procedure_call statement .)
    UNTIL           reduce using rule 31 (statement -> procedure_call statement .)

  ! END             [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! ID              [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! CASE            [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! WHILE           [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! REPEAT          [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! FOR             [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! BEGIN           [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! IF              [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! ELSE            [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! INTEGER         [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! REAL            [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! UNTIL           [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! END             [ reduce using rule 60 (for_statement -> statement .) ]
  ! ID              [ reduce using rule 60 (for_statement -> statement .) ]
  ! CASE            [ reduce using rule 60 (for_statement -> statement .) ]
  ! WHILE           [ reduce using rule 60 (for_statement -> statement .) ]
  ! REPEAT          [ reduce using rule 60 (for_statement -> statement .) ]
  ! FOR             [ reduce using rule 60 (for_statement -> statement .) ]
  ! BEGIN           [ reduce using rule 60 (for_statement -> statement .) ]
  ! IF              [ reduce using rule 60 (for_statement -> statement .) ]
  ! ELSE            [ reduce using rule 60 (for_statement -> statement .) ]
  ! INTEGER         [ reduce using rule 60 (for_statement -> statement .) ]
  ! REAL            [ reduce using rule 60 (for_statement -> statement .) ]
  ! UNTIL           [ reduce using rule 60 (for_statement -> statement .) ]


state 67

    (32) statement -> if_statement statement .
    (58) repeat_statement -> statement .
    (60) for_statement -> statement .

  ! reduce/reduce conflict for END resolved using rule 32 (statement -> if_statement statement .)
  ! reduce/reduce conflict for ID resolved using rule 32 (statement -> if_statement statement .)
  ! reduce/reduce conflict for CASE resolved using rule 32 (statement -> if_statement statement .)
  ! reduce/reduce conflict for WHILE resolved using rule 32 (statement -> if_statement statement .)
  ! reduce/reduce conflict for REPEAT resolved using rule 32 (statement -> if_statement statement .)
  ! reduce/reduce conflict for FOR resolved using rule 32 (statement -> if_statement statement .)
  ! reduce/reduce conflict for BEGIN resolved using rule 32 (statement -> if_statement statement .)
  ! reduce/reduce conflict for IF resolved using rule 32 (statement -> if_statement statement .)
  ! reduce/reduce conflict for ELSE resolved using rule 32 (statement -> if_statement statement .)
  ! reduce/reduce conflict for INTEGER resolved using rule 32 (statement -> if_statement statement .)
  ! reduce/reduce conflict for REAL resolved using rule 32 (statement -> if_statement statement .)
  ! reduce/reduce conflict for UNTIL resolved using rule 32 (statement -> if_statement statement .)
  ! reduce/reduce conflict for END resolved using rule 32 (statement -> if_statement statement .)
  ! reduce/reduce conflict for ID resolved using rule 32 (statement -> if_statement statement .)
  ! reduce/reduce conflict for CASE resolved using rule 32 (statement -> if_statement statement .)
  ! reduce/reduce conflict for WHILE resolved using rule 32 (statement -> if_statement statement .)
  ! reduce/reduce conflict for REPEAT resolved using rule 32 (statement -> if_statement statement .)
  ! reduce/reduce conflict for FOR resolved using rule 32 (statement -> if_statement statement .)
  ! reduce/reduce conflict for BEGIN resolved using rule 32 (statement -> if_statement statement .)
  ! reduce/reduce conflict for IF resolved using rule 32 (statement -> if_statement statement .)
  ! reduce/reduce conflict for ELSE resolved using rule 32 (statement -> if_statement statement .)
  ! reduce/reduce conflict for INTEGER resolved using rule 32 (statement -> if_statement statement .)
  ! reduce/reduce conflict for REAL resolved using rule 32 (statement -> if_statement statement .)
  ! reduce/reduce conflict for UNTIL resolved using rule 32 (statement -> if_statement statement .)
    END             reduce using rule 32 (statement -> if_statement statement .)
    ID              reduce using rule 32 (statement -> if_statement statement .)
    CASE            reduce using rule 32 (statement -> if_statement statement .)
    WHILE           reduce using rule 32 (statement -> if_statement statement .)
    REPEAT          reduce using rule 32 (statement -> if_statement statement .)
    FOR             reduce using rule 32 (statement -> if_statement statement .)
    BEGIN           reduce using rule 32 (statement -> if_statement statement .)
    IF              reduce using rule 32 (statement -> if_statement statement .)
    ELSE            reduce using rule 32 (statement -> if_statement statement .)
    INTEGER         reduce using rule 32 (statement -> if_statement statement .)
    REAL            reduce using rule 32 (statement -> if_statement statement .)
    UNTIL           reduce using rule 32 (statement -> if_statement statement .)

  ! END             [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! ID              [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! CASE            [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! WHILE           [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! REPEAT          [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! FOR             [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! BEGIN           [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! IF              [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! ELSE            [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! INTEGER         [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! REAL            [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! UNTIL           [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! END             [ reduce using rule 60 (for_statement -> statement .) ]
  ! ID              [ reduce using rule 60 (for_statement -> statement .) ]
  ! CASE            [ reduce using rule 60 (for_statement -> statement .) ]
  ! WHILE           [ reduce using rule 60 (for_statement -> statement .) ]
  ! REPEAT          [ reduce using rule 60 (for_statement -> statement .) ]
  ! FOR             [ reduce using rule 60 (for_statement -> statement .) ]
  ! BEGIN           [ reduce using rule 60 (for_statement -> statement .) ]
  ! IF              [ reduce using rule 60 (for_statement -> statement .) ]
  ! ELSE            [ reduce using rule 60 (for_statement -> statement .) ]
  ! INTEGER         [ reduce using rule 60 (for_statement -> statement .) ]
  ! REAL            [ reduce using rule 60 (for_statement -> statement .) ]
  ! UNTIL           [ reduce using rule 60 (for_statement -> statement .) ]


state 68

    (33) statement -> case_statement statement .
    (58) repeat_statement -> statement .
    (60) for_statement -> statement .

  ! reduce/reduce conflict for END resolved using rule 33 (statement -> case_statement statement .)
  ! reduce/reduce conflict for ID resolved using rule 33 (statement -> case_statement statement .)
  ! reduce/reduce conflict for CASE resolved using rule 33 (statement -> case_statement statement .)
  ! reduce/reduce conflict for WHILE resolved using rule 33 (statement -> case_statement statement .)
  ! reduce/reduce conflict for REPEAT resolved using rule 33 (statement -> case_statement statement .)
  ! reduce/reduce conflict for FOR resolved using rule 33 (statement -> case_statement statement .)
  ! reduce/reduce conflict for BEGIN resolved using rule 33 (statement -> case_statement statement .)
  ! reduce/reduce conflict for IF resolved using rule 33 (statement -> case_statement statement .)
  ! reduce/reduce conflict for ELSE resolved using rule 33 (statement -> case_statement statement .)
  ! reduce/reduce conflict for INTEGER resolved using rule 33 (statement -> case_statement statement .)
  ! reduce/reduce conflict for REAL resolved using rule 33 (statement -> case_statement statement .)
  ! reduce/reduce conflict for UNTIL resolved using rule 33 (statement -> case_statement statement .)
  ! reduce/reduce conflict for END resolved using rule 33 (statement -> case_statement statement .)
  ! reduce/reduce conflict for ID resolved using rule 33 (statement -> case_statement statement .)
  ! reduce/reduce conflict for CASE resolved using rule 33 (statement -> case_statement statement .)
  ! reduce/reduce conflict for WHILE resolved using rule 33 (statement -> case_statement statement .)
  ! reduce/reduce conflict for REPEAT resolved using rule 33 (statement -> case_statement statement .)
  ! reduce/reduce conflict for FOR resolved using rule 33 (statement -> case_statement statement .)
  ! reduce/reduce conflict for BEGIN resolved using rule 33 (statement -> case_statement statement .)
  ! reduce/reduce conflict for IF resolved using rule 33 (statement -> case_statement statement .)
  ! reduce/reduce conflict for ELSE resolved using rule 33 (statement -> case_statement statement .)
  ! reduce/reduce conflict for INTEGER resolved using rule 33 (statement -> case_statement statement .)
  ! reduce/reduce conflict for REAL resolved using rule 33 (statement -> case_statement statement .)
  ! reduce/reduce conflict for UNTIL resolved using rule 33 (statement -> case_statement statement .)
    END             reduce using rule 33 (statement -> case_statement statement .)
    ID              reduce using rule 33 (statement -> case_statement statement .)
    CASE            reduce using rule 33 (statement -> case_statement statement .)
    WHILE           reduce using rule 33 (statement -> case_statement statement .)
    REPEAT          reduce using rule 33 (statement -> case_statement statement .)
    FOR             reduce using rule 33 (statement -> case_statement statement .)
    BEGIN           reduce using rule 33 (statement -> case_statement statement .)
    IF              reduce using rule 33 (statement -> case_statement statement .)
    ELSE            reduce using rule 33 (statement -> case_statement statement .)
    INTEGER         reduce using rule 33 (statement -> case_statement statement .)
    REAL            reduce using rule 33 (statement -> case_statement statement .)
    UNTIL           reduce using rule 33 (statement -> case_statement statement .)

  ! END             [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! ID              [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! CASE            [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! WHILE           [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! REPEAT          [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! FOR             [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! BEGIN           [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! IF              [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! ELSE            [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! INTEGER         [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! REAL            [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! UNTIL           [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! END             [ reduce using rule 60 (for_statement -> statement .) ]
  ! ID              [ reduce using rule 60 (for_statement -> statement .) ]
  ! CASE            [ reduce using rule 60 (for_statement -> statement .) ]
  ! WHILE           [ reduce using rule 60 (for_statement -> statement .) ]
  ! REPEAT          [ reduce using rule 60 (for_statement -> statement .) ]
  ! FOR             [ reduce using rule 60 (for_statement -> statement .) ]
  ! BEGIN           [ reduce using rule 60 (for_statement -> statement .) ]
  ! IF              [ reduce using rule 60 (for_statement -> statement .) ]
  ! ELSE            [ reduce using rule 60 (for_statement -> statement .) ]
  ! INTEGER         [ reduce using rule 60 (for_statement -> statement .) ]
  ! REAL            [ reduce using rule 60 (for_statement -> statement .) ]
  ! UNTIL           [ reduce using rule 60 (for_statement -> statement .) ]


state 69

    (34) statement -> while_statement statement .
    (58) repeat_statement -> statement .
    (60) for_statement -> statement .

  ! reduce/reduce conflict for END resolved using rule 34 (statement -> while_statement statement .)
  ! reduce/reduce conflict for ID resolved using rule 34 (statement -> while_statement statement .)
  ! reduce/reduce conflict for CASE resolved using rule 34 (statement -> while_statement statement .)
  ! reduce/reduce conflict for WHILE resolved using rule 34 (statement -> while_statement statement .)
  ! reduce/reduce conflict for REPEAT resolved using rule 34 (statement -> while_statement statement .)
  ! reduce/reduce conflict for FOR resolved using rule 34 (statement -> while_statement statement .)
  ! reduce/reduce conflict for BEGIN resolved using rule 34 (statement -> while_statement statement .)
  ! reduce/reduce conflict for IF resolved using rule 34 (statement -> while_statement statement .)
  ! reduce/reduce conflict for ELSE resolved using rule 34 (statement -> while_statement statement .)
  ! reduce/reduce conflict for INTEGER resolved using rule 34 (statement -> while_statement statement .)
  ! reduce/reduce conflict for REAL resolved using rule 34 (statement -> while_statement statement .)
  ! reduce/reduce conflict for UNTIL resolved using rule 34 (statement -> while_statement statement .)
  ! reduce/reduce conflict for END resolved using rule 34 (statement -> while_statement statement .)
  ! reduce/reduce conflict for ID resolved using rule 34 (statement -> while_statement statement .)
  ! reduce/reduce conflict for CASE resolved using rule 34 (statement -> while_statement statement .)
  ! reduce/reduce conflict for WHILE resolved using rule 34 (statement -> while_statement statement .)
  ! reduce/reduce conflict for REPEAT resolved using rule 34 (statement -> while_statement statement .)
  ! reduce/reduce conflict for FOR resolved using rule 34 (statement -> while_statement statement .)
  ! reduce/reduce conflict for BEGIN resolved using rule 34 (statement -> while_statement statement .)
  ! reduce/reduce conflict for IF resolved using rule 34 (statement -> while_statement statement .)
  ! reduce/reduce conflict for ELSE resolved using rule 34 (statement -> while_statement statement .)
  ! reduce/reduce conflict for INTEGER resolved using rule 34 (statement -> while_statement statement .)
  ! reduce/reduce conflict for REAL resolved using rule 34 (statement -> while_statement statement .)
  ! reduce/reduce conflict for UNTIL resolved using rule 34 (statement -> while_statement statement .)
    END             reduce using rule 34 (statement -> while_statement statement .)
    ID              reduce using rule 34 (statement -> while_statement statement .)
    CASE            reduce using rule 34 (statement -> while_statement statement .)
    WHILE           reduce using rule 34 (statement -> while_statement statement .)
    REPEAT          reduce using rule 34 (statement -> while_statement statement .)
    FOR             reduce using rule 34 (statement -> while_statement statement .)
    BEGIN           reduce using rule 34 (statement -> while_statement statement .)
    IF              reduce using rule 34 (statement -> while_statement statement .)
    ELSE            reduce using rule 34 (statement -> while_statement statement .)
    INTEGER         reduce using rule 34 (statement -> while_statement statement .)
    REAL            reduce using rule 34 (statement -> while_statement statement .)
    UNTIL           reduce using rule 34 (statement -> while_statement statement .)

  ! END             [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! ID              [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! CASE            [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! WHILE           [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! REPEAT          [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! FOR             [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! BEGIN           [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! IF              [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! ELSE            [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! INTEGER         [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! REAL            [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! UNTIL           [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! END             [ reduce using rule 60 (for_statement -> statement .) ]
  ! ID              [ reduce using rule 60 (for_statement -> statement .) ]
  ! CASE            [ reduce using rule 60 (for_statement -> statement .) ]
  ! WHILE           [ reduce using rule 60 (for_statement -> statement .) ]
  ! REPEAT          [ reduce using rule 60 (for_statement -> statement .) ]
  ! FOR             [ reduce using rule 60 (for_statement -> statement .) ]
  ! BEGIN           [ reduce using rule 60 (for_statement -> statement .) ]
  ! IF              [ reduce using rule 60 (for_statement -> statement .) ]
  ! ELSE            [ reduce using rule 60 (for_statement -> statement .) ]
  ! INTEGER         [ reduce using rule 60 (for_statement -> statement .) ]
  ! REAL            [ reduce using rule 60 (for_statement -> statement .) ]
  ! UNTIL           [ reduce using rule 60 (for_statement -> statement .) ]


state 70

    (35) statement -> repeat_statement statement .
    (58) repeat_statement -> statement .
    (60) for_statement -> statement .

  ! reduce/reduce conflict for END resolved using rule 35 (statement -> repeat_statement statement .)
  ! reduce/reduce conflict for ID resolved using rule 35 (statement -> repeat_statement statement .)
  ! reduce/reduce conflict for CASE resolved using rule 35 (statement -> repeat_statement statement .)
  ! reduce/reduce conflict for WHILE resolved using rule 35 (statement -> repeat_statement statement .)
  ! reduce/reduce conflict for REPEAT resolved using rule 35 (statement -> repeat_statement statement .)
  ! reduce/reduce conflict for FOR resolved using rule 35 (statement -> repeat_statement statement .)
  ! reduce/reduce conflict for BEGIN resolved using rule 35 (statement -> repeat_statement statement .)
  ! reduce/reduce conflict for IF resolved using rule 35 (statement -> repeat_statement statement .)
  ! reduce/reduce conflict for ELSE resolved using rule 35 (statement -> repeat_statement statement .)
  ! reduce/reduce conflict for INTEGER resolved using rule 35 (statement -> repeat_statement statement .)
  ! reduce/reduce conflict for REAL resolved using rule 35 (statement -> repeat_statement statement .)
  ! reduce/reduce conflict for UNTIL resolved using rule 35 (statement -> repeat_statement statement .)
  ! reduce/reduce conflict for END resolved using rule 35 (statement -> repeat_statement statement .)
  ! reduce/reduce conflict for ID resolved using rule 35 (statement -> repeat_statement statement .)
  ! reduce/reduce conflict for CASE resolved using rule 35 (statement -> repeat_statement statement .)
  ! reduce/reduce conflict for WHILE resolved using rule 35 (statement -> repeat_statement statement .)
  ! reduce/reduce conflict for REPEAT resolved using rule 35 (statement -> repeat_statement statement .)
  ! reduce/reduce conflict for FOR resolved using rule 35 (statement -> repeat_statement statement .)
  ! reduce/reduce conflict for BEGIN resolved using rule 35 (statement -> repeat_statement statement .)
  ! reduce/reduce conflict for IF resolved using rule 35 (statement -> repeat_statement statement .)
  ! reduce/reduce conflict for ELSE resolved using rule 35 (statement -> repeat_statement statement .)
  ! reduce/reduce conflict for INTEGER resolved using rule 35 (statement -> repeat_statement statement .)
  ! reduce/reduce conflict for REAL resolved using rule 35 (statement -> repeat_statement statement .)
  ! reduce/reduce conflict for UNTIL resolved using rule 35 (statement -> repeat_statement statement .)
    END             reduce using rule 35 (statement -> repeat_statement statement .)
    ID              reduce using rule 35 (statement -> repeat_statement statement .)
    CASE            reduce using rule 35 (statement -> repeat_statement statement .)
    WHILE           reduce using rule 35 (statement -> repeat_statement statement .)
    REPEAT          reduce using rule 35 (statement -> repeat_statement statement .)
    FOR             reduce using rule 35 (statement -> repeat_statement statement .)
    BEGIN           reduce using rule 35 (statement -> repeat_statement statement .)
    IF              reduce using rule 35 (statement -> repeat_statement statement .)
    ELSE            reduce using rule 35 (statement -> repeat_statement statement .)
    INTEGER         reduce using rule 35 (statement -> repeat_statement statement .)
    REAL            reduce using rule 35 (statement -> repeat_statement statement .)
    UNTIL           reduce using rule 35 (statement -> repeat_statement statement .)

  ! END             [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! ID              [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! CASE            [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! WHILE           [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! REPEAT          [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! FOR             [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! BEGIN           [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! IF              [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! ELSE            [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! INTEGER         [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! REAL            [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! UNTIL           [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! END             [ reduce using rule 60 (for_statement -> statement .) ]
  ! ID              [ reduce using rule 60 (for_statement -> statement .) ]
  ! CASE            [ reduce using rule 60 (for_statement -> statement .) ]
  ! WHILE           [ reduce using rule 60 (for_statement -> statement .) ]
  ! REPEAT          [ reduce using rule 60 (for_statement -> statement .) ]
  ! FOR             [ reduce using rule 60 (for_statement -> statement .) ]
  ! BEGIN           [ reduce using rule 60 (for_statement -> statement .) ]
  ! IF              [ reduce using rule 60 (for_statement -> statement .) ]
  ! ELSE            [ reduce using rule 60 (for_statement -> statement .) ]
  ! INTEGER         [ reduce using rule 60 (for_statement -> statement .) ]
  ! REAL            [ reduce using rule 60 (for_statement -> statement .) ]
  ! UNTIL           [ reduce using rule 60 (for_statement -> statement .) ]


state 71

    (36) statement -> for_statement statement .
    (58) repeat_statement -> statement .
    (60) for_statement -> statement .

  ! reduce/reduce conflict for END resolved using rule 36 (statement -> for_statement statement .)
  ! reduce/reduce conflict for ID resolved using rule 36 (statement -> for_statement statement .)
  ! reduce/reduce conflict for CASE resolved using rule 36 (statement -> for_statement statement .)
  ! reduce/reduce conflict for WHILE resolved using rule 36 (statement -> for_statement statement .)
  ! reduce/reduce conflict for REPEAT resolved using rule 36 (statement -> for_statement statement .)
  ! reduce/reduce conflict for FOR resolved using rule 36 (statement -> for_statement statement .)
  ! reduce/reduce conflict for BEGIN resolved using rule 36 (statement -> for_statement statement .)
  ! reduce/reduce conflict for IF resolved using rule 36 (statement -> for_statement statement .)
  ! reduce/reduce conflict for ELSE resolved using rule 36 (statement -> for_statement statement .)
  ! reduce/reduce conflict for INTEGER resolved using rule 36 (statement -> for_statement statement .)
  ! reduce/reduce conflict for REAL resolved using rule 36 (statement -> for_statement statement .)
  ! reduce/reduce conflict for UNTIL resolved using rule 36 (statement -> for_statement statement .)
  ! reduce/reduce conflict for END resolved using rule 36 (statement -> for_statement statement .)
  ! reduce/reduce conflict for ID resolved using rule 36 (statement -> for_statement statement .)
  ! reduce/reduce conflict for CASE resolved using rule 36 (statement -> for_statement statement .)
  ! reduce/reduce conflict for WHILE resolved using rule 36 (statement -> for_statement statement .)
  ! reduce/reduce conflict for REPEAT resolved using rule 36 (statement -> for_statement statement .)
  ! reduce/reduce conflict for FOR resolved using rule 36 (statement -> for_statement statement .)
  ! reduce/reduce conflict for BEGIN resolved using rule 36 (statement -> for_statement statement .)
  ! reduce/reduce conflict for IF resolved using rule 36 (statement -> for_statement statement .)
  ! reduce/reduce conflict for ELSE resolved using rule 36 (statement -> for_statement statement .)
  ! reduce/reduce conflict for INTEGER resolved using rule 36 (statement -> for_statement statement .)
  ! reduce/reduce conflict for REAL resolved using rule 36 (statement -> for_statement statement .)
  ! reduce/reduce conflict for UNTIL resolved using rule 36 (statement -> for_statement statement .)
    END             reduce using rule 36 (statement -> for_statement statement .)
    ID              reduce using rule 36 (statement -> for_statement statement .)
    CASE            reduce using rule 36 (statement -> for_statement statement .)
    WHILE           reduce using rule 36 (statement -> for_statement statement .)
    REPEAT          reduce using rule 36 (statement -> for_statement statement .)
    FOR             reduce using rule 36 (statement -> for_statement statement .)
    BEGIN           reduce using rule 36 (statement -> for_statement statement .)
    IF              reduce using rule 36 (statement -> for_statement statement .)
    ELSE            reduce using rule 36 (statement -> for_statement statement .)
    INTEGER         reduce using rule 36 (statement -> for_statement statement .)
    REAL            reduce using rule 36 (statement -> for_statement statement .)
    UNTIL           reduce using rule 36 (statement -> for_statement statement .)

  ! END             [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! ID              [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! CASE            [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! WHILE           [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! REPEAT          [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! FOR             [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! BEGIN           [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! IF              [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! ELSE            [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! INTEGER         [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! REAL            [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! UNTIL           [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! END             [ reduce using rule 60 (for_statement -> statement .) ]
  ! ID              [ reduce using rule 60 (for_statement -> statement .) ]
  ! CASE            [ reduce using rule 60 (for_statement -> statement .) ]
  ! WHILE           [ reduce using rule 60 (for_statement -> statement .) ]
  ! REPEAT          [ reduce using rule 60 (for_statement -> statement .) ]
  ! FOR             [ reduce using rule 60 (for_statement -> statement .) ]
  ! BEGIN           [ reduce using rule 60 (for_statement -> statement .) ]
  ! IF              [ reduce using rule 60 (for_statement -> statement .) ]
  ! ELSE            [ reduce using rule 60 (for_statement -> statement .) ]
  ! INTEGER         [ reduce using rule 60 (for_statement -> statement .) ]
  ! REAL            [ reduce using rule 60 (for_statement -> statement .) ]
  ! UNTIL           [ reduce using rule 60 (for_statement -> statement .) ]


state 72

    (37) statement -> compound_statement_semicolon statement .
    (58) repeat_statement -> statement .
    (60) for_statement -> statement .

  ! reduce/reduce conflict for END resolved using rule 37 (statement -> compound_statement_semicolon statement .)
  ! reduce/reduce conflict for ID resolved using rule 37 (statement -> compound_statement_semicolon statement .)
  ! reduce/reduce conflict for CASE resolved using rule 37 (statement -> compound_statement_semicolon statement .)
  ! reduce/reduce conflict for WHILE resolved using rule 37 (statement -> compound_statement_semicolon statement .)
  ! reduce/reduce conflict for REPEAT resolved using rule 37 (statement -> compound_statement_semicolon statement .)
  ! reduce/reduce conflict for FOR resolved using rule 37 (statement -> compound_statement_semicolon statement .)
  ! reduce/reduce conflict for BEGIN resolved using rule 37 (statement -> compound_statement_semicolon statement .)
  ! reduce/reduce conflict for IF resolved using rule 37 (statement -> compound_statement_semicolon statement .)
  ! reduce/reduce conflict for ELSE resolved using rule 37 (statement -> compound_statement_semicolon statement .)
  ! reduce/reduce conflict for INTEGER resolved using rule 37 (statement -> compound_statement_semicolon statement .)
  ! reduce/reduce conflict for REAL resolved using rule 37 (statement -> compound_statement_semicolon statement .)
  ! reduce/reduce conflict for UNTIL resolved using rule 37 (statement -> compound_statement_semicolon statement .)
  ! reduce/reduce conflict for END resolved using rule 37 (statement -> compound_statement_semicolon statement .)
  ! reduce/reduce conflict for ID resolved using rule 37 (statement -> compound_statement_semicolon statement .)
  ! reduce/reduce conflict for CASE resolved using rule 37 (statement -> compound_statement_semicolon statement .)
  ! reduce/reduce conflict for WHILE resolved using rule 37 (statement -> compound_statement_semicolon statement .)
  ! reduce/reduce conflict for REPEAT resolved using rule 37 (statement -> compound_statement_semicolon statement .)
  ! reduce/reduce conflict for FOR resolved using rule 37 (statement -> compound_statement_semicolon statement .)
  ! reduce/reduce conflict for BEGIN resolved using rule 37 (statement -> compound_statement_semicolon statement .)
  ! reduce/reduce conflict for IF resolved using rule 37 (statement -> compound_statement_semicolon statement .)
  ! reduce/reduce conflict for ELSE resolved using rule 37 (statement -> compound_statement_semicolon statement .)
  ! reduce/reduce conflict for INTEGER resolved using rule 37 (statement -> compound_statement_semicolon statement .)
  ! reduce/reduce conflict for REAL resolved using rule 37 (statement -> compound_statement_semicolon statement .)
  ! reduce/reduce conflict for UNTIL resolved using rule 37 (statement -> compound_statement_semicolon statement .)
    END             reduce using rule 37 (statement -> compound_statement_semicolon statement .)
    ID              reduce using rule 37 (statement -> compound_statement_semicolon statement .)
    CASE            reduce using rule 37 (statement -> compound_statement_semicolon statement .)
    WHILE           reduce using rule 37 (statement -> compound_statement_semicolon statement .)
    REPEAT          reduce using rule 37 (statement -> compound_statement_semicolon statement .)
    FOR             reduce using rule 37 (statement -> compound_statement_semicolon statement .)
    BEGIN           reduce using rule 37 (statement -> compound_statement_semicolon statement .)
    IF              reduce using rule 37 (statement -> compound_statement_semicolon statement .)
    ELSE            reduce using rule 37 (statement -> compound_statement_semicolon statement .)
    INTEGER         reduce using rule 37 (statement -> compound_statement_semicolon statement .)
    REAL            reduce using rule 37 (statement -> compound_statement_semicolon statement .)
    UNTIL           reduce using rule 37 (statement -> compound_statement_semicolon statement .)

  ! END             [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! ID              [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! CASE            [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! WHILE           [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! REPEAT          [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! FOR             [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! BEGIN           [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! IF              [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! ELSE            [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! INTEGER         [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! REAL            [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! UNTIL           [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! END             [ reduce using rule 60 (for_statement -> statement .) ]
  ! ID              [ reduce using rule 60 (for_statement -> statement .) ]
  ! CASE            [ reduce using rule 60 (for_statement -> statement .) ]
  ! WHILE           [ reduce using rule 60 (for_statement -> statement .) ]
  ! REPEAT          [ reduce using rule 60 (for_statement -> statement .) ]
  ! FOR             [ reduce using rule 60 (for_statement -> statement .) ]
  ! BEGIN           [ reduce using rule 60 (for_statement -> statement .) ]
  ! IF              [ reduce using rule 60 (for_statement -> statement .) ]
  ! ELSE            [ reduce using rule 60 (for_statement -> statement .) ]
  ! INTEGER         [ reduce using rule 60 (for_statement -> statement .) ]
  ! REAL            [ reduce using rule 60 (for_statement -> statement .) ]
  ! UNTIL           [ reduce using rule 60 (for_statement -> statement .) ]


state 73

    (39) assign_statement -> ID ASSIGNMENT . expr SEMICOLON
    (63) expr -> . simple_expr relop_simple_expr
    (72) simple_expr -> . uplus_uminus factor
    (73) simple_expr -> . uplus_uminus factor addop_mulop factor simple_expr
    (74) uplus_uminus -> . UPLUS
    (75) uplus_uminus -> . UMINUS
    (76) uplus_uminus -> .

  ! shift/reduce conflict for UPLUS resolved as shift
  ! shift/reduce conflict for UMINUS resolved as shift
    UPLUS           shift and go to state 79
    UMINUS          shift and go to state 80
    ID              reduce using rule 76 (uplus_uminus -> .)
    INTEGER         reduce using rule 76 (uplus_uminus -> .)
    REAL            reduce using rule 76 (uplus_uminus -> .)
    STRING          reduce using rule 76 (uplus_uminus -> .)
    NOT             reduce using rule 76 (uplus_uminus -> .)
    PLUS            reduce using rule 76 (uplus_uminus -> .)
    MINUS           reduce using rule 76 (uplus_uminus -> .)
    OR              reduce using rule 76 (uplus_uminus -> .)
    TIMES           reduce using rule 76 (uplus_uminus -> .)
    DIVIDE          reduce using rule 76 (uplus_uminus -> .)
    DIV             reduce using rule 76 (uplus_uminus -> .)
    MOD             reduce using rule 76 (uplus_uminus -> .)
    AND             reduce using rule 76 (uplus_uminus -> .)
    EQUALS          reduce using rule 76 (uplus_uminus -> .)
    LTHAN           reduce using rule 76 (uplus_uminus -> .)
    GTHAN           reduce using rule 76 (uplus_uminus -> .)
    DIFFERENT       reduce using rule 76 (uplus_uminus -> .)
    GEQUALS         reduce using rule 76 (uplus_uminus -> .)
    LEQUALS         reduce using rule 76 (uplus_uminus -> .)
    SEMICOLON       reduce using rule 76 (uplus_uminus -> .)

  ! UPLUS           [ reduce using rule 76 (uplus_uminus -> .) ]
  ! UMINUS          [ reduce using rule 76 (uplus_uminus -> .) ]

    expr                           shift and go to state 97
    simple_expr                    shift and go to state 77
    uplus_uminus                   shift and go to state 78

state 74

    (40) procedure_call -> ID LPARENT . expr_list RPARENT SEMICOLON
    (61) expr_list -> . expr
    (62) expr_list -> . expr COMMA expr_list
    (63) expr -> . simple_expr relop_simple_expr
    (72) simple_expr -> . uplus_uminus factor
    (73) simple_expr -> . uplus_uminus factor addop_mulop factor simple_expr
    (74) uplus_uminus -> . UPLUS
    (75) uplus_uminus -> . UMINUS
    (76) uplus_uminus -> .

  ! shift/reduce conflict for UPLUS resolved as shift
  ! shift/reduce conflict for UMINUS resolved as shift
    UPLUS           shift and go to state 79
    UMINUS          shift and go to state 80
    ID              reduce using rule 76 (uplus_uminus -> .)
    INTEGER         reduce using rule 76 (uplus_uminus -> .)
    REAL            reduce using rule 76 (uplus_uminus -> .)
    STRING          reduce using rule 76 (uplus_uminus -> .)
    NOT             reduce using rule 76 (uplus_uminus -> .)
    PLUS            reduce using rule 76 (uplus_uminus -> .)
    MINUS           reduce using rule 76 (uplus_uminus -> .)
    OR              reduce using rule 76 (uplus_uminus -> .)
    TIMES           reduce using rule 76 (uplus_uminus -> .)
    DIVIDE          reduce using rule 76 (uplus_uminus -> .)
    DIV             reduce using rule 76 (uplus_uminus -> .)
    MOD             reduce using rule 76 (uplus_uminus -> .)
    AND             reduce using rule 76 (uplus_uminus -> .)
    EQUALS          reduce using rule 76 (uplus_uminus -> .)
    LTHAN           reduce using rule 76 (uplus_uminus -> .)
    GTHAN           reduce using rule 76 (uplus_uminus -> .)
    DIFFERENT       reduce using rule 76 (uplus_uminus -> .)
    GEQUALS         reduce using rule 76 (uplus_uminus -> .)
    LEQUALS         reduce using rule 76 (uplus_uminus -> .)
    COMMA           reduce using rule 76 (uplus_uminus -> .)
    RPARENT         reduce using rule 76 (uplus_uminus -> .)

  ! UPLUS           [ reduce using rule 76 (uplus_uminus -> .) ]
  ! UMINUS          [ reduce using rule 76 (uplus_uminus -> .) ]

    expr_list                      shift and go to state 98
    expr                           shift and go to state 85
    simple_expr                    shift and go to state 77
    uplus_uminus                   shift and go to state 78

state 75

    (55) case -> ID TWOPOINTS . statement
    (30) statement -> . assign_statement statement
    (31) statement -> . procedure_call statement
    (32) statement -> . if_statement statement
    (33) statement -> . case_statement statement
    (34) statement -> . while_statement statement
    (35) statement -> . repeat_statement statement
    (36) statement -> . for_statement statement
    (37) statement -> . compound_statement_semicolon statement
    (38) statement -> .
    (39) assign_statement -> . ID ASSIGNMENT expr SEMICOLON
    (40) procedure_call -> . ID LPARENT expr_list RPARENT SEMICOLON
    (41) if_statement -> . if1
    (42) if_statement -> . if2
    (43) if_statement -> .
    (51) case_statement -> . CASE expr OF case END SEMICOLON
    (52) case_statement -> . case
    (56) while_statement -> . WHILE expr DO statement
    (57) repeat_statement -> . REPEAT statement UNTIL expr SEMICOLON
    (58) repeat_statement -> . statement
    (59) for_statement -> . FOR ID ASSIGNMENT expr TO expr DO
    (60) for_statement -> . statement
    (29) compound_statement_semicolon -> . BEGIN statement END SEMICOLON
    (44) if1 -> . IF expr_list THEN if1
    (45) if1 -> . IF expr_list THEN if2
    (46) if1 -> . ELSE if1
    (47) if1 -> .
    (48) if2 -> . IF expr_list THEN if2
    (49) if2 -> . ELSE if2
    (50) if2 -> .
    (53) case -> . INTEGER TWOPOINTS statement
    (54) case -> . REAL TWOPOINTS statement
    (55) case -> . ID TWOPOINTS statement

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! reduce/reduce conflict for CASE resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REPEAT resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for FOR resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for BEGIN resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for IF resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for INTEGER resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REAL resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for END resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for UNTIL resolved using rule 38 (statement -> .)
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! reduce/reduce conflict for INTEGER resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REAL resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for END resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for UNTIL resolved using rule 38 (statement -> .)
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! reduce/reduce conflict for INTEGER resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REAL resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for END resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for UNTIL resolved using rule 38 (statement -> .)
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for REAL resolved as shift
    END             reduce using rule 38 (statement -> .)
    UNTIL           reduce using rule 38 (statement -> .)
    ID              shift and go to state 46
    CASE            shift and go to state 49
    WHILE           shift and go to state 51
    REPEAT          shift and go to state 52
    FOR             shift and go to state 53
    BEGIN           shift and go to state 36
    IF              shift and go to state 54
    ELSE            shift and go to state 55
    INTEGER         shift and go to state 56
    REAL            shift and go to state 57

  ! ID              [ reduce using rule 38 (statement -> .) ]
  ! CASE            [ reduce using rule 38 (statement -> .) ]
  ! WHILE           [ reduce using rule 38 (statement -> .) ]
  ! REPEAT          [ reduce using rule 38 (statement -> .) ]
  ! FOR             [ reduce using rule 38 (statement -> .) ]
  ! BEGIN           [ reduce using rule 38 (statement -> .) ]
  ! IF              [ reduce using rule 38 (statement -> .) ]
  ! ELSE            [ reduce using rule 38 (statement -> .) ]
  ! INTEGER         [ reduce using rule 38 (statement -> .) ]
  ! REAL            [ reduce using rule 38 (statement -> .) ]
  ! ID              [ reduce using rule 43 (if_statement -> .) ]
  ! CASE            [ reduce using rule 43 (if_statement -> .) ]
  ! WHILE           [ reduce using rule 43 (if_statement -> .) ]
  ! REPEAT          [ reduce using rule 43 (if_statement -> .) ]
  ! FOR             [ reduce using rule 43 (if_statement -> .) ]
  ! BEGIN           [ reduce using rule 43 (if_statement -> .) ]
  ! IF              [ reduce using rule 43 (if_statement -> .) ]
  ! ELSE            [ reduce using rule 43 (if_statement -> .) ]
  ! INTEGER         [ reduce using rule 43 (if_statement -> .) ]
  ! REAL            [ reduce using rule 43 (if_statement -> .) ]
  ! END             [ reduce using rule 43 (if_statement -> .) ]
  ! UNTIL           [ reduce using rule 43 (if_statement -> .) ]
  ! ID              [ reduce using rule 47 (if1 -> .) ]
  ! CASE            [ reduce using rule 47 (if1 -> .) ]
  ! WHILE           [ reduce using rule 47 (if1 -> .) ]
  ! REPEAT          [ reduce using rule 47 (if1 -> .) ]
  ! FOR             [ reduce using rule 47 (if1 -> .) ]
  ! BEGIN           [ reduce using rule 47 (if1 -> .) ]
  ! IF              [ reduce using rule 47 (if1 -> .) ]
  ! ELSE            [ reduce using rule 47 (if1 -> .) ]
  ! INTEGER         [ reduce using rule 47 (if1 -> .) ]
  ! REAL            [ reduce using rule 47 (if1 -> .) ]
  ! END             [ reduce using rule 47 (if1 -> .) ]
  ! UNTIL           [ reduce using rule 47 (if1 -> .) ]
  ! ID              [ reduce using rule 50 (if2 -> .) ]
  ! CASE            [ reduce using rule 50 (if2 -> .) ]
  ! WHILE           [ reduce using rule 50 (if2 -> .) ]
  ! REPEAT          [ reduce using rule 50 (if2 -> .) ]
  ! FOR             [ reduce using rule 50 (if2 -> .) ]
  ! BEGIN           [ reduce using rule 50 (if2 -> .) ]
  ! IF              [ reduce using rule 50 (if2 -> .) ]
  ! ELSE            [ reduce using rule 50 (if2 -> .) ]
  ! INTEGER         [ reduce using rule 50 (if2 -> .) ]
  ! REAL            [ reduce using rule 50 (if2 -> .) ]
  ! END             [ reduce using rule 50 (if2 -> .) ]
  ! UNTIL           [ reduce using rule 50 (if2 -> .) ]

    statement                      shift and go to state 99
    assign_statement               shift and go to state 38
    procedure_call                 shift and go to state 39
    if_statement                   shift and go to state 40
    case_statement                 shift and go to state 41
    while_statement                shift and go to state 42
    repeat_statement               shift and go to state 43
    for_statement                  shift and go to state 44
    compound_statement_semicolon   shift and go to state 45
    if1                            shift and go to state 47
    if2                            shift and go to state 48
    case                           shift and go to state 50

state 76

    (51) case_statement -> CASE expr . OF case END SEMICOLON

    OF              shift and go to state 100


state 77

    (63) expr -> simple_expr . relop_simple_expr
    (64) relop_simple_expr -> . relop simple_expr relop_simple_expr
    (65) relop_simple_expr -> .
    (66) relop -> . EQUALS
    (67) relop -> . LTHAN
    (68) relop -> . GTHAN
    (69) relop -> . DIFFERENT
    (70) relop -> . GEQUALS
    (71) relop -> . LEQUALS

    OF              reduce using rule 65 (relop_simple_expr -> .)
    DO              reduce using rule 65 (relop_simple_expr -> .)
    COMMA           reduce using rule 65 (relop_simple_expr -> .)
    THEN            reduce using rule 65 (relop_simple_expr -> .)
    SEMICOLON       reduce using rule 65 (relop_simple_expr -> .)
    RPARENT         reduce using rule 65 (relop_simple_expr -> .)
    TO              reduce using rule 65 (relop_simple_expr -> .)
    EQUALS          shift and go to state 103
    LTHAN           shift and go to state 104
    GTHAN           shift and go to state 105
    DIFFERENT       shift and go to state 106
    GEQUALS         shift and go to state 107
    LEQUALS         shift and go to state 108

    relop_simple_expr              shift and go to state 101
    relop                          shift and go to state 102

state 78

    (72) simple_expr -> uplus_uminus . factor
    (73) simple_expr -> uplus_uminus . factor addop_mulop factor simple_expr
    (86) factor -> . ID
    (87) factor -> . INTEGER
    (88) factor -> . REAL
    (89) factor -> . STRING
    (90) factor -> . NOT factor
    (91) factor -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for REAL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    ID              shift and go to state 110
    INTEGER         shift and go to state 111
    REAL            shift and go to state 112
    STRING          shift and go to state 113
    NOT             shift and go to state 114
    PLUS            reduce using rule 91 (factor -> .)
    MINUS           reduce using rule 91 (factor -> .)
    OR              reduce using rule 91 (factor -> .)
    TIMES           reduce using rule 91 (factor -> .)
    DIVIDE          reduce using rule 91 (factor -> .)
    DIV             reduce using rule 91 (factor -> .)
    MOD             reduce using rule 91 (factor -> .)
    AND             reduce using rule 91 (factor -> .)
    UPLUS           reduce using rule 91 (factor -> .)
    UMINUS          reduce using rule 91 (factor -> .)
    EQUALS          reduce using rule 91 (factor -> .)
    LTHAN           reduce using rule 91 (factor -> .)
    GTHAN           reduce using rule 91 (factor -> .)
    DIFFERENT       reduce using rule 91 (factor -> .)
    GEQUALS         reduce using rule 91 (factor -> .)
    LEQUALS         reduce using rule 91 (factor -> .)
    OF              reduce using rule 91 (factor -> .)
    DO              reduce using rule 91 (factor -> .)
    COMMA           reduce using rule 91 (factor -> .)
    THEN            reduce using rule 91 (factor -> .)
    SEMICOLON       reduce using rule 91 (factor -> .)
    RPARENT         reduce using rule 91 (factor -> .)
    TO              reduce using rule 91 (factor -> .)

  ! ID              [ reduce using rule 91 (factor -> .) ]
  ! INTEGER         [ reduce using rule 91 (factor -> .) ]
  ! REAL            [ reduce using rule 91 (factor -> .) ]
  ! STRING          [ reduce using rule 91 (factor -> .) ]
  ! NOT             [ reduce using rule 91 (factor -> .) ]

    factor                         shift and go to state 109

state 79

    (74) uplus_uminus -> UPLUS .

    ID              reduce using rule 74 (uplus_uminus -> UPLUS .)
    INTEGER         reduce using rule 74 (uplus_uminus -> UPLUS .)
    REAL            reduce using rule 74 (uplus_uminus -> UPLUS .)
    STRING          reduce using rule 74 (uplus_uminus -> UPLUS .)
    NOT             reduce using rule 74 (uplus_uminus -> UPLUS .)
    PLUS            reduce using rule 74 (uplus_uminus -> UPLUS .)
    MINUS           reduce using rule 74 (uplus_uminus -> UPLUS .)
    OR              reduce using rule 74 (uplus_uminus -> UPLUS .)
    TIMES           reduce using rule 74 (uplus_uminus -> UPLUS .)
    DIVIDE          reduce using rule 74 (uplus_uminus -> UPLUS .)
    DIV             reduce using rule 74 (uplus_uminus -> UPLUS .)
    MOD             reduce using rule 74 (uplus_uminus -> UPLUS .)
    AND             reduce using rule 74 (uplus_uminus -> UPLUS .)
    UPLUS           reduce using rule 74 (uplus_uminus -> UPLUS .)
    UMINUS          reduce using rule 74 (uplus_uminus -> UPLUS .)
    EQUALS          reduce using rule 74 (uplus_uminus -> UPLUS .)
    LTHAN           reduce using rule 74 (uplus_uminus -> UPLUS .)
    GTHAN           reduce using rule 74 (uplus_uminus -> UPLUS .)
    DIFFERENT       reduce using rule 74 (uplus_uminus -> UPLUS .)
    GEQUALS         reduce using rule 74 (uplus_uminus -> UPLUS .)
    LEQUALS         reduce using rule 74 (uplus_uminus -> UPLUS .)
    OF              reduce using rule 74 (uplus_uminus -> UPLUS .)
    DO              reduce using rule 74 (uplus_uminus -> UPLUS .)
    COMMA           reduce using rule 74 (uplus_uminus -> UPLUS .)
    THEN            reduce using rule 74 (uplus_uminus -> UPLUS .)
    SEMICOLON       reduce using rule 74 (uplus_uminus -> UPLUS .)
    RPARENT         reduce using rule 74 (uplus_uminus -> UPLUS .)
    TO              reduce using rule 74 (uplus_uminus -> UPLUS .)


state 80

    (75) uplus_uminus -> UMINUS .

    ID              reduce using rule 75 (uplus_uminus -> UMINUS .)
    INTEGER         reduce using rule 75 (uplus_uminus -> UMINUS .)
    REAL            reduce using rule 75 (uplus_uminus -> UMINUS .)
    STRING          reduce using rule 75 (uplus_uminus -> UMINUS .)
    NOT             reduce using rule 75 (uplus_uminus -> UMINUS .)
    PLUS            reduce using rule 75 (uplus_uminus -> UMINUS .)
    MINUS           reduce using rule 75 (uplus_uminus -> UMINUS .)
    OR              reduce using rule 75 (uplus_uminus -> UMINUS .)
    TIMES           reduce using rule 75 (uplus_uminus -> UMINUS .)
    DIVIDE          reduce using rule 75 (uplus_uminus -> UMINUS .)
    DIV             reduce using rule 75 (uplus_uminus -> UMINUS .)
    MOD             reduce using rule 75 (uplus_uminus -> UMINUS .)
    AND             reduce using rule 75 (uplus_uminus -> UMINUS .)
    UPLUS           reduce using rule 75 (uplus_uminus -> UMINUS .)
    UMINUS          reduce using rule 75 (uplus_uminus -> UMINUS .)
    EQUALS          reduce using rule 75 (uplus_uminus -> UMINUS .)
    LTHAN           reduce using rule 75 (uplus_uminus -> UMINUS .)
    GTHAN           reduce using rule 75 (uplus_uminus -> UMINUS .)
    DIFFERENT       reduce using rule 75 (uplus_uminus -> UMINUS .)
    GEQUALS         reduce using rule 75 (uplus_uminus -> UMINUS .)
    LEQUALS         reduce using rule 75 (uplus_uminus -> UMINUS .)
    OF              reduce using rule 75 (uplus_uminus -> UMINUS .)
    DO              reduce using rule 75 (uplus_uminus -> UMINUS .)
    COMMA           reduce using rule 75 (uplus_uminus -> UMINUS .)
    THEN            reduce using rule 75 (uplus_uminus -> UMINUS .)
    SEMICOLON       reduce using rule 75 (uplus_uminus -> UMINUS .)
    RPARENT         reduce using rule 75 (uplus_uminus -> UMINUS .)
    TO              reduce using rule 75 (uplus_uminus -> UMINUS .)


state 81

    (56) while_statement -> WHILE expr . DO statement

    DO              shift and go to state 115


state 82

    (57) repeat_statement -> REPEAT statement . UNTIL expr SEMICOLON
    (58) repeat_statement -> statement .
    (60) for_statement -> statement .

  ! shift/reduce conflict for UNTIL resolved as shift
  ! shift/reduce conflict for UNTIL resolved as shift
  ! reduce/reduce conflict for ID resolved using rule 58 (repeat_statement -> statement .)
  ! reduce/reduce conflict for CASE resolved using rule 58 (repeat_statement -> statement .)
  ! reduce/reduce conflict for WHILE resolved using rule 58 (repeat_statement -> statement .)
  ! reduce/reduce conflict for REPEAT resolved using rule 58 (repeat_statement -> statement .)
  ! reduce/reduce conflict for FOR resolved using rule 58 (repeat_statement -> statement .)
  ! reduce/reduce conflict for BEGIN resolved using rule 58 (repeat_statement -> statement .)
  ! reduce/reduce conflict for IF resolved using rule 58 (repeat_statement -> statement .)
  ! reduce/reduce conflict for ELSE resolved using rule 58 (repeat_statement -> statement .)
  ! reduce/reduce conflict for INTEGER resolved using rule 58 (repeat_statement -> statement .)
  ! reduce/reduce conflict for REAL resolved using rule 58 (repeat_statement -> statement .)
    UNTIL           shift and go to state 116
    ID              reduce using rule 58 (repeat_statement -> statement .)
    CASE            reduce using rule 58 (repeat_statement -> statement .)
    WHILE           reduce using rule 58 (repeat_statement -> statement .)
    REPEAT          reduce using rule 58 (repeat_statement -> statement .)
    FOR             reduce using rule 58 (repeat_statement -> statement .)
    BEGIN           reduce using rule 58 (repeat_statement -> statement .)
    IF              reduce using rule 58 (repeat_statement -> statement .)
    ELSE            reduce using rule 58 (repeat_statement -> statement .)
    INTEGER         reduce using rule 58 (repeat_statement -> statement .)
    REAL            reduce using rule 58 (repeat_statement -> statement .)

  ! UNTIL           [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! UNTIL           [ reduce using rule 60 (for_statement -> statement .) ]
  ! ID              [ reduce using rule 60 (for_statement -> statement .) ]
  ! CASE            [ reduce using rule 60 (for_statement -> statement .) ]
  ! WHILE           [ reduce using rule 60 (for_statement -> statement .) ]
  ! REPEAT          [ reduce using rule 60 (for_statement -> statement .) ]
  ! FOR             [ reduce using rule 60 (for_statement -> statement .) ]
  ! BEGIN           [ reduce using rule 60 (for_statement -> statement .) ]
  ! IF              [ reduce using rule 60 (for_statement -> statement .) ]
  ! ELSE            [ reduce using rule 60 (for_statement -> statement .) ]
  ! INTEGER         [ reduce using rule 60 (for_statement -> statement .) ]
  ! REAL            [ reduce using rule 60 (for_statement -> statement .) ]


state 83

    (59) for_statement -> FOR ID . ASSIGNMENT expr TO expr DO

    ASSIGNMENT      shift and go to state 117


state 84

    (44) if1 -> IF expr_list . THEN if1
    (45) if1 -> IF expr_list . THEN if2
    (48) if2 -> IF expr_list . THEN if2

    THEN            shift and go to state 118


state 85

    (61) expr_list -> expr .
    (62) expr_list -> expr . COMMA expr_list

    THEN            reduce using rule 61 (expr_list -> expr .)
    RPARENT         reduce using rule 61 (expr_list -> expr .)
    COMMA           shift and go to state 119


state 86

    (46) if1 -> ELSE if1 .

    ID              reduce using rule 46 (if1 -> ELSE if1 .)
    CASE            reduce using rule 46 (if1 -> ELSE if1 .)
    WHILE           reduce using rule 46 (if1 -> ELSE if1 .)
    REPEAT          reduce using rule 46 (if1 -> ELSE if1 .)
    FOR             reduce using rule 46 (if1 -> ELSE if1 .)
    BEGIN           reduce using rule 46 (if1 -> ELSE if1 .)
    IF              reduce using rule 46 (if1 -> ELSE if1 .)
    ELSE            reduce using rule 46 (if1 -> ELSE if1 .)
    INTEGER         reduce using rule 46 (if1 -> ELSE if1 .)
    REAL            reduce using rule 46 (if1 -> ELSE if1 .)
    END             reduce using rule 46 (if1 -> ELSE if1 .)
    UNTIL           reduce using rule 46 (if1 -> ELSE if1 .)


state 87

    (49) if2 -> ELSE if2 .

    ID              reduce using rule 49 (if2 -> ELSE if2 .)
    CASE            reduce using rule 49 (if2 -> ELSE if2 .)
    WHILE           reduce using rule 49 (if2 -> ELSE if2 .)
    REPEAT          reduce using rule 49 (if2 -> ELSE if2 .)
    FOR             reduce using rule 49 (if2 -> ELSE if2 .)
    BEGIN           reduce using rule 49 (if2 -> ELSE if2 .)
    IF              reduce using rule 49 (if2 -> ELSE if2 .)
    ELSE            reduce using rule 49 (if2 -> ELSE if2 .)
    INTEGER         reduce using rule 49 (if2 -> ELSE if2 .)
    REAL            reduce using rule 49 (if2 -> ELSE if2 .)
    END             reduce using rule 49 (if2 -> ELSE if2 .)
    UNTIL           reduce using rule 49 (if2 -> ELSE if2 .)


state 88

    (53) case -> INTEGER TWOPOINTS . statement
    (30) statement -> . assign_statement statement
    (31) statement -> . procedure_call statement
    (32) statement -> . if_statement statement
    (33) statement -> . case_statement statement
    (34) statement -> . while_statement statement
    (35) statement -> . repeat_statement statement
    (36) statement -> . for_statement statement
    (37) statement -> . compound_statement_semicolon statement
    (38) statement -> .
    (39) assign_statement -> . ID ASSIGNMENT expr SEMICOLON
    (40) procedure_call -> . ID LPARENT expr_list RPARENT SEMICOLON
    (41) if_statement -> . if1
    (42) if_statement -> . if2
    (43) if_statement -> .
    (51) case_statement -> . CASE expr OF case END SEMICOLON
    (52) case_statement -> . case
    (56) while_statement -> . WHILE expr DO statement
    (57) repeat_statement -> . REPEAT statement UNTIL expr SEMICOLON
    (58) repeat_statement -> . statement
    (59) for_statement -> . FOR ID ASSIGNMENT expr TO expr DO
    (60) for_statement -> . statement
    (29) compound_statement_semicolon -> . BEGIN statement END SEMICOLON
    (44) if1 -> . IF expr_list THEN if1
    (45) if1 -> . IF expr_list THEN if2
    (46) if1 -> . ELSE if1
    (47) if1 -> .
    (48) if2 -> . IF expr_list THEN if2
    (49) if2 -> . ELSE if2
    (50) if2 -> .
    (53) case -> . INTEGER TWOPOINTS statement
    (54) case -> . REAL TWOPOINTS statement
    (55) case -> . ID TWOPOINTS statement

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! reduce/reduce conflict for CASE resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REPEAT resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for FOR resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for BEGIN resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for IF resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for INTEGER resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REAL resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for END resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for UNTIL resolved using rule 38 (statement -> .)
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! reduce/reduce conflict for INTEGER resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REAL resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for END resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for UNTIL resolved using rule 38 (statement -> .)
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! reduce/reduce conflict for INTEGER resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REAL resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for END resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for UNTIL resolved using rule 38 (statement -> .)
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for REAL resolved as shift
    END             reduce using rule 38 (statement -> .)
    UNTIL           reduce using rule 38 (statement -> .)
    ID              shift and go to state 46
    CASE            shift and go to state 49
    WHILE           shift and go to state 51
    REPEAT          shift and go to state 52
    FOR             shift and go to state 53
    BEGIN           shift and go to state 36
    IF              shift and go to state 54
    ELSE            shift and go to state 55
    INTEGER         shift and go to state 56
    REAL            shift and go to state 57

  ! ID              [ reduce using rule 38 (statement -> .) ]
  ! CASE            [ reduce using rule 38 (statement -> .) ]
  ! WHILE           [ reduce using rule 38 (statement -> .) ]
  ! REPEAT          [ reduce using rule 38 (statement -> .) ]
  ! FOR             [ reduce using rule 38 (statement -> .) ]
  ! BEGIN           [ reduce using rule 38 (statement -> .) ]
  ! IF              [ reduce using rule 38 (statement -> .) ]
  ! ELSE            [ reduce using rule 38 (statement -> .) ]
  ! INTEGER         [ reduce using rule 38 (statement -> .) ]
  ! REAL            [ reduce using rule 38 (statement -> .) ]
  ! ID              [ reduce using rule 43 (if_statement -> .) ]
  ! CASE            [ reduce using rule 43 (if_statement -> .) ]
  ! WHILE           [ reduce using rule 43 (if_statement -> .) ]
  ! REPEAT          [ reduce using rule 43 (if_statement -> .) ]
  ! FOR             [ reduce using rule 43 (if_statement -> .) ]
  ! BEGIN           [ reduce using rule 43 (if_statement -> .) ]
  ! IF              [ reduce using rule 43 (if_statement -> .) ]
  ! ELSE            [ reduce using rule 43 (if_statement -> .) ]
  ! INTEGER         [ reduce using rule 43 (if_statement -> .) ]
  ! REAL            [ reduce using rule 43 (if_statement -> .) ]
  ! END             [ reduce using rule 43 (if_statement -> .) ]
  ! UNTIL           [ reduce using rule 43 (if_statement -> .) ]
  ! ID              [ reduce using rule 47 (if1 -> .) ]
  ! CASE            [ reduce using rule 47 (if1 -> .) ]
  ! WHILE           [ reduce using rule 47 (if1 -> .) ]
  ! REPEAT          [ reduce using rule 47 (if1 -> .) ]
  ! FOR             [ reduce using rule 47 (if1 -> .) ]
  ! BEGIN           [ reduce using rule 47 (if1 -> .) ]
  ! IF              [ reduce using rule 47 (if1 -> .) ]
  ! ELSE            [ reduce using rule 47 (if1 -> .) ]
  ! INTEGER         [ reduce using rule 47 (if1 -> .) ]
  ! REAL            [ reduce using rule 47 (if1 -> .) ]
  ! END             [ reduce using rule 47 (if1 -> .) ]
  ! UNTIL           [ reduce using rule 47 (if1 -> .) ]
  ! ID              [ reduce using rule 50 (if2 -> .) ]
  ! CASE            [ reduce using rule 50 (if2 -> .) ]
  ! WHILE           [ reduce using rule 50 (if2 -> .) ]
  ! REPEAT          [ reduce using rule 50 (if2 -> .) ]
  ! FOR             [ reduce using rule 50 (if2 -> .) ]
  ! BEGIN           [ reduce using rule 50 (if2 -> .) ]
  ! IF              [ reduce using rule 50 (if2 -> .) ]
  ! ELSE            [ reduce using rule 50 (if2 -> .) ]
  ! INTEGER         [ reduce using rule 50 (if2 -> .) ]
  ! REAL            [ reduce using rule 50 (if2 -> .) ]
  ! END             [ reduce using rule 50 (if2 -> .) ]
  ! UNTIL           [ reduce using rule 50 (if2 -> .) ]

    statement                      shift and go to state 120
    assign_statement               shift and go to state 38
    procedure_call                 shift and go to state 39
    if_statement                   shift and go to state 40
    case_statement                 shift and go to state 41
    while_statement                shift and go to state 42
    repeat_statement               shift and go to state 43
    for_statement                  shift and go to state 44
    compound_statement_semicolon   shift and go to state 45
    if1                            shift and go to state 47
    if2                            shift and go to state 48
    case                           shift and go to state 50

state 89

    (54) case -> REAL TWOPOINTS . statement
    (30) statement -> . assign_statement statement
    (31) statement -> . procedure_call statement
    (32) statement -> . if_statement statement
    (33) statement -> . case_statement statement
    (34) statement -> . while_statement statement
    (35) statement -> . repeat_statement statement
    (36) statement -> . for_statement statement
    (37) statement -> . compound_statement_semicolon statement
    (38) statement -> .
    (39) assign_statement -> . ID ASSIGNMENT expr SEMICOLON
    (40) procedure_call -> . ID LPARENT expr_list RPARENT SEMICOLON
    (41) if_statement -> . if1
    (42) if_statement -> . if2
    (43) if_statement -> .
    (51) case_statement -> . CASE expr OF case END SEMICOLON
    (52) case_statement -> . case
    (56) while_statement -> . WHILE expr DO statement
    (57) repeat_statement -> . REPEAT statement UNTIL expr SEMICOLON
    (58) repeat_statement -> . statement
    (59) for_statement -> . FOR ID ASSIGNMENT expr TO expr DO
    (60) for_statement -> . statement
    (29) compound_statement_semicolon -> . BEGIN statement END SEMICOLON
    (44) if1 -> . IF expr_list THEN if1
    (45) if1 -> . IF expr_list THEN if2
    (46) if1 -> . ELSE if1
    (47) if1 -> .
    (48) if2 -> . IF expr_list THEN if2
    (49) if2 -> . ELSE if2
    (50) if2 -> .
    (53) case -> . INTEGER TWOPOINTS statement
    (54) case -> . REAL TWOPOINTS statement
    (55) case -> . ID TWOPOINTS statement

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! reduce/reduce conflict for CASE resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REPEAT resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for FOR resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for BEGIN resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for IF resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for INTEGER resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REAL resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for END resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for UNTIL resolved using rule 38 (statement -> .)
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! reduce/reduce conflict for INTEGER resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REAL resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for END resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for UNTIL resolved using rule 38 (statement -> .)
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! reduce/reduce conflict for INTEGER resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REAL resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for END resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for UNTIL resolved using rule 38 (statement -> .)
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for REAL resolved as shift
    END             reduce using rule 38 (statement -> .)
    UNTIL           reduce using rule 38 (statement -> .)
    ID              shift and go to state 46
    CASE            shift and go to state 49
    WHILE           shift and go to state 51
    REPEAT          shift and go to state 52
    FOR             shift and go to state 53
    BEGIN           shift and go to state 36
    IF              shift and go to state 54
    ELSE            shift and go to state 55
    INTEGER         shift and go to state 56
    REAL            shift and go to state 57

  ! ID              [ reduce using rule 38 (statement -> .) ]
  ! CASE            [ reduce using rule 38 (statement -> .) ]
  ! WHILE           [ reduce using rule 38 (statement -> .) ]
  ! REPEAT          [ reduce using rule 38 (statement -> .) ]
  ! FOR             [ reduce using rule 38 (statement -> .) ]
  ! BEGIN           [ reduce using rule 38 (statement -> .) ]
  ! IF              [ reduce using rule 38 (statement -> .) ]
  ! ELSE            [ reduce using rule 38 (statement -> .) ]
  ! INTEGER         [ reduce using rule 38 (statement -> .) ]
  ! REAL            [ reduce using rule 38 (statement -> .) ]
  ! ID              [ reduce using rule 43 (if_statement -> .) ]
  ! CASE            [ reduce using rule 43 (if_statement -> .) ]
  ! WHILE           [ reduce using rule 43 (if_statement -> .) ]
  ! REPEAT          [ reduce using rule 43 (if_statement -> .) ]
  ! FOR             [ reduce using rule 43 (if_statement -> .) ]
  ! BEGIN           [ reduce using rule 43 (if_statement -> .) ]
  ! IF              [ reduce using rule 43 (if_statement -> .) ]
  ! ELSE            [ reduce using rule 43 (if_statement -> .) ]
  ! INTEGER         [ reduce using rule 43 (if_statement -> .) ]
  ! REAL            [ reduce using rule 43 (if_statement -> .) ]
  ! END             [ reduce using rule 43 (if_statement -> .) ]
  ! UNTIL           [ reduce using rule 43 (if_statement -> .) ]
  ! ID              [ reduce using rule 47 (if1 -> .) ]
  ! CASE            [ reduce using rule 47 (if1 -> .) ]
  ! WHILE           [ reduce using rule 47 (if1 -> .) ]
  ! REPEAT          [ reduce using rule 47 (if1 -> .) ]
  ! FOR             [ reduce using rule 47 (if1 -> .) ]
  ! BEGIN           [ reduce using rule 47 (if1 -> .) ]
  ! IF              [ reduce using rule 47 (if1 -> .) ]
  ! ELSE            [ reduce using rule 47 (if1 -> .) ]
  ! INTEGER         [ reduce using rule 47 (if1 -> .) ]
  ! REAL            [ reduce using rule 47 (if1 -> .) ]
  ! END             [ reduce using rule 47 (if1 -> .) ]
  ! UNTIL           [ reduce using rule 47 (if1 -> .) ]
  ! ID              [ reduce using rule 50 (if2 -> .) ]
  ! CASE            [ reduce using rule 50 (if2 -> .) ]
  ! WHILE           [ reduce using rule 50 (if2 -> .) ]
  ! REPEAT          [ reduce using rule 50 (if2 -> .) ]
  ! FOR             [ reduce using rule 50 (if2 -> .) ]
  ! BEGIN           [ reduce using rule 50 (if2 -> .) ]
  ! IF              [ reduce using rule 50 (if2 -> .) ]
  ! ELSE            [ reduce using rule 50 (if2 -> .) ]
  ! INTEGER         [ reduce using rule 50 (if2 -> .) ]
  ! REAL            [ reduce using rule 50 (if2 -> .) ]
  ! END             [ reduce using rule 50 (if2 -> .) ]
  ! UNTIL           [ reduce using rule 50 (if2 -> .) ]

    statement                      shift and go to state 121
    assign_statement               shift and go to state 38
    procedure_call                 shift and go to state 39
    if_statement                   shift and go to state 40
    case_statement                 shift and go to state 41
    while_statement                shift and go to state 42
    repeat_statement               shift and go to state 43
    for_statement                  shift and go to state 44
    compound_statement_semicolon   shift and go to state 45
    if1                            shift and go to state 47
    if2                            shift and go to state 48
    case                           shift and go to state 50

state 90

    (23) procedure_declaration -> PROCEDURE ID LPARENT param_section . RPARENT SEMICOLON

    RPARENT         shift and go to state 122


state 91

    (25) param_section -> identifier_list . TWOPOINTS types SEMICOLON param_section

    TWOPOINTS       shift and go to state 123


state 92

    (24) function_declaration -> FUNCTION ID LPARENT param_section . RPARENT TWOPOINTS types SEMICOLON

    RPARENT         shift and go to state 124


state 93

    (10) var_declaration -> identifier_list TWOPOINTS types SEMICOLON . var_declaration
    (11) var_declaration -> identifier_list TWOPOINTS types SEMICOLON .
    (10) var_declaration -> . identifier_list TWOPOINTS types SEMICOLON var_declaration
    (11) var_declaration -> . identifier_list TWOPOINTS types SEMICOLON
    (18) identifier_list -> . ID
    (19) identifier_list -> . ID COMMA identifier_list

    PROCEDURE       reduce using rule 11 (var_declaration -> identifier_list TWOPOINTS types SEMICOLON .)
    FUNCTION        reduce using rule 11 (var_declaration -> identifier_list TWOPOINTS types SEMICOLON .)
    BEGIN           reduce using rule 11 (var_declaration -> identifier_list TWOPOINTS types SEMICOLON .)
    $end            reduce using rule 11 (var_declaration -> identifier_list TWOPOINTS types SEMICOLON .)
    ID              shift and go to state 19

    identifier_list                shift and go to state 18
    var_declaration                shift and go to state 125

state 94

    (6) const_definition -> ID EQUALS types SEMICOLON const_definition .

    VAR             reduce using rule 6 (const_definition -> ID EQUALS types SEMICOLON const_definition .)
    PROCEDURE       reduce using rule 6 (const_definition -> ID EQUALS types SEMICOLON const_definition .)
    FUNCTION        reduce using rule 6 (const_definition -> ID EQUALS types SEMICOLON const_definition .)
    BEGIN           reduce using rule 6 (const_definition -> ID EQUALS types SEMICOLON const_definition .)
    $end            reduce using rule 6 (const_definition -> ID EQUALS types SEMICOLON const_definition .)


state 95

    (29) compound_statement_semicolon -> BEGIN statement END . SEMICOLON

    SEMICOLON       shift and go to state 126


state 96

    (27) compound_statement_score -> BEGIN statement END SCORE .

    $end            reduce using rule 27 (compound_statement_score -> BEGIN statement END SCORE .)


state 97

    (39) assign_statement -> ID ASSIGNMENT expr . SEMICOLON

    SEMICOLON       shift and go to state 127


state 98

    (40) procedure_call -> ID LPARENT expr_list . RPARENT SEMICOLON

    RPARENT         shift and go to state 128


state 99

    (55) case -> ID TWOPOINTS statement .
    (58) repeat_statement -> statement .
    (60) for_statement -> statement .

  ! reduce/reduce conflict for END resolved using rule 55 (case -> ID TWOPOINTS statement .)
  ! reduce/reduce conflict for ID resolved using rule 55 (case -> ID TWOPOINTS statement .)
  ! reduce/reduce conflict for CASE resolved using rule 55 (case -> ID TWOPOINTS statement .)
  ! reduce/reduce conflict for WHILE resolved using rule 55 (case -> ID TWOPOINTS statement .)
  ! reduce/reduce conflict for REPEAT resolved using rule 55 (case -> ID TWOPOINTS statement .)
  ! reduce/reduce conflict for FOR resolved using rule 55 (case -> ID TWOPOINTS statement .)
  ! reduce/reduce conflict for BEGIN resolved using rule 55 (case -> ID TWOPOINTS statement .)
  ! reduce/reduce conflict for IF resolved using rule 55 (case -> ID TWOPOINTS statement .)
  ! reduce/reduce conflict for ELSE resolved using rule 55 (case -> ID TWOPOINTS statement .)
  ! reduce/reduce conflict for INTEGER resolved using rule 55 (case -> ID TWOPOINTS statement .)
  ! reduce/reduce conflict for REAL resolved using rule 55 (case -> ID TWOPOINTS statement .)
  ! reduce/reduce conflict for UNTIL resolved using rule 55 (case -> ID TWOPOINTS statement .)
  ! reduce/reduce conflict for END resolved using rule 55 (case -> ID TWOPOINTS statement .)
  ! reduce/reduce conflict for ID resolved using rule 55 (case -> ID TWOPOINTS statement .)
  ! reduce/reduce conflict for CASE resolved using rule 55 (case -> ID TWOPOINTS statement .)
  ! reduce/reduce conflict for WHILE resolved using rule 55 (case -> ID TWOPOINTS statement .)
  ! reduce/reduce conflict for REPEAT resolved using rule 55 (case -> ID TWOPOINTS statement .)
  ! reduce/reduce conflict for FOR resolved using rule 55 (case -> ID TWOPOINTS statement .)
  ! reduce/reduce conflict for BEGIN resolved using rule 55 (case -> ID TWOPOINTS statement .)
  ! reduce/reduce conflict for IF resolved using rule 55 (case -> ID TWOPOINTS statement .)
  ! reduce/reduce conflict for ELSE resolved using rule 55 (case -> ID TWOPOINTS statement .)
  ! reduce/reduce conflict for INTEGER resolved using rule 55 (case -> ID TWOPOINTS statement .)
  ! reduce/reduce conflict for REAL resolved using rule 55 (case -> ID TWOPOINTS statement .)
  ! reduce/reduce conflict for UNTIL resolved using rule 55 (case -> ID TWOPOINTS statement .)
    ID              reduce using rule 55 (case -> ID TWOPOINTS statement .)
    CASE            reduce using rule 55 (case -> ID TWOPOINTS statement .)
    WHILE           reduce using rule 55 (case -> ID TWOPOINTS statement .)
    REPEAT          reduce using rule 55 (case -> ID TWOPOINTS statement .)
    FOR             reduce using rule 55 (case -> ID TWOPOINTS statement .)
    BEGIN           reduce using rule 55 (case -> ID TWOPOINTS statement .)
    IF              reduce using rule 55 (case -> ID TWOPOINTS statement .)
    ELSE            reduce using rule 55 (case -> ID TWOPOINTS statement .)
    INTEGER         reduce using rule 55 (case -> ID TWOPOINTS statement .)
    REAL            reduce using rule 55 (case -> ID TWOPOINTS statement .)
    END             reduce using rule 55 (case -> ID TWOPOINTS statement .)
    UNTIL           reduce using rule 55 (case -> ID TWOPOINTS statement .)

  ! END             [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! ID              [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! CASE            [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! WHILE           [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! REPEAT          [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! FOR             [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! BEGIN           [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! IF              [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! ELSE            [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! INTEGER         [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! REAL            [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! UNTIL           [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! END             [ reduce using rule 60 (for_statement -> statement .) ]
  ! ID              [ reduce using rule 60 (for_statement -> statement .) ]
  ! CASE            [ reduce using rule 60 (for_statement -> statement .) ]
  ! WHILE           [ reduce using rule 60 (for_statement -> statement .) ]
  ! REPEAT          [ reduce using rule 60 (for_statement -> statement .) ]
  ! FOR             [ reduce using rule 60 (for_statement -> statement .) ]
  ! BEGIN           [ reduce using rule 60 (for_statement -> statement .) ]
  ! IF              [ reduce using rule 60 (for_statement -> statement .) ]
  ! ELSE            [ reduce using rule 60 (for_statement -> statement .) ]
  ! INTEGER         [ reduce using rule 60 (for_statement -> statement .) ]
  ! REAL            [ reduce using rule 60 (for_statement -> statement .) ]
  ! UNTIL           [ reduce using rule 60 (for_statement -> statement .) ]


state 100

    (51) case_statement -> CASE expr OF . case END SEMICOLON
    (53) case -> . INTEGER TWOPOINTS statement
    (54) case -> . REAL TWOPOINTS statement
    (55) case -> . ID TWOPOINTS statement

    INTEGER         shift and go to state 56
    REAL            shift and go to state 57
    ID              shift and go to state 130

    case                           shift and go to state 129

state 101

    (63) expr -> simple_expr relop_simple_expr .

    OF              reduce using rule 63 (expr -> simple_expr relop_simple_expr .)
    DO              reduce using rule 63 (expr -> simple_expr relop_simple_expr .)
    COMMA           reduce using rule 63 (expr -> simple_expr relop_simple_expr .)
    THEN            reduce using rule 63 (expr -> simple_expr relop_simple_expr .)
    SEMICOLON       reduce using rule 63 (expr -> simple_expr relop_simple_expr .)
    RPARENT         reduce using rule 63 (expr -> simple_expr relop_simple_expr .)
    TO              reduce using rule 63 (expr -> simple_expr relop_simple_expr .)


state 102

    (64) relop_simple_expr -> relop . simple_expr relop_simple_expr
    (72) simple_expr -> . uplus_uminus factor
    (73) simple_expr -> . uplus_uminus factor addop_mulop factor simple_expr
    (74) uplus_uminus -> . UPLUS
    (75) uplus_uminus -> . UMINUS
    (76) uplus_uminus -> .

  ! shift/reduce conflict for UPLUS resolved as shift
  ! shift/reduce conflict for UMINUS resolved as shift
    UPLUS           shift and go to state 79
    UMINUS          shift and go to state 80
    ID              reduce using rule 76 (uplus_uminus -> .)
    INTEGER         reduce using rule 76 (uplus_uminus -> .)
    REAL            reduce using rule 76 (uplus_uminus -> .)
    STRING          reduce using rule 76 (uplus_uminus -> .)
    NOT             reduce using rule 76 (uplus_uminus -> .)
    PLUS            reduce using rule 76 (uplus_uminus -> .)
    MINUS           reduce using rule 76 (uplus_uminus -> .)
    OR              reduce using rule 76 (uplus_uminus -> .)
    TIMES           reduce using rule 76 (uplus_uminus -> .)
    DIVIDE          reduce using rule 76 (uplus_uminus -> .)
    DIV             reduce using rule 76 (uplus_uminus -> .)
    MOD             reduce using rule 76 (uplus_uminus -> .)
    AND             reduce using rule 76 (uplus_uminus -> .)
    EQUALS          reduce using rule 76 (uplus_uminus -> .)
    LTHAN           reduce using rule 76 (uplus_uminus -> .)
    GTHAN           reduce using rule 76 (uplus_uminus -> .)
    DIFFERENT       reduce using rule 76 (uplus_uminus -> .)
    GEQUALS         reduce using rule 76 (uplus_uminus -> .)
    LEQUALS         reduce using rule 76 (uplus_uminus -> .)
    OF              reduce using rule 76 (uplus_uminus -> .)
    DO              reduce using rule 76 (uplus_uminus -> .)
    COMMA           reduce using rule 76 (uplus_uminus -> .)
    THEN            reduce using rule 76 (uplus_uminus -> .)
    SEMICOLON       reduce using rule 76 (uplus_uminus -> .)
    RPARENT         reduce using rule 76 (uplus_uminus -> .)
    TO              reduce using rule 76 (uplus_uminus -> .)

  ! UPLUS           [ reduce using rule 76 (uplus_uminus -> .) ]
  ! UMINUS          [ reduce using rule 76 (uplus_uminus -> .) ]

    simple_expr                    shift and go to state 131
    uplus_uminus                   shift and go to state 78

state 103

    (66) relop -> EQUALS .

    UPLUS           reduce using rule 66 (relop -> EQUALS .)
    UMINUS          reduce using rule 66 (relop -> EQUALS .)
    EQUALS          reduce using rule 66 (relop -> EQUALS .)
    LTHAN           reduce using rule 66 (relop -> EQUALS .)
    GTHAN           reduce using rule 66 (relop -> EQUALS .)
    DIFFERENT       reduce using rule 66 (relop -> EQUALS .)
    GEQUALS         reduce using rule 66 (relop -> EQUALS .)
    LEQUALS         reduce using rule 66 (relop -> EQUALS .)
    ID              reduce using rule 66 (relop -> EQUALS .)
    INTEGER         reduce using rule 66 (relop -> EQUALS .)
    REAL            reduce using rule 66 (relop -> EQUALS .)
    STRING          reduce using rule 66 (relop -> EQUALS .)
    NOT             reduce using rule 66 (relop -> EQUALS .)
    PLUS            reduce using rule 66 (relop -> EQUALS .)
    MINUS           reduce using rule 66 (relop -> EQUALS .)
    OR              reduce using rule 66 (relop -> EQUALS .)
    TIMES           reduce using rule 66 (relop -> EQUALS .)
    DIVIDE          reduce using rule 66 (relop -> EQUALS .)
    DIV             reduce using rule 66 (relop -> EQUALS .)
    MOD             reduce using rule 66 (relop -> EQUALS .)
    AND             reduce using rule 66 (relop -> EQUALS .)
    OF              reduce using rule 66 (relop -> EQUALS .)
    DO              reduce using rule 66 (relop -> EQUALS .)
    COMMA           reduce using rule 66 (relop -> EQUALS .)
    THEN            reduce using rule 66 (relop -> EQUALS .)
    SEMICOLON       reduce using rule 66 (relop -> EQUALS .)
    RPARENT         reduce using rule 66 (relop -> EQUALS .)
    TO              reduce using rule 66 (relop -> EQUALS .)


state 104

    (67) relop -> LTHAN .

    UPLUS           reduce using rule 67 (relop -> LTHAN .)
    UMINUS          reduce using rule 67 (relop -> LTHAN .)
    EQUALS          reduce using rule 67 (relop -> LTHAN .)
    LTHAN           reduce using rule 67 (relop -> LTHAN .)
    GTHAN           reduce using rule 67 (relop -> LTHAN .)
    DIFFERENT       reduce using rule 67 (relop -> LTHAN .)
    GEQUALS         reduce using rule 67 (relop -> LTHAN .)
    LEQUALS         reduce using rule 67 (relop -> LTHAN .)
    ID              reduce using rule 67 (relop -> LTHAN .)
    INTEGER         reduce using rule 67 (relop -> LTHAN .)
    REAL            reduce using rule 67 (relop -> LTHAN .)
    STRING          reduce using rule 67 (relop -> LTHAN .)
    NOT             reduce using rule 67 (relop -> LTHAN .)
    PLUS            reduce using rule 67 (relop -> LTHAN .)
    MINUS           reduce using rule 67 (relop -> LTHAN .)
    OR              reduce using rule 67 (relop -> LTHAN .)
    TIMES           reduce using rule 67 (relop -> LTHAN .)
    DIVIDE          reduce using rule 67 (relop -> LTHAN .)
    DIV             reduce using rule 67 (relop -> LTHAN .)
    MOD             reduce using rule 67 (relop -> LTHAN .)
    AND             reduce using rule 67 (relop -> LTHAN .)
    OF              reduce using rule 67 (relop -> LTHAN .)
    DO              reduce using rule 67 (relop -> LTHAN .)
    COMMA           reduce using rule 67 (relop -> LTHAN .)
    THEN            reduce using rule 67 (relop -> LTHAN .)
    SEMICOLON       reduce using rule 67 (relop -> LTHAN .)
    RPARENT         reduce using rule 67 (relop -> LTHAN .)
    TO              reduce using rule 67 (relop -> LTHAN .)


state 105

    (68) relop -> GTHAN .

    UPLUS           reduce using rule 68 (relop -> GTHAN .)
    UMINUS          reduce using rule 68 (relop -> GTHAN .)
    EQUALS          reduce using rule 68 (relop -> GTHAN .)
    LTHAN           reduce using rule 68 (relop -> GTHAN .)
    GTHAN           reduce using rule 68 (relop -> GTHAN .)
    DIFFERENT       reduce using rule 68 (relop -> GTHAN .)
    GEQUALS         reduce using rule 68 (relop -> GTHAN .)
    LEQUALS         reduce using rule 68 (relop -> GTHAN .)
    ID              reduce using rule 68 (relop -> GTHAN .)
    INTEGER         reduce using rule 68 (relop -> GTHAN .)
    REAL            reduce using rule 68 (relop -> GTHAN .)
    STRING          reduce using rule 68 (relop -> GTHAN .)
    NOT             reduce using rule 68 (relop -> GTHAN .)
    PLUS            reduce using rule 68 (relop -> GTHAN .)
    MINUS           reduce using rule 68 (relop -> GTHAN .)
    OR              reduce using rule 68 (relop -> GTHAN .)
    TIMES           reduce using rule 68 (relop -> GTHAN .)
    DIVIDE          reduce using rule 68 (relop -> GTHAN .)
    DIV             reduce using rule 68 (relop -> GTHAN .)
    MOD             reduce using rule 68 (relop -> GTHAN .)
    AND             reduce using rule 68 (relop -> GTHAN .)
    OF              reduce using rule 68 (relop -> GTHAN .)
    DO              reduce using rule 68 (relop -> GTHAN .)
    COMMA           reduce using rule 68 (relop -> GTHAN .)
    THEN            reduce using rule 68 (relop -> GTHAN .)
    SEMICOLON       reduce using rule 68 (relop -> GTHAN .)
    RPARENT         reduce using rule 68 (relop -> GTHAN .)
    TO              reduce using rule 68 (relop -> GTHAN .)


state 106

    (69) relop -> DIFFERENT .

    UPLUS           reduce using rule 69 (relop -> DIFFERENT .)
    UMINUS          reduce using rule 69 (relop -> DIFFERENT .)
    EQUALS          reduce using rule 69 (relop -> DIFFERENT .)
    LTHAN           reduce using rule 69 (relop -> DIFFERENT .)
    GTHAN           reduce using rule 69 (relop -> DIFFERENT .)
    DIFFERENT       reduce using rule 69 (relop -> DIFFERENT .)
    GEQUALS         reduce using rule 69 (relop -> DIFFERENT .)
    LEQUALS         reduce using rule 69 (relop -> DIFFERENT .)
    ID              reduce using rule 69 (relop -> DIFFERENT .)
    INTEGER         reduce using rule 69 (relop -> DIFFERENT .)
    REAL            reduce using rule 69 (relop -> DIFFERENT .)
    STRING          reduce using rule 69 (relop -> DIFFERENT .)
    NOT             reduce using rule 69 (relop -> DIFFERENT .)
    PLUS            reduce using rule 69 (relop -> DIFFERENT .)
    MINUS           reduce using rule 69 (relop -> DIFFERENT .)
    OR              reduce using rule 69 (relop -> DIFFERENT .)
    TIMES           reduce using rule 69 (relop -> DIFFERENT .)
    DIVIDE          reduce using rule 69 (relop -> DIFFERENT .)
    DIV             reduce using rule 69 (relop -> DIFFERENT .)
    MOD             reduce using rule 69 (relop -> DIFFERENT .)
    AND             reduce using rule 69 (relop -> DIFFERENT .)
    OF              reduce using rule 69 (relop -> DIFFERENT .)
    DO              reduce using rule 69 (relop -> DIFFERENT .)
    COMMA           reduce using rule 69 (relop -> DIFFERENT .)
    THEN            reduce using rule 69 (relop -> DIFFERENT .)
    SEMICOLON       reduce using rule 69 (relop -> DIFFERENT .)
    RPARENT         reduce using rule 69 (relop -> DIFFERENT .)
    TO              reduce using rule 69 (relop -> DIFFERENT .)


state 107

    (70) relop -> GEQUALS .

    UPLUS           reduce using rule 70 (relop -> GEQUALS .)
    UMINUS          reduce using rule 70 (relop -> GEQUALS .)
    EQUALS          reduce using rule 70 (relop -> GEQUALS .)
    LTHAN           reduce using rule 70 (relop -> GEQUALS .)
    GTHAN           reduce using rule 70 (relop -> GEQUALS .)
    DIFFERENT       reduce using rule 70 (relop -> GEQUALS .)
    GEQUALS         reduce using rule 70 (relop -> GEQUALS .)
    LEQUALS         reduce using rule 70 (relop -> GEQUALS .)
    ID              reduce using rule 70 (relop -> GEQUALS .)
    INTEGER         reduce using rule 70 (relop -> GEQUALS .)
    REAL            reduce using rule 70 (relop -> GEQUALS .)
    STRING          reduce using rule 70 (relop -> GEQUALS .)
    NOT             reduce using rule 70 (relop -> GEQUALS .)
    PLUS            reduce using rule 70 (relop -> GEQUALS .)
    MINUS           reduce using rule 70 (relop -> GEQUALS .)
    OR              reduce using rule 70 (relop -> GEQUALS .)
    TIMES           reduce using rule 70 (relop -> GEQUALS .)
    DIVIDE          reduce using rule 70 (relop -> GEQUALS .)
    DIV             reduce using rule 70 (relop -> GEQUALS .)
    MOD             reduce using rule 70 (relop -> GEQUALS .)
    AND             reduce using rule 70 (relop -> GEQUALS .)
    OF              reduce using rule 70 (relop -> GEQUALS .)
    DO              reduce using rule 70 (relop -> GEQUALS .)
    COMMA           reduce using rule 70 (relop -> GEQUALS .)
    THEN            reduce using rule 70 (relop -> GEQUALS .)
    SEMICOLON       reduce using rule 70 (relop -> GEQUALS .)
    RPARENT         reduce using rule 70 (relop -> GEQUALS .)
    TO              reduce using rule 70 (relop -> GEQUALS .)


state 108

    (71) relop -> LEQUALS .

    UPLUS           reduce using rule 71 (relop -> LEQUALS .)
    UMINUS          reduce using rule 71 (relop -> LEQUALS .)
    EQUALS          reduce using rule 71 (relop -> LEQUALS .)
    LTHAN           reduce using rule 71 (relop -> LEQUALS .)
    GTHAN           reduce using rule 71 (relop -> LEQUALS .)
    DIFFERENT       reduce using rule 71 (relop -> LEQUALS .)
    GEQUALS         reduce using rule 71 (relop -> LEQUALS .)
    LEQUALS         reduce using rule 71 (relop -> LEQUALS .)
    ID              reduce using rule 71 (relop -> LEQUALS .)
    INTEGER         reduce using rule 71 (relop -> LEQUALS .)
    REAL            reduce using rule 71 (relop -> LEQUALS .)
    STRING          reduce using rule 71 (relop -> LEQUALS .)
    NOT             reduce using rule 71 (relop -> LEQUALS .)
    PLUS            reduce using rule 71 (relop -> LEQUALS .)
    MINUS           reduce using rule 71 (relop -> LEQUALS .)
    OR              reduce using rule 71 (relop -> LEQUALS .)
    TIMES           reduce using rule 71 (relop -> LEQUALS .)
    DIVIDE          reduce using rule 71 (relop -> LEQUALS .)
    DIV             reduce using rule 71 (relop -> LEQUALS .)
    MOD             reduce using rule 71 (relop -> LEQUALS .)
    AND             reduce using rule 71 (relop -> LEQUALS .)
    OF              reduce using rule 71 (relop -> LEQUALS .)
    DO              reduce using rule 71 (relop -> LEQUALS .)
    COMMA           reduce using rule 71 (relop -> LEQUALS .)
    THEN            reduce using rule 71 (relop -> LEQUALS .)
    SEMICOLON       reduce using rule 71 (relop -> LEQUALS .)
    RPARENT         reduce using rule 71 (relop -> LEQUALS .)
    TO              reduce using rule 71 (relop -> LEQUALS .)


state 109

    (72) simple_expr -> uplus_uminus factor .
    (73) simple_expr -> uplus_uminus factor . addop_mulop factor simple_expr
    (77) addop_mulop -> . PLUS
    (78) addop_mulop -> . MINUS
    (79) addop_mulop -> . OR
    (80) addop_mulop -> . TIMES
    (81) addop_mulop -> . DIVIDE
    (82) addop_mulop -> . DIV
    (83) addop_mulop -> . MOD
    (84) addop_mulop -> . AND
    (85) addop_mulop -> .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! reduce/reduce conflict for EQUALS resolved using rule 72 (simple_expr -> uplus_uminus factor .)
  ! reduce/reduce conflict for LTHAN resolved using rule 72 (simple_expr -> uplus_uminus factor .)
  ! reduce/reduce conflict for GTHAN resolved using rule 72 (simple_expr -> uplus_uminus factor .)
  ! reduce/reduce conflict for DIFFERENT resolved using rule 72 (simple_expr -> uplus_uminus factor .)
  ! reduce/reduce conflict for GEQUALS resolved using rule 72 (simple_expr -> uplus_uminus factor .)
  ! reduce/reduce conflict for LEQUALS resolved using rule 72 (simple_expr -> uplus_uminus factor .)
  ! reduce/reduce conflict for OF resolved using rule 72 (simple_expr -> uplus_uminus factor .)
  ! reduce/reduce conflict for DO resolved using rule 72 (simple_expr -> uplus_uminus factor .)
  ! reduce/reduce conflict for COMMA resolved using rule 72 (simple_expr -> uplus_uminus factor .)
  ! reduce/reduce conflict for THEN resolved using rule 72 (simple_expr -> uplus_uminus factor .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 72 (simple_expr -> uplus_uminus factor .)
  ! reduce/reduce conflict for RPARENT resolved using rule 72 (simple_expr -> uplus_uminus factor .)
  ! reduce/reduce conflict for TO resolved using rule 72 (simple_expr -> uplus_uminus factor .)
    EQUALS          reduce using rule 72 (simple_expr -> uplus_uminus factor .)
    LTHAN           reduce using rule 72 (simple_expr -> uplus_uminus factor .)
    GTHAN           reduce using rule 72 (simple_expr -> uplus_uminus factor .)
    DIFFERENT       reduce using rule 72 (simple_expr -> uplus_uminus factor .)
    GEQUALS         reduce using rule 72 (simple_expr -> uplus_uminus factor .)
    LEQUALS         reduce using rule 72 (simple_expr -> uplus_uminus factor .)
    OF              reduce using rule 72 (simple_expr -> uplus_uminus factor .)
    DO              reduce using rule 72 (simple_expr -> uplus_uminus factor .)
    COMMA           reduce using rule 72 (simple_expr -> uplus_uminus factor .)
    THEN            reduce using rule 72 (simple_expr -> uplus_uminus factor .)
    SEMICOLON       reduce using rule 72 (simple_expr -> uplus_uminus factor .)
    RPARENT         reduce using rule 72 (simple_expr -> uplus_uminus factor .)
    TO              reduce using rule 72 (simple_expr -> uplus_uminus factor .)
    PLUS            shift and go to state 133
    MINUS           shift and go to state 134
    OR              shift and go to state 135
    TIMES           shift and go to state 136
    DIVIDE          shift and go to state 137
    DIV             shift and go to state 138
    MOD             shift and go to state 139
    AND             shift and go to state 140
    ID              reduce using rule 85 (addop_mulop -> .)
    INTEGER         reduce using rule 85 (addop_mulop -> .)
    REAL            reduce using rule 85 (addop_mulop -> .)
    STRING          reduce using rule 85 (addop_mulop -> .)
    NOT             reduce using rule 85 (addop_mulop -> .)
    UPLUS           reduce using rule 85 (addop_mulop -> .)
    UMINUS          reduce using rule 85 (addop_mulop -> .)

  ! PLUS            [ reduce using rule 85 (addop_mulop -> .) ]
  ! MINUS           [ reduce using rule 85 (addop_mulop -> .) ]
  ! OR              [ reduce using rule 85 (addop_mulop -> .) ]
  ! TIMES           [ reduce using rule 85 (addop_mulop -> .) ]
  ! DIVIDE          [ reduce using rule 85 (addop_mulop -> .) ]
  ! DIV             [ reduce using rule 85 (addop_mulop -> .) ]
  ! MOD             [ reduce using rule 85 (addop_mulop -> .) ]
  ! AND             [ reduce using rule 85 (addop_mulop -> .) ]
  ! EQUALS          [ reduce using rule 85 (addop_mulop -> .) ]
  ! LTHAN           [ reduce using rule 85 (addop_mulop -> .) ]
  ! GTHAN           [ reduce using rule 85 (addop_mulop -> .) ]
  ! DIFFERENT       [ reduce using rule 85 (addop_mulop -> .) ]
  ! GEQUALS         [ reduce using rule 85 (addop_mulop -> .) ]
  ! LEQUALS         [ reduce using rule 85 (addop_mulop -> .) ]
  ! OF              [ reduce using rule 85 (addop_mulop -> .) ]
  ! DO              [ reduce using rule 85 (addop_mulop -> .) ]
  ! COMMA           [ reduce using rule 85 (addop_mulop -> .) ]
  ! THEN            [ reduce using rule 85 (addop_mulop -> .) ]
  ! SEMICOLON       [ reduce using rule 85 (addop_mulop -> .) ]
  ! RPARENT         [ reduce using rule 85 (addop_mulop -> .) ]
  ! TO              [ reduce using rule 85 (addop_mulop -> .) ]

    addop_mulop                    shift and go to state 132

state 110

    (86) factor -> ID .

    PLUS            reduce using rule 86 (factor -> ID .)
    MINUS           reduce using rule 86 (factor -> ID .)
    OR              reduce using rule 86 (factor -> ID .)
    TIMES           reduce using rule 86 (factor -> ID .)
    DIVIDE          reduce using rule 86 (factor -> ID .)
    DIV             reduce using rule 86 (factor -> ID .)
    MOD             reduce using rule 86 (factor -> ID .)
    AND             reduce using rule 86 (factor -> ID .)
    ID              reduce using rule 86 (factor -> ID .)
    INTEGER         reduce using rule 86 (factor -> ID .)
    REAL            reduce using rule 86 (factor -> ID .)
    STRING          reduce using rule 86 (factor -> ID .)
    NOT             reduce using rule 86 (factor -> ID .)
    UPLUS           reduce using rule 86 (factor -> ID .)
    UMINUS          reduce using rule 86 (factor -> ID .)
    EQUALS          reduce using rule 86 (factor -> ID .)
    LTHAN           reduce using rule 86 (factor -> ID .)
    GTHAN           reduce using rule 86 (factor -> ID .)
    DIFFERENT       reduce using rule 86 (factor -> ID .)
    GEQUALS         reduce using rule 86 (factor -> ID .)
    LEQUALS         reduce using rule 86 (factor -> ID .)
    OF              reduce using rule 86 (factor -> ID .)
    DO              reduce using rule 86 (factor -> ID .)
    COMMA           reduce using rule 86 (factor -> ID .)
    THEN            reduce using rule 86 (factor -> ID .)
    SEMICOLON       reduce using rule 86 (factor -> ID .)
    RPARENT         reduce using rule 86 (factor -> ID .)
    TO              reduce using rule 86 (factor -> ID .)


state 111

    (87) factor -> INTEGER .

    PLUS            reduce using rule 87 (factor -> INTEGER .)
    MINUS           reduce using rule 87 (factor -> INTEGER .)
    OR              reduce using rule 87 (factor -> INTEGER .)
    TIMES           reduce using rule 87 (factor -> INTEGER .)
    DIVIDE          reduce using rule 87 (factor -> INTEGER .)
    DIV             reduce using rule 87 (factor -> INTEGER .)
    MOD             reduce using rule 87 (factor -> INTEGER .)
    AND             reduce using rule 87 (factor -> INTEGER .)
    ID              reduce using rule 87 (factor -> INTEGER .)
    INTEGER         reduce using rule 87 (factor -> INTEGER .)
    REAL            reduce using rule 87 (factor -> INTEGER .)
    STRING          reduce using rule 87 (factor -> INTEGER .)
    NOT             reduce using rule 87 (factor -> INTEGER .)
    UPLUS           reduce using rule 87 (factor -> INTEGER .)
    UMINUS          reduce using rule 87 (factor -> INTEGER .)
    EQUALS          reduce using rule 87 (factor -> INTEGER .)
    LTHAN           reduce using rule 87 (factor -> INTEGER .)
    GTHAN           reduce using rule 87 (factor -> INTEGER .)
    DIFFERENT       reduce using rule 87 (factor -> INTEGER .)
    GEQUALS         reduce using rule 87 (factor -> INTEGER .)
    LEQUALS         reduce using rule 87 (factor -> INTEGER .)
    OF              reduce using rule 87 (factor -> INTEGER .)
    DO              reduce using rule 87 (factor -> INTEGER .)
    COMMA           reduce using rule 87 (factor -> INTEGER .)
    THEN            reduce using rule 87 (factor -> INTEGER .)
    SEMICOLON       reduce using rule 87 (factor -> INTEGER .)
    RPARENT         reduce using rule 87 (factor -> INTEGER .)
    TO              reduce using rule 87 (factor -> INTEGER .)


state 112

    (88) factor -> REAL .

    PLUS            reduce using rule 88 (factor -> REAL .)
    MINUS           reduce using rule 88 (factor -> REAL .)
    OR              reduce using rule 88 (factor -> REAL .)
    TIMES           reduce using rule 88 (factor -> REAL .)
    DIVIDE          reduce using rule 88 (factor -> REAL .)
    DIV             reduce using rule 88 (factor -> REAL .)
    MOD             reduce using rule 88 (factor -> REAL .)
    AND             reduce using rule 88 (factor -> REAL .)
    ID              reduce using rule 88 (factor -> REAL .)
    INTEGER         reduce using rule 88 (factor -> REAL .)
    REAL            reduce using rule 88 (factor -> REAL .)
    STRING          reduce using rule 88 (factor -> REAL .)
    NOT             reduce using rule 88 (factor -> REAL .)
    UPLUS           reduce using rule 88 (factor -> REAL .)
    UMINUS          reduce using rule 88 (factor -> REAL .)
    EQUALS          reduce using rule 88 (factor -> REAL .)
    LTHAN           reduce using rule 88 (factor -> REAL .)
    GTHAN           reduce using rule 88 (factor -> REAL .)
    DIFFERENT       reduce using rule 88 (factor -> REAL .)
    GEQUALS         reduce using rule 88 (factor -> REAL .)
    LEQUALS         reduce using rule 88 (factor -> REAL .)
    OF              reduce using rule 88 (factor -> REAL .)
    DO              reduce using rule 88 (factor -> REAL .)
    COMMA           reduce using rule 88 (factor -> REAL .)
    THEN            reduce using rule 88 (factor -> REAL .)
    SEMICOLON       reduce using rule 88 (factor -> REAL .)
    RPARENT         reduce using rule 88 (factor -> REAL .)
    TO              reduce using rule 88 (factor -> REAL .)


state 113

    (89) factor -> STRING .

    PLUS            reduce using rule 89 (factor -> STRING .)
    MINUS           reduce using rule 89 (factor -> STRING .)
    OR              reduce using rule 89 (factor -> STRING .)
    TIMES           reduce using rule 89 (factor -> STRING .)
    DIVIDE          reduce using rule 89 (factor -> STRING .)
    DIV             reduce using rule 89 (factor -> STRING .)
    MOD             reduce using rule 89 (factor -> STRING .)
    AND             reduce using rule 89 (factor -> STRING .)
    ID              reduce using rule 89 (factor -> STRING .)
    INTEGER         reduce using rule 89 (factor -> STRING .)
    REAL            reduce using rule 89 (factor -> STRING .)
    STRING          reduce using rule 89 (factor -> STRING .)
    NOT             reduce using rule 89 (factor -> STRING .)
    UPLUS           reduce using rule 89 (factor -> STRING .)
    UMINUS          reduce using rule 89 (factor -> STRING .)
    EQUALS          reduce using rule 89 (factor -> STRING .)
    LTHAN           reduce using rule 89 (factor -> STRING .)
    GTHAN           reduce using rule 89 (factor -> STRING .)
    DIFFERENT       reduce using rule 89 (factor -> STRING .)
    GEQUALS         reduce using rule 89 (factor -> STRING .)
    LEQUALS         reduce using rule 89 (factor -> STRING .)
    OF              reduce using rule 89 (factor -> STRING .)
    DO              reduce using rule 89 (factor -> STRING .)
    COMMA           reduce using rule 89 (factor -> STRING .)
    THEN            reduce using rule 89 (factor -> STRING .)
    SEMICOLON       reduce using rule 89 (factor -> STRING .)
    RPARENT         reduce using rule 89 (factor -> STRING .)
    TO              reduce using rule 89 (factor -> STRING .)


state 114

    (90) factor -> NOT . factor
    (86) factor -> . ID
    (87) factor -> . INTEGER
    (88) factor -> . REAL
    (89) factor -> . STRING
    (90) factor -> . NOT factor
    (91) factor -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for REAL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    ID              shift and go to state 110
    INTEGER         shift and go to state 111
    REAL            shift and go to state 112
    STRING          shift and go to state 113
    NOT             shift and go to state 114
    PLUS            reduce using rule 91 (factor -> .)
    MINUS           reduce using rule 91 (factor -> .)
    OR              reduce using rule 91 (factor -> .)
    TIMES           reduce using rule 91 (factor -> .)
    DIVIDE          reduce using rule 91 (factor -> .)
    DIV             reduce using rule 91 (factor -> .)
    MOD             reduce using rule 91 (factor -> .)
    AND             reduce using rule 91 (factor -> .)
    UPLUS           reduce using rule 91 (factor -> .)
    UMINUS          reduce using rule 91 (factor -> .)
    EQUALS          reduce using rule 91 (factor -> .)
    LTHAN           reduce using rule 91 (factor -> .)
    GTHAN           reduce using rule 91 (factor -> .)
    DIFFERENT       reduce using rule 91 (factor -> .)
    GEQUALS         reduce using rule 91 (factor -> .)
    LEQUALS         reduce using rule 91 (factor -> .)
    OF              reduce using rule 91 (factor -> .)
    DO              reduce using rule 91 (factor -> .)
    COMMA           reduce using rule 91 (factor -> .)
    THEN            reduce using rule 91 (factor -> .)
    SEMICOLON       reduce using rule 91 (factor -> .)
    RPARENT         reduce using rule 91 (factor -> .)
    TO              reduce using rule 91 (factor -> .)

  ! ID              [ reduce using rule 91 (factor -> .) ]
  ! INTEGER         [ reduce using rule 91 (factor -> .) ]
  ! REAL            [ reduce using rule 91 (factor -> .) ]
  ! STRING          [ reduce using rule 91 (factor -> .) ]
  ! NOT             [ reduce using rule 91 (factor -> .) ]

    factor                         shift and go to state 141

state 115

    (56) while_statement -> WHILE expr DO . statement
    (30) statement -> . assign_statement statement
    (31) statement -> . procedure_call statement
    (32) statement -> . if_statement statement
    (33) statement -> . case_statement statement
    (34) statement -> . while_statement statement
    (35) statement -> . repeat_statement statement
    (36) statement -> . for_statement statement
    (37) statement -> . compound_statement_semicolon statement
    (38) statement -> .
    (39) assign_statement -> . ID ASSIGNMENT expr SEMICOLON
    (40) procedure_call -> . ID LPARENT expr_list RPARENT SEMICOLON
    (41) if_statement -> . if1
    (42) if_statement -> . if2
    (43) if_statement -> .
    (51) case_statement -> . CASE expr OF case END SEMICOLON
    (52) case_statement -> . case
    (56) while_statement -> . WHILE expr DO statement
    (57) repeat_statement -> . REPEAT statement UNTIL expr SEMICOLON
    (58) repeat_statement -> . statement
    (59) for_statement -> . FOR ID ASSIGNMENT expr TO expr DO
    (60) for_statement -> . statement
    (29) compound_statement_semicolon -> . BEGIN statement END SEMICOLON
    (44) if1 -> . IF expr_list THEN if1
    (45) if1 -> . IF expr_list THEN if2
    (46) if1 -> . ELSE if1
    (47) if1 -> .
    (48) if2 -> . IF expr_list THEN if2
    (49) if2 -> . ELSE if2
    (50) if2 -> .
    (53) case -> . INTEGER TWOPOINTS statement
    (54) case -> . REAL TWOPOINTS statement
    (55) case -> . ID TWOPOINTS statement

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! reduce/reduce conflict for CASE resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REPEAT resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for FOR resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for BEGIN resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for IF resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for ELSE resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for INTEGER resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REAL resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for END resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for UNTIL resolved using rule 38 (statement -> .)
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! reduce/reduce conflict for INTEGER resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REAL resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for END resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for UNTIL resolved using rule 38 (statement -> .)
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! reduce/reduce conflict for INTEGER resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for REAL resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for END resolved using rule 38 (statement -> .)
  ! reduce/reduce conflict for UNTIL resolved using rule 38 (statement -> .)
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for REAL resolved as shift
    END             reduce using rule 38 (statement -> .)
    UNTIL           reduce using rule 38 (statement -> .)
    ID              shift and go to state 46
    CASE            shift and go to state 49
    WHILE           shift and go to state 51
    REPEAT          shift and go to state 52
    FOR             shift and go to state 53
    BEGIN           shift and go to state 36
    IF              shift and go to state 54
    ELSE            shift and go to state 55
    INTEGER         shift and go to state 56
    REAL            shift and go to state 57

  ! ID              [ reduce using rule 38 (statement -> .) ]
  ! CASE            [ reduce using rule 38 (statement -> .) ]
  ! WHILE           [ reduce using rule 38 (statement -> .) ]
  ! REPEAT          [ reduce using rule 38 (statement -> .) ]
  ! FOR             [ reduce using rule 38 (statement -> .) ]
  ! BEGIN           [ reduce using rule 38 (statement -> .) ]
  ! IF              [ reduce using rule 38 (statement -> .) ]
  ! ELSE            [ reduce using rule 38 (statement -> .) ]
  ! INTEGER         [ reduce using rule 38 (statement -> .) ]
  ! REAL            [ reduce using rule 38 (statement -> .) ]
  ! ID              [ reduce using rule 43 (if_statement -> .) ]
  ! CASE            [ reduce using rule 43 (if_statement -> .) ]
  ! WHILE           [ reduce using rule 43 (if_statement -> .) ]
  ! REPEAT          [ reduce using rule 43 (if_statement -> .) ]
  ! FOR             [ reduce using rule 43 (if_statement -> .) ]
  ! BEGIN           [ reduce using rule 43 (if_statement -> .) ]
  ! IF              [ reduce using rule 43 (if_statement -> .) ]
  ! ELSE            [ reduce using rule 43 (if_statement -> .) ]
  ! INTEGER         [ reduce using rule 43 (if_statement -> .) ]
  ! REAL            [ reduce using rule 43 (if_statement -> .) ]
  ! END             [ reduce using rule 43 (if_statement -> .) ]
  ! UNTIL           [ reduce using rule 43 (if_statement -> .) ]
  ! ID              [ reduce using rule 47 (if1 -> .) ]
  ! CASE            [ reduce using rule 47 (if1 -> .) ]
  ! WHILE           [ reduce using rule 47 (if1 -> .) ]
  ! REPEAT          [ reduce using rule 47 (if1 -> .) ]
  ! FOR             [ reduce using rule 47 (if1 -> .) ]
  ! BEGIN           [ reduce using rule 47 (if1 -> .) ]
  ! IF              [ reduce using rule 47 (if1 -> .) ]
  ! ELSE            [ reduce using rule 47 (if1 -> .) ]
  ! INTEGER         [ reduce using rule 47 (if1 -> .) ]
  ! REAL            [ reduce using rule 47 (if1 -> .) ]
  ! END             [ reduce using rule 47 (if1 -> .) ]
  ! UNTIL           [ reduce using rule 47 (if1 -> .) ]
  ! ID              [ reduce using rule 50 (if2 -> .) ]
  ! CASE            [ reduce using rule 50 (if2 -> .) ]
  ! WHILE           [ reduce using rule 50 (if2 -> .) ]
  ! REPEAT          [ reduce using rule 50 (if2 -> .) ]
  ! FOR             [ reduce using rule 50 (if2 -> .) ]
  ! BEGIN           [ reduce using rule 50 (if2 -> .) ]
  ! IF              [ reduce using rule 50 (if2 -> .) ]
  ! ELSE            [ reduce using rule 50 (if2 -> .) ]
  ! INTEGER         [ reduce using rule 50 (if2 -> .) ]
  ! REAL            [ reduce using rule 50 (if2 -> .) ]
  ! END             [ reduce using rule 50 (if2 -> .) ]
  ! UNTIL           [ reduce using rule 50 (if2 -> .) ]

    statement                      shift and go to state 142
    assign_statement               shift and go to state 38
    procedure_call                 shift and go to state 39
    if_statement                   shift and go to state 40
    case_statement                 shift and go to state 41
    while_statement                shift and go to state 42
    repeat_statement               shift and go to state 43
    for_statement                  shift and go to state 44
    compound_statement_semicolon   shift and go to state 45
    if1                            shift and go to state 47
    if2                            shift and go to state 48
    case                           shift and go to state 50

state 116

    (57) repeat_statement -> REPEAT statement UNTIL . expr SEMICOLON
    (63) expr -> . simple_expr relop_simple_expr
    (72) simple_expr -> . uplus_uminus factor
    (73) simple_expr -> . uplus_uminus factor addop_mulop factor simple_expr
    (74) uplus_uminus -> . UPLUS
    (75) uplus_uminus -> . UMINUS
    (76) uplus_uminus -> .

  ! shift/reduce conflict for UPLUS resolved as shift
  ! shift/reduce conflict for UMINUS resolved as shift
    UPLUS           shift and go to state 79
    UMINUS          shift and go to state 80
    ID              reduce using rule 76 (uplus_uminus -> .)
    INTEGER         reduce using rule 76 (uplus_uminus -> .)
    REAL            reduce using rule 76 (uplus_uminus -> .)
    STRING          reduce using rule 76 (uplus_uminus -> .)
    NOT             reduce using rule 76 (uplus_uminus -> .)
    PLUS            reduce using rule 76 (uplus_uminus -> .)
    MINUS           reduce using rule 76 (uplus_uminus -> .)
    OR              reduce using rule 76 (uplus_uminus -> .)
    TIMES           reduce using rule 76 (uplus_uminus -> .)
    DIVIDE          reduce using rule 76 (uplus_uminus -> .)
    DIV             reduce using rule 76 (uplus_uminus -> .)
    MOD             reduce using rule 76 (uplus_uminus -> .)
    AND             reduce using rule 76 (uplus_uminus -> .)
    EQUALS          reduce using rule 76 (uplus_uminus -> .)
    LTHAN           reduce using rule 76 (uplus_uminus -> .)
    GTHAN           reduce using rule 76 (uplus_uminus -> .)
    DIFFERENT       reduce using rule 76 (uplus_uminus -> .)
    GEQUALS         reduce using rule 76 (uplus_uminus -> .)
    LEQUALS         reduce using rule 76 (uplus_uminus -> .)
    SEMICOLON       reduce using rule 76 (uplus_uminus -> .)

  ! UPLUS           [ reduce using rule 76 (uplus_uminus -> .) ]
  ! UMINUS          [ reduce using rule 76 (uplus_uminus -> .) ]

    expr                           shift and go to state 143
    simple_expr                    shift and go to state 77
    uplus_uminus                   shift and go to state 78

state 117

    (59) for_statement -> FOR ID ASSIGNMENT . expr TO expr DO
    (63) expr -> . simple_expr relop_simple_expr
    (72) simple_expr -> . uplus_uminus factor
    (73) simple_expr -> . uplus_uminus factor addop_mulop factor simple_expr
    (74) uplus_uminus -> . UPLUS
    (75) uplus_uminus -> . UMINUS
    (76) uplus_uminus -> .

  ! shift/reduce conflict for UPLUS resolved as shift
  ! shift/reduce conflict for UMINUS resolved as shift
    UPLUS           shift and go to state 79
    UMINUS          shift and go to state 80
    ID              reduce using rule 76 (uplus_uminus -> .)
    INTEGER         reduce using rule 76 (uplus_uminus -> .)
    REAL            reduce using rule 76 (uplus_uminus -> .)
    STRING          reduce using rule 76 (uplus_uminus -> .)
    NOT             reduce using rule 76 (uplus_uminus -> .)
    PLUS            reduce using rule 76 (uplus_uminus -> .)
    MINUS           reduce using rule 76 (uplus_uminus -> .)
    OR              reduce using rule 76 (uplus_uminus -> .)
    TIMES           reduce using rule 76 (uplus_uminus -> .)
    DIVIDE          reduce using rule 76 (uplus_uminus -> .)
    DIV             reduce using rule 76 (uplus_uminus -> .)
    MOD             reduce using rule 76 (uplus_uminus -> .)
    AND             reduce using rule 76 (uplus_uminus -> .)
    EQUALS          reduce using rule 76 (uplus_uminus -> .)
    LTHAN           reduce using rule 76 (uplus_uminus -> .)
    GTHAN           reduce using rule 76 (uplus_uminus -> .)
    DIFFERENT       reduce using rule 76 (uplus_uminus -> .)
    GEQUALS         reduce using rule 76 (uplus_uminus -> .)
    LEQUALS         reduce using rule 76 (uplus_uminus -> .)
    TO              reduce using rule 76 (uplus_uminus -> .)

  ! UPLUS           [ reduce using rule 76 (uplus_uminus -> .) ]
  ! UMINUS          [ reduce using rule 76 (uplus_uminus -> .) ]

    expr                           shift and go to state 144
    simple_expr                    shift and go to state 77
    uplus_uminus                   shift and go to state 78

state 118

    (44) if1 -> IF expr_list THEN . if1
    (45) if1 -> IF expr_list THEN . if2
    (48) if2 -> IF expr_list THEN . if2
    (44) if1 -> . IF expr_list THEN if1
    (45) if1 -> . IF expr_list THEN if2
    (46) if1 -> . ELSE if1
    (47) if1 -> .
    (48) if2 -> . IF expr_list THEN if2
    (49) if2 -> . ELSE if2
    (50) if2 -> .

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! reduce/reduce conflict for ID resolved using rule 47 (if1 -> .)
  ! reduce/reduce conflict for CASE resolved using rule 47 (if1 -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 47 (if1 -> .)
  ! reduce/reduce conflict for REPEAT resolved using rule 47 (if1 -> .)
  ! reduce/reduce conflict for FOR resolved using rule 47 (if1 -> .)
  ! reduce/reduce conflict for BEGIN resolved using rule 47 (if1 -> .)
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! reduce/reduce conflict for INTEGER resolved using rule 47 (if1 -> .)
  ! reduce/reduce conflict for REAL resolved using rule 47 (if1 -> .)
  ! reduce/reduce conflict for END resolved using rule 47 (if1 -> .)
  ! reduce/reduce conflict for UNTIL resolved using rule 47 (if1 -> .)
    IF              shift and go to state 54
    ELSE            shift and go to state 55
    ID              reduce using rule 47 (if1 -> .)
    CASE            reduce using rule 47 (if1 -> .)
    WHILE           reduce using rule 47 (if1 -> .)
    REPEAT          reduce using rule 47 (if1 -> .)
    FOR             reduce using rule 47 (if1 -> .)
    BEGIN           reduce using rule 47 (if1 -> .)
    INTEGER         reduce using rule 47 (if1 -> .)
    REAL            reduce using rule 47 (if1 -> .)
    END             reduce using rule 47 (if1 -> .)
    UNTIL           reduce using rule 47 (if1 -> .)

  ! IF              [ reduce using rule 47 (if1 -> .) ]
  ! ELSE            [ reduce using rule 47 (if1 -> .) ]
  ! ID              [ reduce using rule 50 (if2 -> .) ]
  ! CASE            [ reduce using rule 50 (if2 -> .) ]
  ! WHILE           [ reduce using rule 50 (if2 -> .) ]
  ! REPEAT          [ reduce using rule 50 (if2 -> .) ]
  ! FOR             [ reduce using rule 50 (if2 -> .) ]
  ! BEGIN           [ reduce using rule 50 (if2 -> .) ]
  ! IF              [ reduce using rule 50 (if2 -> .) ]
  ! ELSE            [ reduce using rule 50 (if2 -> .) ]
  ! INTEGER         [ reduce using rule 50 (if2 -> .) ]
  ! REAL            [ reduce using rule 50 (if2 -> .) ]
  ! END             [ reduce using rule 50 (if2 -> .) ]
  ! UNTIL           [ reduce using rule 50 (if2 -> .) ]

    if1                            shift and go to state 145
    if2                            shift and go to state 146

state 119

    (62) expr_list -> expr COMMA . expr_list
    (61) expr_list -> . expr
    (62) expr_list -> . expr COMMA expr_list
    (63) expr -> . simple_expr relop_simple_expr
    (72) simple_expr -> . uplus_uminus factor
    (73) simple_expr -> . uplus_uminus factor addop_mulop factor simple_expr
    (74) uplus_uminus -> . UPLUS
    (75) uplus_uminus -> . UMINUS
    (76) uplus_uminus -> .

  ! shift/reduce conflict for UPLUS resolved as shift
  ! shift/reduce conflict for UMINUS resolved as shift
    UPLUS           shift and go to state 79
    UMINUS          shift and go to state 80
    ID              reduce using rule 76 (uplus_uminus -> .)
    INTEGER         reduce using rule 76 (uplus_uminus -> .)
    REAL            reduce using rule 76 (uplus_uminus -> .)
    STRING          reduce using rule 76 (uplus_uminus -> .)
    NOT             reduce using rule 76 (uplus_uminus -> .)
    PLUS            reduce using rule 76 (uplus_uminus -> .)
    MINUS           reduce using rule 76 (uplus_uminus -> .)
    OR              reduce using rule 76 (uplus_uminus -> .)
    TIMES           reduce using rule 76 (uplus_uminus -> .)
    DIVIDE          reduce using rule 76 (uplus_uminus -> .)
    DIV             reduce using rule 76 (uplus_uminus -> .)
    MOD             reduce using rule 76 (uplus_uminus -> .)
    AND             reduce using rule 76 (uplus_uminus -> .)
    EQUALS          reduce using rule 76 (uplus_uminus -> .)
    LTHAN           reduce using rule 76 (uplus_uminus -> .)
    GTHAN           reduce using rule 76 (uplus_uminus -> .)
    DIFFERENT       reduce using rule 76 (uplus_uminus -> .)
    GEQUALS         reduce using rule 76 (uplus_uminus -> .)
    LEQUALS         reduce using rule 76 (uplus_uminus -> .)
    COMMA           reduce using rule 76 (uplus_uminus -> .)
    THEN            reduce using rule 76 (uplus_uminus -> .)
    RPARENT         reduce using rule 76 (uplus_uminus -> .)

  ! UPLUS           [ reduce using rule 76 (uplus_uminus -> .) ]
  ! UMINUS          [ reduce using rule 76 (uplus_uminus -> .) ]

    expr                           shift and go to state 85
    expr_list                      shift and go to state 147
    simple_expr                    shift and go to state 77
    uplus_uminus                   shift and go to state 78

state 120

    (53) case -> INTEGER TWOPOINTS statement .
    (58) repeat_statement -> statement .
    (60) for_statement -> statement .

  ! reduce/reduce conflict for END resolved using rule 53 (case -> INTEGER TWOPOINTS statement .)
  ! reduce/reduce conflict for ID resolved using rule 53 (case -> INTEGER TWOPOINTS statement .)
  ! reduce/reduce conflict for CASE resolved using rule 53 (case -> INTEGER TWOPOINTS statement .)
  ! reduce/reduce conflict for WHILE resolved using rule 53 (case -> INTEGER TWOPOINTS statement .)
  ! reduce/reduce conflict for REPEAT resolved using rule 53 (case -> INTEGER TWOPOINTS statement .)
  ! reduce/reduce conflict for FOR resolved using rule 53 (case -> INTEGER TWOPOINTS statement .)
  ! reduce/reduce conflict for BEGIN resolved using rule 53 (case -> INTEGER TWOPOINTS statement .)
  ! reduce/reduce conflict for IF resolved using rule 53 (case -> INTEGER TWOPOINTS statement .)
  ! reduce/reduce conflict for ELSE resolved using rule 53 (case -> INTEGER TWOPOINTS statement .)
  ! reduce/reduce conflict for INTEGER resolved using rule 53 (case -> INTEGER TWOPOINTS statement .)
  ! reduce/reduce conflict for REAL resolved using rule 53 (case -> INTEGER TWOPOINTS statement .)
  ! reduce/reduce conflict for UNTIL resolved using rule 53 (case -> INTEGER TWOPOINTS statement .)
  ! reduce/reduce conflict for END resolved using rule 53 (case -> INTEGER TWOPOINTS statement .)
  ! reduce/reduce conflict for ID resolved using rule 53 (case -> INTEGER TWOPOINTS statement .)
  ! reduce/reduce conflict for CASE resolved using rule 53 (case -> INTEGER TWOPOINTS statement .)
  ! reduce/reduce conflict for WHILE resolved using rule 53 (case -> INTEGER TWOPOINTS statement .)
  ! reduce/reduce conflict for REPEAT resolved using rule 53 (case -> INTEGER TWOPOINTS statement .)
  ! reduce/reduce conflict for FOR resolved using rule 53 (case -> INTEGER TWOPOINTS statement .)
  ! reduce/reduce conflict for BEGIN resolved using rule 53 (case -> INTEGER TWOPOINTS statement .)
  ! reduce/reduce conflict for IF resolved using rule 53 (case -> INTEGER TWOPOINTS statement .)
  ! reduce/reduce conflict for ELSE resolved using rule 53 (case -> INTEGER TWOPOINTS statement .)
  ! reduce/reduce conflict for INTEGER resolved using rule 53 (case -> INTEGER TWOPOINTS statement .)
  ! reduce/reduce conflict for REAL resolved using rule 53 (case -> INTEGER TWOPOINTS statement .)
  ! reduce/reduce conflict for UNTIL resolved using rule 53 (case -> INTEGER TWOPOINTS statement .)
    ID              reduce using rule 53 (case -> INTEGER TWOPOINTS statement .)
    CASE            reduce using rule 53 (case -> INTEGER TWOPOINTS statement .)
    WHILE           reduce using rule 53 (case -> INTEGER TWOPOINTS statement .)
    REPEAT          reduce using rule 53 (case -> INTEGER TWOPOINTS statement .)
    FOR             reduce using rule 53 (case -> INTEGER TWOPOINTS statement .)
    BEGIN           reduce using rule 53 (case -> INTEGER TWOPOINTS statement .)
    IF              reduce using rule 53 (case -> INTEGER TWOPOINTS statement .)
    ELSE            reduce using rule 53 (case -> INTEGER TWOPOINTS statement .)
    INTEGER         reduce using rule 53 (case -> INTEGER TWOPOINTS statement .)
    REAL            reduce using rule 53 (case -> INTEGER TWOPOINTS statement .)
    END             reduce using rule 53 (case -> INTEGER TWOPOINTS statement .)
    UNTIL           reduce using rule 53 (case -> INTEGER TWOPOINTS statement .)

  ! END             [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! ID              [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! CASE            [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! WHILE           [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! REPEAT          [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! FOR             [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! BEGIN           [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! IF              [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! ELSE            [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! INTEGER         [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! REAL            [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! UNTIL           [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! END             [ reduce using rule 60 (for_statement -> statement .) ]
  ! ID              [ reduce using rule 60 (for_statement -> statement .) ]
  ! CASE            [ reduce using rule 60 (for_statement -> statement .) ]
  ! WHILE           [ reduce using rule 60 (for_statement -> statement .) ]
  ! REPEAT          [ reduce using rule 60 (for_statement -> statement .) ]
  ! FOR             [ reduce using rule 60 (for_statement -> statement .) ]
  ! BEGIN           [ reduce using rule 60 (for_statement -> statement .) ]
  ! IF              [ reduce using rule 60 (for_statement -> statement .) ]
  ! ELSE            [ reduce using rule 60 (for_statement -> statement .) ]
  ! INTEGER         [ reduce using rule 60 (for_statement -> statement .) ]
  ! REAL            [ reduce using rule 60 (for_statement -> statement .) ]
  ! UNTIL           [ reduce using rule 60 (for_statement -> statement .) ]


state 121

    (54) case -> REAL TWOPOINTS statement .
    (58) repeat_statement -> statement .
    (60) for_statement -> statement .

  ! reduce/reduce conflict for END resolved using rule 54 (case -> REAL TWOPOINTS statement .)
  ! reduce/reduce conflict for ID resolved using rule 54 (case -> REAL TWOPOINTS statement .)
  ! reduce/reduce conflict for CASE resolved using rule 54 (case -> REAL TWOPOINTS statement .)
  ! reduce/reduce conflict for WHILE resolved using rule 54 (case -> REAL TWOPOINTS statement .)
  ! reduce/reduce conflict for REPEAT resolved using rule 54 (case -> REAL TWOPOINTS statement .)
  ! reduce/reduce conflict for FOR resolved using rule 54 (case -> REAL TWOPOINTS statement .)
  ! reduce/reduce conflict for BEGIN resolved using rule 54 (case -> REAL TWOPOINTS statement .)
  ! reduce/reduce conflict for IF resolved using rule 54 (case -> REAL TWOPOINTS statement .)
  ! reduce/reduce conflict for ELSE resolved using rule 54 (case -> REAL TWOPOINTS statement .)
  ! reduce/reduce conflict for INTEGER resolved using rule 54 (case -> REAL TWOPOINTS statement .)
  ! reduce/reduce conflict for REAL resolved using rule 54 (case -> REAL TWOPOINTS statement .)
  ! reduce/reduce conflict for UNTIL resolved using rule 54 (case -> REAL TWOPOINTS statement .)
  ! reduce/reduce conflict for END resolved using rule 54 (case -> REAL TWOPOINTS statement .)
  ! reduce/reduce conflict for ID resolved using rule 54 (case -> REAL TWOPOINTS statement .)
  ! reduce/reduce conflict for CASE resolved using rule 54 (case -> REAL TWOPOINTS statement .)
  ! reduce/reduce conflict for WHILE resolved using rule 54 (case -> REAL TWOPOINTS statement .)
  ! reduce/reduce conflict for REPEAT resolved using rule 54 (case -> REAL TWOPOINTS statement .)
  ! reduce/reduce conflict for FOR resolved using rule 54 (case -> REAL TWOPOINTS statement .)
  ! reduce/reduce conflict for BEGIN resolved using rule 54 (case -> REAL TWOPOINTS statement .)
  ! reduce/reduce conflict for IF resolved using rule 54 (case -> REAL TWOPOINTS statement .)
  ! reduce/reduce conflict for ELSE resolved using rule 54 (case -> REAL TWOPOINTS statement .)
  ! reduce/reduce conflict for INTEGER resolved using rule 54 (case -> REAL TWOPOINTS statement .)
  ! reduce/reduce conflict for REAL resolved using rule 54 (case -> REAL TWOPOINTS statement .)
  ! reduce/reduce conflict for UNTIL resolved using rule 54 (case -> REAL TWOPOINTS statement .)
    ID              reduce using rule 54 (case -> REAL TWOPOINTS statement .)
    CASE            reduce using rule 54 (case -> REAL TWOPOINTS statement .)
    WHILE           reduce using rule 54 (case -> REAL TWOPOINTS statement .)
    REPEAT          reduce using rule 54 (case -> REAL TWOPOINTS statement .)
    FOR             reduce using rule 54 (case -> REAL TWOPOINTS statement .)
    BEGIN           reduce using rule 54 (case -> REAL TWOPOINTS statement .)
    IF              reduce using rule 54 (case -> REAL TWOPOINTS statement .)
    ELSE            reduce using rule 54 (case -> REAL TWOPOINTS statement .)
    INTEGER         reduce using rule 54 (case -> REAL TWOPOINTS statement .)
    REAL            reduce using rule 54 (case -> REAL TWOPOINTS statement .)
    END             reduce using rule 54 (case -> REAL TWOPOINTS statement .)
    UNTIL           reduce using rule 54 (case -> REAL TWOPOINTS statement .)

  ! END             [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! ID              [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! CASE            [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! WHILE           [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! REPEAT          [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! FOR             [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! BEGIN           [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! IF              [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! ELSE            [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! INTEGER         [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! REAL            [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! UNTIL           [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! END             [ reduce using rule 60 (for_statement -> statement .) ]
  ! ID              [ reduce using rule 60 (for_statement -> statement .) ]
  ! CASE            [ reduce using rule 60 (for_statement -> statement .) ]
  ! WHILE           [ reduce using rule 60 (for_statement -> statement .) ]
  ! REPEAT          [ reduce using rule 60 (for_statement -> statement .) ]
  ! FOR             [ reduce using rule 60 (for_statement -> statement .) ]
  ! BEGIN           [ reduce using rule 60 (for_statement -> statement .) ]
  ! IF              [ reduce using rule 60 (for_statement -> statement .) ]
  ! ELSE            [ reduce using rule 60 (for_statement -> statement .) ]
  ! INTEGER         [ reduce using rule 60 (for_statement -> statement .) ]
  ! REAL            [ reduce using rule 60 (for_statement -> statement .) ]
  ! UNTIL           [ reduce using rule 60 (for_statement -> statement .) ]


state 122

    (23) procedure_declaration -> PROCEDURE ID LPARENT param_section RPARENT . SEMICOLON

    SEMICOLON       shift and go to state 148


state 123

    (25) param_section -> identifier_list TWOPOINTS . types SEMICOLON param_section
    (12) types -> . INTEGER
    (13) types -> . REAL
    (14) types -> . STRING
    (15) types -> . BOOLEAN
    (16) types -> . CHAR
    (17) types -> . ID

    INTEGER         shift and go to state 31
    REAL            shift and go to state 32
    STRING          shift and go to state 33
    BOOLEAN         shift and go to state 34
    CHAR            shift and go to state 35
    ID              shift and go to state 29

    types                          shift and go to state 149

state 124

    (24) function_declaration -> FUNCTION ID LPARENT param_section RPARENT . TWOPOINTS types SEMICOLON

    TWOPOINTS       shift and go to state 150


state 125

    (10) var_declaration -> identifier_list TWOPOINTS types SEMICOLON var_declaration .

    PROCEDURE       reduce using rule 10 (var_declaration -> identifier_list TWOPOINTS types SEMICOLON var_declaration .)
    FUNCTION        reduce using rule 10 (var_declaration -> identifier_list TWOPOINTS types SEMICOLON var_declaration .)
    BEGIN           reduce using rule 10 (var_declaration -> identifier_list TWOPOINTS types SEMICOLON var_declaration .)
    $end            reduce using rule 10 (var_declaration -> identifier_list TWOPOINTS types SEMICOLON var_declaration .)


state 126

    (29) compound_statement_semicolon -> BEGIN statement END SEMICOLON .

    ID              reduce using rule 29 (compound_statement_semicolon -> BEGIN statement END SEMICOLON .)
    CASE            reduce using rule 29 (compound_statement_semicolon -> BEGIN statement END SEMICOLON .)
    WHILE           reduce using rule 29 (compound_statement_semicolon -> BEGIN statement END SEMICOLON .)
    REPEAT          reduce using rule 29 (compound_statement_semicolon -> BEGIN statement END SEMICOLON .)
    FOR             reduce using rule 29 (compound_statement_semicolon -> BEGIN statement END SEMICOLON .)
    BEGIN           reduce using rule 29 (compound_statement_semicolon -> BEGIN statement END SEMICOLON .)
    IF              reduce using rule 29 (compound_statement_semicolon -> BEGIN statement END SEMICOLON .)
    ELSE            reduce using rule 29 (compound_statement_semicolon -> BEGIN statement END SEMICOLON .)
    INTEGER         reduce using rule 29 (compound_statement_semicolon -> BEGIN statement END SEMICOLON .)
    REAL            reduce using rule 29 (compound_statement_semicolon -> BEGIN statement END SEMICOLON .)
    END             reduce using rule 29 (compound_statement_semicolon -> BEGIN statement END SEMICOLON .)
    UNTIL           reduce using rule 29 (compound_statement_semicolon -> BEGIN statement END SEMICOLON .)


state 127

    (39) assign_statement -> ID ASSIGNMENT expr SEMICOLON .

    ID              reduce using rule 39 (assign_statement -> ID ASSIGNMENT expr SEMICOLON .)
    CASE            reduce using rule 39 (assign_statement -> ID ASSIGNMENT expr SEMICOLON .)
    WHILE           reduce using rule 39 (assign_statement -> ID ASSIGNMENT expr SEMICOLON .)
    REPEAT          reduce using rule 39 (assign_statement -> ID ASSIGNMENT expr SEMICOLON .)
    FOR             reduce using rule 39 (assign_statement -> ID ASSIGNMENT expr SEMICOLON .)
    BEGIN           reduce using rule 39 (assign_statement -> ID ASSIGNMENT expr SEMICOLON .)
    IF              reduce using rule 39 (assign_statement -> ID ASSIGNMENT expr SEMICOLON .)
    ELSE            reduce using rule 39 (assign_statement -> ID ASSIGNMENT expr SEMICOLON .)
    INTEGER         reduce using rule 39 (assign_statement -> ID ASSIGNMENT expr SEMICOLON .)
    REAL            reduce using rule 39 (assign_statement -> ID ASSIGNMENT expr SEMICOLON .)
    END             reduce using rule 39 (assign_statement -> ID ASSIGNMENT expr SEMICOLON .)
    UNTIL           reduce using rule 39 (assign_statement -> ID ASSIGNMENT expr SEMICOLON .)


state 128

    (40) procedure_call -> ID LPARENT expr_list RPARENT . SEMICOLON

    SEMICOLON       shift and go to state 151


state 129

    (51) case_statement -> CASE expr OF case . END SEMICOLON

    END             shift and go to state 152


state 130

    (55) case -> ID . TWOPOINTS statement

    TWOPOINTS       shift and go to state 75


state 131

    (64) relop_simple_expr -> relop simple_expr . relop_simple_expr
    (64) relop_simple_expr -> . relop simple_expr relop_simple_expr
    (65) relop_simple_expr -> .
    (66) relop -> . EQUALS
    (67) relop -> . LTHAN
    (68) relop -> . GTHAN
    (69) relop -> . DIFFERENT
    (70) relop -> . GEQUALS
    (71) relop -> . LEQUALS

    OF              reduce using rule 65 (relop_simple_expr -> .)
    DO              reduce using rule 65 (relop_simple_expr -> .)
    COMMA           reduce using rule 65 (relop_simple_expr -> .)
    THEN            reduce using rule 65 (relop_simple_expr -> .)
    SEMICOLON       reduce using rule 65 (relop_simple_expr -> .)
    RPARENT         reduce using rule 65 (relop_simple_expr -> .)
    TO              reduce using rule 65 (relop_simple_expr -> .)
    EQUALS          shift and go to state 103
    LTHAN           shift and go to state 104
    GTHAN           shift and go to state 105
    DIFFERENT       shift and go to state 106
    GEQUALS         shift and go to state 107
    LEQUALS         shift and go to state 108

    relop                          shift and go to state 102
    relop_simple_expr              shift and go to state 153

state 132

    (73) simple_expr -> uplus_uminus factor addop_mulop . factor simple_expr
    (86) factor -> . ID
    (87) factor -> . INTEGER
    (88) factor -> . REAL
    (89) factor -> . STRING
    (90) factor -> . NOT factor
    (91) factor -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for REAL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
    ID              shift and go to state 110
    INTEGER         shift and go to state 111
    REAL            shift and go to state 112
    STRING          shift and go to state 113
    NOT             shift and go to state 114
    PLUS            reduce using rule 91 (factor -> .)
    MINUS           reduce using rule 91 (factor -> .)
    OR              reduce using rule 91 (factor -> .)
    TIMES           reduce using rule 91 (factor -> .)
    DIVIDE          reduce using rule 91 (factor -> .)
    DIV             reduce using rule 91 (factor -> .)
    MOD             reduce using rule 91 (factor -> .)
    AND             reduce using rule 91 (factor -> .)
    UPLUS           reduce using rule 91 (factor -> .)
    UMINUS          reduce using rule 91 (factor -> .)
    EQUALS          reduce using rule 91 (factor -> .)
    LTHAN           reduce using rule 91 (factor -> .)
    GTHAN           reduce using rule 91 (factor -> .)
    DIFFERENT       reduce using rule 91 (factor -> .)
    GEQUALS         reduce using rule 91 (factor -> .)
    LEQUALS         reduce using rule 91 (factor -> .)
    OF              reduce using rule 91 (factor -> .)
    DO              reduce using rule 91 (factor -> .)
    COMMA           reduce using rule 91 (factor -> .)
    THEN            reduce using rule 91 (factor -> .)
    SEMICOLON       reduce using rule 91 (factor -> .)
    RPARENT         reduce using rule 91 (factor -> .)
    TO              reduce using rule 91 (factor -> .)

  ! ID              [ reduce using rule 91 (factor -> .) ]
  ! INTEGER         [ reduce using rule 91 (factor -> .) ]
  ! REAL            [ reduce using rule 91 (factor -> .) ]
  ! STRING          [ reduce using rule 91 (factor -> .) ]
  ! NOT             [ reduce using rule 91 (factor -> .) ]

    factor                         shift and go to state 154

state 133

    (77) addop_mulop -> PLUS .

    PLUS            reduce using rule 77 (addop_mulop -> PLUS .)
    MINUS           reduce using rule 77 (addop_mulop -> PLUS .)
    OR              reduce using rule 77 (addop_mulop -> PLUS .)
    TIMES           reduce using rule 77 (addop_mulop -> PLUS .)
    DIVIDE          reduce using rule 77 (addop_mulop -> PLUS .)
    DIV             reduce using rule 77 (addop_mulop -> PLUS .)
    MOD             reduce using rule 77 (addop_mulop -> PLUS .)
    AND             reduce using rule 77 (addop_mulop -> PLUS .)
    ID              reduce using rule 77 (addop_mulop -> PLUS .)
    INTEGER         reduce using rule 77 (addop_mulop -> PLUS .)
    REAL            reduce using rule 77 (addop_mulop -> PLUS .)
    STRING          reduce using rule 77 (addop_mulop -> PLUS .)
    NOT             reduce using rule 77 (addop_mulop -> PLUS .)
    UPLUS           reduce using rule 77 (addop_mulop -> PLUS .)
    UMINUS          reduce using rule 77 (addop_mulop -> PLUS .)
    EQUALS          reduce using rule 77 (addop_mulop -> PLUS .)
    LTHAN           reduce using rule 77 (addop_mulop -> PLUS .)
    GTHAN           reduce using rule 77 (addop_mulop -> PLUS .)
    DIFFERENT       reduce using rule 77 (addop_mulop -> PLUS .)
    GEQUALS         reduce using rule 77 (addop_mulop -> PLUS .)
    LEQUALS         reduce using rule 77 (addop_mulop -> PLUS .)
    OF              reduce using rule 77 (addop_mulop -> PLUS .)
    DO              reduce using rule 77 (addop_mulop -> PLUS .)
    COMMA           reduce using rule 77 (addop_mulop -> PLUS .)
    THEN            reduce using rule 77 (addop_mulop -> PLUS .)
    SEMICOLON       reduce using rule 77 (addop_mulop -> PLUS .)
    RPARENT         reduce using rule 77 (addop_mulop -> PLUS .)
    TO              reduce using rule 77 (addop_mulop -> PLUS .)


state 134

    (78) addop_mulop -> MINUS .

    PLUS            reduce using rule 78 (addop_mulop -> MINUS .)
    MINUS           reduce using rule 78 (addop_mulop -> MINUS .)
    OR              reduce using rule 78 (addop_mulop -> MINUS .)
    TIMES           reduce using rule 78 (addop_mulop -> MINUS .)
    DIVIDE          reduce using rule 78 (addop_mulop -> MINUS .)
    DIV             reduce using rule 78 (addop_mulop -> MINUS .)
    MOD             reduce using rule 78 (addop_mulop -> MINUS .)
    AND             reduce using rule 78 (addop_mulop -> MINUS .)
    ID              reduce using rule 78 (addop_mulop -> MINUS .)
    INTEGER         reduce using rule 78 (addop_mulop -> MINUS .)
    REAL            reduce using rule 78 (addop_mulop -> MINUS .)
    STRING          reduce using rule 78 (addop_mulop -> MINUS .)
    NOT             reduce using rule 78 (addop_mulop -> MINUS .)
    UPLUS           reduce using rule 78 (addop_mulop -> MINUS .)
    UMINUS          reduce using rule 78 (addop_mulop -> MINUS .)
    EQUALS          reduce using rule 78 (addop_mulop -> MINUS .)
    LTHAN           reduce using rule 78 (addop_mulop -> MINUS .)
    GTHAN           reduce using rule 78 (addop_mulop -> MINUS .)
    DIFFERENT       reduce using rule 78 (addop_mulop -> MINUS .)
    GEQUALS         reduce using rule 78 (addop_mulop -> MINUS .)
    LEQUALS         reduce using rule 78 (addop_mulop -> MINUS .)
    OF              reduce using rule 78 (addop_mulop -> MINUS .)
    DO              reduce using rule 78 (addop_mulop -> MINUS .)
    COMMA           reduce using rule 78 (addop_mulop -> MINUS .)
    THEN            reduce using rule 78 (addop_mulop -> MINUS .)
    SEMICOLON       reduce using rule 78 (addop_mulop -> MINUS .)
    RPARENT         reduce using rule 78 (addop_mulop -> MINUS .)
    TO              reduce using rule 78 (addop_mulop -> MINUS .)


state 135

    (79) addop_mulop -> OR .

    PLUS            reduce using rule 79 (addop_mulop -> OR .)
    MINUS           reduce using rule 79 (addop_mulop -> OR .)
    OR              reduce using rule 79 (addop_mulop -> OR .)
    TIMES           reduce using rule 79 (addop_mulop -> OR .)
    DIVIDE          reduce using rule 79 (addop_mulop -> OR .)
    DIV             reduce using rule 79 (addop_mulop -> OR .)
    MOD             reduce using rule 79 (addop_mulop -> OR .)
    AND             reduce using rule 79 (addop_mulop -> OR .)
    ID              reduce using rule 79 (addop_mulop -> OR .)
    INTEGER         reduce using rule 79 (addop_mulop -> OR .)
    REAL            reduce using rule 79 (addop_mulop -> OR .)
    STRING          reduce using rule 79 (addop_mulop -> OR .)
    NOT             reduce using rule 79 (addop_mulop -> OR .)
    UPLUS           reduce using rule 79 (addop_mulop -> OR .)
    UMINUS          reduce using rule 79 (addop_mulop -> OR .)
    EQUALS          reduce using rule 79 (addop_mulop -> OR .)
    LTHAN           reduce using rule 79 (addop_mulop -> OR .)
    GTHAN           reduce using rule 79 (addop_mulop -> OR .)
    DIFFERENT       reduce using rule 79 (addop_mulop -> OR .)
    GEQUALS         reduce using rule 79 (addop_mulop -> OR .)
    LEQUALS         reduce using rule 79 (addop_mulop -> OR .)
    OF              reduce using rule 79 (addop_mulop -> OR .)
    DO              reduce using rule 79 (addop_mulop -> OR .)
    COMMA           reduce using rule 79 (addop_mulop -> OR .)
    THEN            reduce using rule 79 (addop_mulop -> OR .)
    SEMICOLON       reduce using rule 79 (addop_mulop -> OR .)
    RPARENT         reduce using rule 79 (addop_mulop -> OR .)
    TO              reduce using rule 79 (addop_mulop -> OR .)


state 136

    (80) addop_mulop -> TIMES .

    PLUS            reduce using rule 80 (addop_mulop -> TIMES .)
    MINUS           reduce using rule 80 (addop_mulop -> TIMES .)
    OR              reduce using rule 80 (addop_mulop -> TIMES .)
    TIMES           reduce using rule 80 (addop_mulop -> TIMES .)
    DIVIDE          reduce using rule 80 (addop_mulop -> TIMES .)
    DIV             reduce using rule 80 (addop_mulop -> TIMES .)
    MOD             reduce using rule 80 (addop_mulop -> TIMES .)
    AND             reduce using rule 80 (addop_mulop -> TIMES .)
    ID              reduce using rule 80 (addop_mulop -> TIMES .)
    INTEGER         reduce using rule 80 (addop_mulop -> TIMES .)
    REAL            reduce using rule 80 (addop_mulop -> TIMES .)
    STRING          reduce using rule 80 (addop_mulop -> TIMES .)
    NOT             reduce using rule 80 (addop_mulop -> TIMES .)
    UPLUS           reduce using rule 80 (addop_mulop -> TIMES .)
    UMINUS          reduce using rule 80 (addop_mulop -> TIMES .)
    EQUALS          reduce using rule 80 (addop_mulop -> TIMES .)
    LTHAN           reduce using rule 80 (addop_mulop -> TIMES .)
    GTHAN           reduce using rule 80 (addop_mulop -> TIMES .)
    DIFFERENT       reduce using rule 80 (addop_mulop -> TIMES .)
    GEQUALS         reduce using rule 80 (addop_mulop -> TIMES .)
    LEQUALS         reduce using rule 80 (addop_mulop -> TIMES .)
    OF              reduce using rule 80 (addop_mulop -> TIMES .)
    DO              reduce using rule 80 (addop_mulop -> TIMES .)
    COMMA           reduce using rule 80 (addop_mulop -> TIMES .)
    THEN            reduce using rule 80 (addop_mulop -> TIMES .)
    SEMICOLON       reduce using rule 80 (addop_mulop -> TIMES .)
    RPARENT         reduce using rule 80 (addop_mulop -> TIMES .)
    TO              reduce using rule 80 (addop_mulop -> TIMES .)


state 137

    (81) addop_mulop -> DIVIDE .

    PLUS            reduce using rule 81 (addop_mulop -> DIVIDE .)
    MINUS           reduce using rule 81 (addop_mulop -> DIVIDE .)
    OR              reduce using rule 81 (addop_mulop -> DIVIDE .)
    TIMES           reduce using rule 81 (addop_mulop -> DIVIDE .)
    DIVIDE          reduce using rule 81 (addop_mulop -> DIVIDE .)
    DIV             reduce using rule 81 (addop_mulop -> DIVIDE .)
    MOD             reduce using rule 81 (addop_mulop -> DIVIDE .)
    AND             reduce using rule 81 (addop_mulop -> DIVIDE .)
    ID              reduce using rule 81 (addop_mulop -> DIVIDE .)
    INTEGER         reduce using rule 81 (addop_mulop -> DIVIDE .)
    REAL            reduce using rule 81 (addop_mulop -> DIVIDE .)
    STRING          reduce using rule 81 (addop_mulop -> DIVIDE .)
    NOT             reduce using rule 81 (addop_mulop -> DIVIDE .)
    UPLUS           reduce using rule 81 (addop_mulop -> DIVIDE .)
    UMINUS          reduce using rule 81 (addop_mulop -> DIVIDE .)
    EQUALS          reduce using rule 81 (addop_mulop -> DIVIDE .)
    LTHAN           reduce using rule 81 (addop_mulop -> DIVIDE .)
    GTHAN           reduce using rule 81 (addop_mulop -> DIVIDE .)
    DIFFERENT       reduce using rule 81 (addop_mulop -> DIVIDE .)
    GEQUALS         reduce using rule 81 (addop_mulop -> DIVIDE .)
    LEQUALS         reduce using rule 81 (addop_mulop -> DIVIDE .)
    OF              reduce using rule 81 (addop_mulop -> DIVIDE .)
    DO              reduce using rule 81 (addop_mulop -> DIVIDE .)
    COMMA           reduce using rule 81 (addop_mulop -> DIVIDE .)
    THEN            reduce using rule 81 (addop_mulop -> DIVIDE .)
    SEMICOLON       reduce using rule 81 (addop_mulop -> DIVIDE .)
    RPARENT         reduce using rule 81 (addop_mulop -> DIVIDE .)
    TO              reduce using rule 81 (addop_mulop -> DIVIDE .)


state 138

    (82) addop_mulop -> DIV .

    PLUS            reduce using rule 82 (addop_mulop -> DIV .)
    MINUS           reduce using rule 82 (addop_mulop -> DIV .)
    OR              reduce using rule 82 (addop_mulop -> DIV .)
    TIMES           reduce using rule 82 (addop_mulop -> DIV .)
    DIVIDE          reduce using rule 82 (addop_mulop -> DIV .)
    DIV             reduce using rule 82 (addop_mulop -> DIV .)
    MOD             reduce using rule 82 (addop_mulop -> DIV .)
    AND             reduce using rule 82 (addop_mulop -> DIV .)
    ID              reduce using rule 82 (addop_mulop -> DIV .)
    INTEGER         reduce using rule 82 (addop_mulop -> DIV .)
    REAL            reduce using rule 82 (addop_mulop -> DIV .)
    STRING          reduce using rule 82 (addop_mulop -> DIV .)
    NOT             reduce using rule 82 (addop_mulop -> DIV .)
    UPLUS           reduce using rule 82 (addop_mulop -> DIV .)
    UMINUS          reduce using rule 82 (addop_mulop -> DIV .)
    EQUALS          reduce using rule 82 (addop_mulop -> DIV .)
    LTHAN           reduce using rule 82 (addop_mulop -> DIV .)
    GTHAN           reduce using rule 82 (addop_mulop -> DIV .)
    DIFFERENT       reduce using rule 82 (addop_mulop -> DIV .)
    GEQUALS         reduce using rule 82 (addop_mulop -> DIV .)
    LEQUALS         reduce using rule 82 (addop_mulop -> DIV .)
    OF              reduce using rule 82 (addop_mulop -> DIV .)
    DO              reduce using rule 82 (addop_mulop -> DIV .)
    COMMA           reduce using rule 82 (addop_mulop -> DIV .)
    THEN            reduce using rule 82 (addop_mulop -> DIV .)
    SEMICOLON       reduce using rule 82 (addop_mulop -> DIV .)
    RPARENT         reduce using rule 82 (addop_mulop -> DIV .)
    TO              reduce using rule 82 (addop_mulop -> DIV .)


state 139

    (83) addop_mulop -> MOD .

    PLUS            reduce using rule 83 (addop_mulop -> MOD .)
    MINUS           reduce using rule 83 (addop_mulop -> MOD .)
    OR              reduce using rule 83 (addop_mulop -> MOD .)
    TIMES           reduce using rule 83 (addop_mulop -> MOD .)
    DIVIDE          reduce using rule 83 (addop_mulop -> MOD .)
    DIV             reduce using rule 83 (addop_mulop -> MOD .)
    MOD             reduce using rule 83 (addop_mulop -> MOD .)
    AND             reduce using rule 83 (addop_mulop -> MOD .)
    ID              reduce using rule 83 (addop_mulop -> MOD .)
    INTEGER         reduce using rule 83 (addop_mulop -> MOD .)
    REAL            reduce using rule 83 (addop_mulop -> MOD .)
    STRING          reduce using rule 83 (addop_mulop -> MOD .)
    NOT             reduce using rule 83 (addop_mulop -> MOD .)
    UPLUS           reduce using rule 83 (addop_mulop -> MOD .)
    UMINUS          reduce using rule 83 (addop_mulop -> MOD .)
    EQUALS          reduce using rule 83 (addop_mulop -> MOD .)
    LTHAN           reduce using rule 83 (addop_mulop -> MOD .)
    GTHAN           reduce using rule 83 (addop_mulop -> MOD .)
    DIFFERENT       reduce using rule 83 (addop_mulop -> MOD .)
    GEQUALS         reduce using rule 83 (addop_mulop -> MOD .)
    LEQUALS         reduce using rule 83 (addop_mulop -> MOD .)
    OF              reduce using rule 83 (addop_mulop -> MOD .)
    DO              reduce using rule 83 (addop_mulop -> MOD .)
    COMMA           reduce using rule 83 (addop_mulop -> MOD .)
    THEN            reduce using rule 83 (addop_mulop -> MOD .)
    SEMICOLON       reduce using rule 83 (addop_mulop -> MOD .)
    RPARENT         reduce using rule 83 (addop_mulop -> MOD .)
    TO              reduce using rule 83 (addop_mulop -> MOD .)


state 140

    (84) addop_mulop -> AND .

    PLUS            reduce using rule 84 (addop_mulop -> AND .)
    MINUS           reduce using rule 84 (addop_mulop -> AND .)
    OR              reduce using rule 84 (addop_mulop -> AND .)
    TIMES           reduce using rule 84 (addop_mulop -> AND .)
    DIVIDE          reduce using rule 84 (addop_mulop -> AND .)
    DIV             reduce using rule 84 (addop_mulop -> AND .)
    MOD             reduce using rule 84 (addop_mulop -> AND .)
    AND             reduce using rule 84 (addop_mulop -> AND .)
    ID              reduce using rule 84 (addop_mulop -> AND .)
    INTEGER         reduce using rule 84 (addop_mulop -> AND .)
    REAL            reduce using rule 84 (addop_mulop -> AND .)
    STRING          reduce using rule 84 (addop_mulop -> AND .)
    NOT             reduce using rule 84 (addop_mulop -> AND .)
    UPLUS           reduce using rule 84 (addop_mulop -> AND .)
    UMINUS          reduce using rule 84 (addop_mulop -> AND .)
    EQUALS          reduce using rule 84 (addop_mulop -> AND .)
    LTHAN           reduce using rule 84 (addop_mulop -> AND .)
    GTHAN           reduce using rule 84 (addop_mulop -> AND .)
    DIFFERENT       reduce using rule 84 (addop_mulop -> AND .)
    GEQUALS         reduce using rule 84 (addop_mulop -> AND .)
    LEQUALS         reduce using rule 84 (addop_mulop -> AND .)
    OF              reduce using rule 84 (addop_mulop -> AND .)
    DO              reduce using rule 84 (addop_mulop -> AND .)
    COMMA           reduce using rule 84 (addop_mulop -> AND .)
    THEN            reduce using rule 84 (addop_mulop -> AND .)
    SEMICOLON       reduce using rule 84 (addop_mulop -> AND .)
    RPARENT         reduce using rule 84 (addop_mulop -> AND .)
    TO              reduce using rule 84 (addop_mulop -> AND .)


state 141

    (90) factor -> NOT factor .

    PLUS            reduce using rule 90 (factor -> NOT factor .)
    MINUS           reduce using rule 90 (factor -> NOT factor .)
    OR              reduce using rule 90 (factor -> NOT factor .)
    TIMES           reduce using rule 90 (factor -> NOT factor .)
    DIVIDE          reduce using rule 90 (factor -> NOT factor .)
    DIV             reduce using rule 90 (factor -> NOT factor .)
    MOD             reduce using rule 90 (factor -> NOT factor .)
    AND             reduce using rule 90 (factor -> NOT factor .)
    ID              reduce using rule 90 (factor -> NOT factor .)
    INTEGER         reduce using rule 90 (factor -> NOT factor .)
    REAL            reduce using rule 90 (factor -> NOT factor .)
    STRING          reduce using rule 90 (factor -> NOT factor .)
    NOT             reduce using rule 90 (factor -> NOT factor .)
    UPLUS           reduce using rule 90 (factor -> NOT factor .)
    UMINUS          reduce using rule 90 (factor -> NOT factor .)
    EQUALS          reduce using rule 90 (factor -> NOT factor .)
    LTHAN           reduce using rule 90 (factor -> NOT factor .)
    GTHAN           reduce using rule 90 (factor -> NOT factor .)
    DIFFERENT       reduce using rule 90 (factor -> NOT factor .)
    GEQUALS         reduce using rule 90 (factor -> NOT factor .)
    LEQUALS         reduce using rule 90 (factor -> NOT factor .)
    OF              reduce using rule 90 (factor -> NOT factor .)
    DO              reduce using rule 90 (factor -> NOT factor .)
    COMMA           reduce using rule 90 (factor -> NOT factor .)
    THEN            reduce using rule 90 (factor -> NOT factor .)
    SEMICOLON       reduce using rule 90 (factor -> NOT factor .)
    RPARENT         reduce using rule 90 (factor -> NOT factor .)
    TO              reduce using rule 90 (factor -> NOT factor .)


state 142

    (56) while_statement -> WHILE expr DO statement .
    (58) repeat_statement -> statement .
    (60) for_statement -> statement .

  ! reduce/reduce conflict for END resolved using rule 56 (while_statement -> WHILE expr DO statement .)
  ! reduce/reduce conflict for ID resolved using rule 56 (while_statement -> WHILE expr DO statement .)
  ! reduce/reduce conflict for CASE resolved using rule 56 (while_statement -> WHILE expr DO statement .)
  ! reduce/reduce conflict for WHILE resolved using rule 56 (while_statement -> WHILE expr DO statement .)
  ! reduce/reduce conflict for REPEAT resolved using rule 56 (while_statement -> WHILE expr DO statement .)
  ! reduce/reduce conflict for FOR resolved using rule 56 (while_statement -> WHILE expr DO statement .)
  ! reduce/reduce conflict for BEGIN resolved using rule 56 (while_statement -> WHILE expr DO statement .)
  ! reduce/reduce conflict for IF resolved using rule 56 (while_statement -> WHILE expr DO statement .)
  ! reduce/reduce conflict for ELSE resolved using rule 56 (while_statement -> WHILE expr DO statement .)
  ! reduce/reduce conflict for INTEGER resolved using rule 56 (while_statement -> WHILE expr DO statement .)
  ! reduce/reduce conflict for REAL resolved using rule 56 (while_statement -> WHILE expr DO statement .)
  ! reduce/reduce conflict for UNTIL resolved using rule 56 (while_statement -> WHILE expr DO statement .)
  ! reduce/reduce conflict for END resolved using rule 56 (while_statement -> WHILE expr DO statement .)
  ! reduce/reduce conflict for ID resolved using rule 56 (while_statement -> WHILE expr DO statement .)
  ! reduce/reduce conflict for CASE resolved using rule 56 (while_statement -> WHILE expr DO statement .)
  ! reduce/reduce conflict for WHILE resolved using rule 56 (while_statement -> WHILE expr DO statement .)
  ! reduce/reduce conflict for REPEAT resolved using rule 56 (while_statement -> WHILE expr DO statement .)
  ! reduce/reduce conflict for FOR resolved using rule 56 (while_statement -> WHILE expr DO statement .)
  ! reduce/reduce conflict for BEGIN resolved using rule 56 (while_statement -> WHILE expr DO statement .)
  ! reduce/reduce conflict for IF resolved using rule 56 (while_statement -> WHILE expr DO statement .)
  ! reduce/reduce conflict for ELSE resolved using rule 56 (while_statement -> WHILE expr DO statement .)
  ! reduce/reduce conflict for INTEGER resolved using rule 56 (while_statement -> WHILE expr DO statement .)
  ! reduce/reduce conflict for REAL resolved using rule 56 (while_statement -> WHILE expr DO statement .)
  ! reduce/reduce conflict for UNTIL resolved using rule 56 (while_statement -> WHILE expr DO statement .)
    ID              reduce using rule 56 (while_statement -> WHILE expr DO statement .)
    CASE            reduce using rule 56 (while_statement -> WHILE expr DO statement .)
    WHILE           reduce using rule 56 (while_statement -> WHILE expr DO statement .)
    REPEAT          reduce using rule 56 (while_statement -> WHILE expr DO statement .)
    FOR             reduce using rule 56 (while_statement -> WHILE expr DO statement .)
    BEGIN           reduce using rule 56 (while_statement -> WHILE expr DO statement .)
    IF              reduce using rule 56 (while_statement -> WHILE expr DO statement .)
    ELSE            reduce using rule 56 (while_statement -> WHILE expr DO statement .)
    INTEGER         reduce using rule 56 (while_statement -> WHILE expr DO statement .)
    REAL            reduce using rule 56 (while_statement -> WHILE expr DO statement .)
    END             reduce using rule 56 (while_statement -> WHILE expr DO statement .)
    UNTIL           reduce using rule 56 (while_statement -> WHILE expr DO statement .)

  ! END             [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! ID              [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! CASE            [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! WHILE           [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! REPEAT          [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! FOR             [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! BEGIN           [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! IF              [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! ELSE            [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! INTEGER         [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! REAL            [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! UNTIL           [ reduce using rule 58 (repeat_statement -> statement .) ]
  ! END             [ reduce using rule 60 (for_statement -> statement .) ]
  ! ID              [ reduce using rule 60 (for_statement -> statement .) ]
  ! CASE            [ reduce using rule 60 (for_statement -> statement .) ]
  ! WHILE           [ reduce using rule 60 (for_statement -> statement .) ]
  ! REPEAT          [ reduce using rule 60 (for_statement -> statement .) ]
  ! FOR             [ reduce using rule 60 (for_statement -> statement .) ]
  ! BEGIN           [ reduce using rule 60 (for_statement -> statement .) ]
  ! IF              [ reduce using rule 60 (for_statement -> statement .) ]
  ! ELSE            [ reduce using rule 60 (for_statement -> statement .) ]
  ! INTEGER         [ reduce using rule 60 (for_statement -> statement .) ]
  ! REAL            [ reduce using rule 60 (for_statement -> statement .) ]
  ! UNTIL           [ reduce using rule 60 (for_statement -> statement .) ]


state 143

    (57) repeat_statement -> REPEAT statement UNTIL expr . SEMICOLON

    SEMICOLON       shift and go to state 155


state 144

    (59) for_statement -> FOR ID ASSIGNMENT expr . TO expr DO

    TO              shift and go to state 156


state 145

    (44) if1 -> IF expr_list THEN if1 .

    ID              reduce using rule 44 (if1 -> IF expr_list THEN if1 .)
    CASE            reduce using rule 44 (if1 -> IF expr_list THEN if1 .)
    WHILE           reduce using rule 44 (if1 -> IF expr_list THEN if1 .)
    REPEAT          reduce using rule 44 (if1 -> IF expr_list THEN if1 .)
    FOR             reduce using rule 44 (if1 -> IF expr_list THEN if1 .)
    BEGIN           reduce using rule 44 (if1 -> IF expr_list THEN if1 .)
    IF              reduce using rule 44 (if1 -> IF expr_list THEN if1 .)
    ELSE            reduce using rule 44 (if1 -> IF expr_list THEN if1 .)
    INTEGER         reduce using rule 44 (if1 -> IF expr_list THEN if1 .)
    REAL            reduce using rule 44 (if1 -> IF expr_list THEN if1 .)
    END             reduce using rule 44 (if1 -> IF expr_list THEN if1 .)
    UNTIL           reduce using rule 44 (if1 -> IF expr_list THEN if1 .)


state 146

    (45) if1 -> IF expr_list THEN if2 .
    (48) if2 -> IF expr_list THEN if2 .

  ! reduce/reduce conflict for ID resolved using rule 45 (if1 -> IF expr_list THEN if2 .)
  ! reduce/reduce conflict for CASE resolved using rule 45 (if1 -> IF expr_list THEN if2 .)
  ! reduce/reduce conflict for WHILE resolved using rule 45 (if1 -> IF expr_list THEN if2 .)
  ! reduce/reduce conflict for REPEAT resolved using rule 45 (if1 -> IF expr_list THEN if2 .)
  ! reduce/reduce conflict for FOR resolved using rule 45 (if1 -> IF expr_list THEN if2 .)
  ! reduce/reduce conflict for BEGIN resolved using rule 45 (if1 -> IF expr_list THEN if2 .)
  ! reduce/reduce conflict for IF resolved using rule 45 (if1 -> IF expr_list THEN if2 .)
  ! reduce/reduce conflict for ELSE resolved using rule 45 (if1 -> IF expr_list THEN if2 .)
  ! reduce/reduce conflict for INTEGER resolved using rule 45 (if1 -> IF expr_list THEN if2 .)
  ! reduce/reduce conflict for REAL resolved using rule 45 (if1 -> IF expr_list THEN if2 .)
  ! reduce/reduce conflict for END resolved using rule 45 (if1 -> IF expr_list THEN if2 .)
  ! reduce/reduce conflict for UNTIL resolved using rule 45 (if1 -> IF expr_list THEN if2 .)
    ID              reduce using rule 45 (if1 -> IF expr_list THEN if2 .)
    CASE            reduce using rule 45 (if1 -> IF expr_list THEN if2 .)
    WHILE           reduce using rule 45 (if1 -> IF expr_list THEN if2 .)
    REPEAT          reduce using rule 45 (if1 -> IF expr_list THEN if2 .)
    FOR             reduce using rule 45 (if1 -> IF expr_list THEN if2 .)
    BEGIN           reduce using rule 45 (if1 -> IF expr_list THEN if2 .)
    IF              reduce using rule 45 (if1 -> IF expr_list THEN if2 .)
    ELSE            reduce using rule 45 (if1 -> IF expr_list THEN if2 .)
    INTEGER         reduce using rule 45 (if1 -> IF expr_list THEN if2 .)
    REAL            reduce using rule 45 (if1 -> IF expr_list THEN if2 .)
    END             reduce using rule 45 (if1 -> IF expr_list THEN if2 .)
    UNTIL           reduce using rule 45 (if1 -> IF expr_list THEN if2 .)

  ! ID              [ reduce using rule 48 (if2 -> IF expr_list THEN if2 .) ]
  ! CASE            [ reduce using rule 48 (if2 -> IF expr_list THEN if2 .) ]
  ! WHILE           [ reduce using rule 48 (if2 -> IF expr_list THEN if2 .) ]
  ! REPEAT          [ reduce using rule 48 (if2 -> IF expr_list THEN if2 .) ]
  ! FOR             [ reduce using rule 48 (if2 -> IF expr_list THEN if2 .) ]
  ! BEGIN           [ reduce using rule 48 (if2 -> IF expr_list THEN if2 .) ]
  ! IF              [ reduce using rule 48 (if2 -> IF expr_list THEN if2 .) ]
  ! ELSE            [ reduce using rule 48 (if2 -> IF expr_list THEN if2 .) ]
  ! INTEGER         [ reduce using rule 48 (if2 -> IF expr_list THEN if2 .) ]
  ! REAL            [ reduce using rule 48 (if2 -> IF expr_list THEN if2 .) ]
  ! END             [ reduce using rule 48 (if2 -> IF expr_list THEN if2 .) ]
  ! UNTIL           [ reduce using rule 48 (if2 -> IF expr_list THEN if2 .) ]


state 147

    (62) expr_list -> expr COMMA expr_list .

    THEN            reduce using rule 62 (expr_list -> expr COMMA expr_list .)
    RPARENT         reduce using rule 62 (expr_list -> expr COMMA expr_list .)


state 148

    (23) procedure_declaration -> PROCEDURE ID LPARENT param_section RPARENT SEMICOLON .

    PROCEDURE       reduce using rule 23 (procedure_declaration -> PROCEDURE ID LPARENT param_section RPARENT SEMICOLON .)
    FUNCTION        reduce using rule 23 (procedure_declaration -> PROCEDURE ID LPARENT param_section RPARENT SEMICOLON .)
    BEGIN           reduce using rule 23 (procedure_declaration -> PROCEDURE ID LPARENT param_section RPARENT SEMICOLON .)
    $end            reduce using rule 23 (procedure_declaration -> PROCEDURE ID LPARENT param_section RPARENT SEMICOLON .)


state 149

    (25) param_section -> identifier_list TWOPOINTS types . SEMICOLON param_section

    SEMICOLON       shift and go to state 157


state 150

    (24) function_declaration -> FUNCTION ID LPARENT param_section RPARENT TWOPOINTS . types SEMICOLON
    (12) types -> . INTEGER
    (13) types -> . REAL
    (14) types -> . STRING
    (15) types -> . BOOLEAN
    (16) types -> . CHAR
    (17) types -> . ID

    INTEGER         shift and go to state 31
    REAL            shift and go to state 32
    STRING          shift and go to state 33
    BOOLEAN         shift and go to state 34
    CHAR            shift and go to state 35
    ID              shift and go to state 29

    types                          shift and go to state 158

state 151

    (40) procedure_call -> ID LPARENT expr_list RPARENT SEMICOLON .

    ID              reduce using rule 40 (procedure_call -> ID LPARENT expr_list RPARENT SEMICOLON .)
    CASE            reduce using rule 40 (procedure_call -> ID LPARENT expr_list RPARENT SEMICOLON .)
    WHILE           reduce using rule 40 (procedure_call -> ID LPARENT expr_list RPARENT SEMICOLON .)
    REPEAT          reduce using rule 40 (procedure_call -> ID LPARENT expr_list RPARENT SEMICOLON .)
    FOR             reduce using rule 40 (procedure_call -> ID LPARENT expr_list RPARENT SEMICOLON .)
    BEGIN           reduce using rule 40 (procedure_call -> ID LPARENT expr_list RPARENT SEMICOLON .)
    IF              reduce using rule 40 (procedure_call -> ID LPARENT expr_list RPARENT SEMICOLON .)
    ELSE            reduce using rule 40 (procedure_call -> ID LPARENT expr_list RPARENT SEMICOLON .)
    INTEGER         reduce using rule 40 (procedure_call -> ID LPARENT expr_list RPARENT SEMICOLON .)
    REAL            reduce using rule 40 (procedure_call -> ID LPARENT expr_list RPARENT SEMICOLON .)
    END             reduce using rule 40 (procedure_call -> ID LPARENT expr_list RPARENT SEMICOLON .)
    UNTIL           reduce using rule 40 (procedure_call -> ID LPARENT expr_list RPARENT SEMICOLON .)


state 152

    (51) case_statement -> CASE expr OF case END . SEMICOLON

    SEMICOLON       shift and go to state 159


state 153

    (64) relop_simple_expr -> relop simple_expr relop_simple_expr .

    OF              reduce using rule 64 (relop_simple_expr -> relop simple_expr relop_simple_expr .)
    DO              reduce using rule 64 (relop_simple_expr -> relop simple_expr relop_simple_expr .)
    COMMA           reduce using rule 64 (relop_simple_expr -> relop simple_expr relop_simple_expr .)
    THEN            reduce using rule 64 (relop_simple_expr -> relop simple_expr relop_simple_expr .)
    SEMICOLON       reduce using rule 64 (relop_simple_expr -> relop simple_expr relop_simple_expr .)
    RPARENT         reduce using rule 64 (relop_simple_expr -> relop simple_expr relop_simple_expr .)
    TO              reduce using rule 64 (relop_simple_expr -> relop simple_expr relop_simple_expr .)


state 154

    (73) simple_expr -> uplus_uminus factor addop_mulop factor . simple_expr
    (72) simple_expr -> . uplus_uminus factor
    (73) simple_expr -> . uplus_uminus factor addop_mulop factor simple_expr
    (74) uplus_uminus -> . UPLUS
    (75) uplus_uminus -> . UMINUS
    (76) uplus_uminus -> .

  ! shift/reduce conflict for UPLUS resolved as shift
  ! shift/reduce conflict for UMINUS resolved as shift
    UPLUS           shift and go to state 79
    UMINUS          shift and go to state 80
    PLUS            reduce using rule 76 (uplus_uminus -> .)
    MINUS           reduce using rule 76 (uplus_uminus -> .)
    OR              reduce using rule 76 (uplus_uminus -> .)
    TIMES           reduce using rule 76 (uplus_uminus -> .)
    DIVIDE          reduce using rule 76 (uplus_uminus -> .)
    DIV             reduce using rule 76 (uplus_uminus -> .)
    MOD             reduce using rule 76 (uplus_uminus -> .)
    AND             reduce using rule 76 (uplus_uminus -> .)
    ID              reduce using rule 76 (uplus_uminus -> .)
    INTEGER         reduce using rule 76 (uplus_uminus -> .)
    REAL            reduce using rule 76 (uplus_uminus -> .)
    STRING          reduce using rule 76 (uplus_uminus -> .)
    NOT             reduce using rule 76 (uplus_uminus -> .)
    EQUALS          reduce using rule 76 (uplus_uminus -> .)
    LTHAN           reduce using rule 76 (uplus_uminus -> .)
    GTHAN           reduce using rule 76 (uplus_uminus -> .)
    DIFFERENT       reduce using rule 76 (uplus_uminus -> .)
    GEQUALS         reduce using rule 76 (uplus_uminus -> .)
    LEQUALS         reduce using rule 76 (uplus_uminus -> .)
    OF              reduce using rule 76 (uplus_uminus -> .)
    DO              reduce using rule 76 (uplus_uminus -> .)
    COMMA           reduce using rule 76 (uplus_uminus -> .)
    THEN            reduce using rule 76 (uplus_uminus -> .)
    SEMICOLON       reduce using rule 76 (uplus_uminus -> .)
    RPARENT         reduce using rule 76 (uplus_uminus -> .)
    TO              reduce using rule 76 (uplus_uminus -> .)

  ! UPLUS           [ reduce using rule 76 (uplus_uminus -> .) ]
  ! UMINUS          [ reduce using rule 76 (uplus_uminus -> .) ]

    uplus_uminus                   shift and go to state 78
    simple_expr                    shift and go to state 160

state 155

    (57) repeat_statement -> REPEAT statement UNTIL expr SEMICOLON .

    END             reduce using rule 57 (repeat_statement -> REPEAT statement UNTIL expr SEMICOLON .)
    ID              reduce using rule 57 (repeat_statement -> REPEAT statement UNTIL expr SEMICOLON .)
    CASE            reduce using rule 57 (repeat_statement -> REPEAT statement UNTIL expr SEMICOLON .)
    WHILE           reduce using rule 57 (repeat_statement -> REPEAT statement UNTIL expr SEMICOLON .)
    REPEAT          reduce using rule 57 (repeat_statement -> REPEAT statement UNTIL expr SEMICOLON .)
    FOR             reduce using rule 57 (repeat_statement -> REPEAT statement UNTIL expr SEMICOLON .)
    BEGIN           reduce using rule 57 (repeat_statement -> REPEAT statement UNTIL expr SEMICOLON .)
    IF              reduce using rule 57 (repeat_statement -> REPEAT statement UNTIL expr SEMICOLON .)
    ELSE            reduce using rule 57 (repeat_statement -> REPEAT statement UNTIL expr SEMICOLON .)
    INTEGER         reduce using rule 57 (repeat_statement -> REPEAT statement UNTIL expr SEMICOLON .)
    REAL            reduce using rule 57 (repeat_statement -> REPEAT statement UNTIL expr SEMICOLON .)
    UNTIL           reduce using rule 57 (repeat_statement -> REPEAT statement UNTIL expr SEMICOLON .)


state 156

    (59) for_statement -> FOR ID ASSIGNMENT expr TO . expr DO
    (63) expr -> . simple_expr relop_simple_expr
    (72) simple_expr -> . uplus_uminus factor
    (73) simple_expr -> . uplus_uminus factor addop_mulop factor simple_expr
    (74) uplus_uminus -> . UPLUS
    (75) uplus_uminus -> . UMINUS
    (76) uplus_uminus -> .

  ! shift/reduce conflict for UPLUS resolved as shift
  ! shift/reduce conflict for UMINUS resolved as shift
    UPLUS           shift and go to state 79
    UMINUS          shift and go to state 80
    ID              reduce using rule 76 (uplus_uminus -> .)
    INTEGER         reduce using rule 76 (uplus_uminus -> .)
    REAL            reduce using rule 76 (uplus_uminus -> .)
    STRING          reduce using rule 76 (uplus_uminus -> .)
    NOT             reduce using rule 76 (uplus_uminus -> .)
    PLUS            reduce using rule 76 (uplus_uminus -> .)
    MINUS           reduce using rule 76 (uplus_uminus -> .)
    OR              reduce using rule 76 (uplus_uminus -> .)
    TIMES           reduce using rule 76 (uplus_uminus -> .)
    DIVIDE          reduce using rule 76 (uplus_uminus -> .)
    DIV             reduce using rule 76 (uplus_uminus -> .)
    MOD             reduce using rule 76 (uplus_uminus -> .)
    AND             reduce using rule 76 (uplus_uminus -> .)
    EQUALS          reduce using rule 76 (uplus_uminus -> .)
    LTHAN           reduce using rule 76 (uplus_uminus -> .)
    GTHAN           reduce using rule 76 (uplus_uminus -> .)
    DIFFERENT       reduce using rule 76 (uplus_uminus -> .)
    GEQUALS         reduce using rule 76 (uplus_uminus -> .)
    LEQUALS         reduce using rule 76 (uplus_uminus -> .)
    DO              reduce using rule 76 (uplus_uminus -> .)

  ! UPLUS           [ reduce using rule 76 (uplus_uminus -> .) ]
  ! UMINUS          [ reduce using rule 76 (uplus_uminus -> .) ]

    expr                           shift and go to state 161
    simple_expr                    shift and go to state 77
    uplus_uminus                   shift and go to state 78

state 157

    (25) param_section -> identifier_list TWOPOINTS types SEMICOLON . param_section
    (25) param_section -> . identifier_list TWOPOINTS types SEMICOLON param_section
    (26) param_section -> .
    (18) identifier_list -> . ID
    (19) identifier_list -> . ID COMMA identifier_list

    RPARENT         reduce using rule 26 (param_section -> .)
    ID              shift and go to state 19

    identifier_list                shift and go to state 91
    param_section                  shift and go to state 162

state 158

    (24) function_declaration -> FUNCTION ID LPARENT param_section RPARENT TWOPOINTS types . SEMICOLON

    SEMICOLON       shift and go to state 163


state 159

    (51) case_statement -> CASE expr OF case END SEMICOLON .

    ID              reduce using rule 51 (case_statement -> CASE expr OF case END SEMICOLON .)
    CASE            reduce using rule 51 (case_statement -> CASE expr OF case END SEMICOLON .)
    WHILE           reduce using rule 51 (case_statement -> CASE expr OF case END SEMICOLON .)
    REPEAT          reduce using rule 51 (case_statement -> CASE expr OF case END SEMICOLON .)
    FOR             reduce using rule 51 (case_statement -> CASE expr OF case END SEMICOLON .)
    BEGIN           reduce using rule 51 (case_statement -> CASE expr OF case END SEMICOLON .)
    IF              reduce using rule 51 (case_statement -> CASE expr OF case END SEMICOLON .)
    ELSE            reduce using rule 51 (case_statement -> CASE expr OF case END SEMICOLON .)
    INTEGER         reduce using rule 51 (case_statement -> CASE expr OF case END SEMICOLON .)
    REAL            reduce using rule 51 (case_statement -> CASE expr OF case END SEMICOLON .)
    END             reduce using rule 51 (case_statement -> CASE expr OF case END SEMICOLON .)
    UNTIL           reduce using rule 51 (case_statement -> CASE expr OF case END SEMICOLON .)


state 160

    (73) simple_expr -> uplus_uminus factor addop_mulop factor simple_expr .

    EQUALS          reduce using rule 73 (simple_expr -> uplus_uminus factor addop_mulop factor simple_expr .)
    LTHAN           reduce using rule 73 (simple_expr -> uplus_uminus factor addop_mulop factor simple_expr .)
    GTHAN           reduce using rule 73 (simple_expr -> uplus_uminus factor addop_mulop factor simple_expr .)
    DIFFERENT       reduce using rule 73 (simple_expr -> uplus_uminus factor addop_mulop factor simple_expr .)
    GEQUALS         reduce using rule 73 (simple_expr -> uplus_uminus factor addop_mulop factor simple_expr .)
    LEQUALS         reduce using rule 73 (simple_expr -> uplus_uminus factor addop_mulop factor simple_expr .)
    OF              reduce using rule 73 (simple_expr -> uplus_uminus factor addop_mulop factor simple_expr .)
    DO              reduce using rule 73 (simple_expr -> uplus_uminus factor addop_mulop factor simple_expr .)
    COMMA           reduce using rule 73 (simple_expr -> uplus_uminus factor addop_mulop factor simple_expr .)
    THEN            reduce using rule 73 (simple_expr -> uplus_uminus factor addop_mulop factor simple_expr .)
    SEMICOLON       reduce using rule 73 (simple_expr -> uplus_uminus factor addop_mulop factor simple_expr .)
    RPARENT         reduce using rule 73 (simple_expr -> uplus_uminus factor addop_mulop factor simple_expr .)
    TO              reduce using rule 73 (simple_expr -> uplus_uminus factor addop_mulop factor simple_expr .)


state 161

    (59) for_statement -> FOR ID ASSIGNMENT expr TO expr . DO

    DO              shift and go to state 164


state 162

    (25) param_section -> identifier_list TWOPOINTS types SEMICOLON param_section .

    RPARENT         reduce using rule 25 (param_section -> identifier_list TWOPOINTS types SEMICOLON param_section .)


state 163

    (24) function_declaration -> FUNCTION ID LPARENT param_section RPARENT TWOPOINTS types SEMICOLON .

    PROCEDURE       reduce using rule 24 (function_declaration -> FUNCTION ID LPARENT param_section RPARENT TWOPOINTS types SEMICOLON .)
    FUNCTION        reduce using rule 24 (function_declaration -> FUNCTION ID LPARENT param_section RPARENT TWOPOINTS types SEMICOLON .)
    BEGIN           reduce using rule 24 (function_declaration -> FUNCTION ID LPARENT param_section RPARENT TWOPOINTS types SEMICOLON .)
    $end            reduce using rule 24 (function_declaration -> FUNCTION ID LPARENT param_section RPARENT TWOPOINTS types SEMICOLON .)


state 164

    (59) for_statement -> FOR ID ASSIGNMENT expr TO expr DO .

    END             reduce using rule 59 (for_statement -> FOR ID ASSIGNMENT expr TO expr DO .)
    ID              reduce using rule 59 (for_statement -> FOR ID ASSIGNMENT expr TO expr DO .)
    CASE            reduce using rule 59 (for_statement -> FOR ID ASSIGNMENT expr TO expr DO .)
    WHILE           reduce using rule 59 (for_statement -> FOR ID ASSIGNMENT expr TO expr DO .)
    REPEAT          reduce using rule 59 (for_statement -> FOR ID ASSIGNMENT expr TO expr DO .)
    FOR             reduce using rule 59 (for_statement -> FOR ID ASSIGNMENT expr TO expr DO .)
    BEGIN           reduce using rule 59 (for_statement -> FOR ID ASSIGNMENT expr TO expr DO .)
    IF              reduce using rule 59 (for_statement -> FOR ID ASSIGNMENT expr TO expr DO .)
    ELSE            reduce using rule 59 (for_statement -> FOR ID ASSIGNMENT expr TO expr DO .)
    INTEGER         reduce using rule 59 (for_statement -> FOR ID ASSIGNMENT expr TO expr DO .)
    REAL            reduce using rule 59 (for_statement -> FOR ID ASSIGNMENT expr TO expr DO .)
    UNTIL           reduce using rule 59 (for_statement -> FOR ID ASSIGNMENT expr TO expr DO .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 22 resolved as shift
WARNING: shift/reduce conflict for ID in state 22 resolved as shift
WARNING: shift/reduce conflict for CASE in state 22 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 22 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 22 resolved as shift
WARNING: shift/reduce conflict for FOR in state 22 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 22 resolved as shift
WARNING: shift/reduce conflict for IF in state 22 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 22 resolved as shift
WARNING: shift/reduce conflict for ID in state 22 resolved as shift
WARNING: shift/reduce conflict for CASE in state 22 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 22 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 22 resolved as shift
WARNING: shift/reduce conflict for FOR in state 22 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 22 resolved as shift
WARNING: shift/reduce conflict for IF in state 22 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 22 resolved as shift
WARNING: shift/reduce conflict for ID in state 22 resolved as shift
WARNING: shift/reduce conflict for CASE in state 22 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 22 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 22 resolved as shift
WARNING: shift/reduce conflict for FOR in state 22 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 22 resolved as shift
WARNING: shift/reduce conflict for IF in state 22 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 22 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 22 resolved as shift
WARNING: shift/reduce conflict for REAL in state 22 resolved as shift
WARNING: shift/reduce conflict for ID in state 36 resolved as shift
WARNING: shift/reduce conflict for ID in state 36 resolved as shift
WARNING: shift/reduce conflict for CASE in state 36 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 36 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 36 resolved as shift
WARNING: shift/reduce conflict for FOR in state 36 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 36 resolved as shift
WARNING: shift/reduce conflict for IF in state 36 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 36 resolved as shift
WARNING: shift/reduce conflict for ID in state 36 resolved as shift
WARNING: shift/reduce conflict for CASE in state 36 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 36 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 36 resolved as shift
WARNING: shift/reduce conflict for FOR in state 36 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 36 resolved as shift
WARNING: shift/reduce conflict for IF in state 36 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 36 resolved as shift
WARNING: shift/reduce conflict for ID in state 36 resolved as shift
WARNING: shift/reduce conflict for CASE in state 36 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 36 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 36 resolved as shift
WARNING: shift/reduce conflict for FOR in state 36 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 36 resolved as shift
WARNING: shift/reduce conflict for IF in state 36 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 36 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 36 resolved as shift
WARNING: shift/reduce conflict for REAL in state 36 resolved as shift
WARNING: shift/reduce conflict for END in state 37 resolved as shift
WARNING: shift/reduce conflict for END in state 37 resolved as shift
WARNING: shift/reduce conflict for ID in state 38 resolved as shift
WARNING: shift/reduce conflict for ID in state 38 resolved as shift
WARNING: shift/reduce conflict for CASE in state 38 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 38 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 38 resolved as shift
WARNING: shift/reduce conflict for FOR in state 38 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 38 resolved as shift
WARNING: shift/reduce conflict for IF in state 38 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 38 resolved as shift
WARNING: shift/reduce conflict for ID in state 38 resolved as shift
WARNING: shift/reduce conflict for CASE in state 38 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 38 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 38 resolved as shift
WARNING: shift/reduce conflict for FOR in state 38 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 38 resolved as shift
WARNING: shift/reduce conflict for IF in state 38 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 38 resolved as shift
WARNING: shift/reduce conflict for ID in state 38 resolved as shift
WARNING: shift/reduce conflict for CASE in state 38 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 38 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 38 resolved as shift
WARNING: shift/reduce conflict for FOR in state 38 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 38 resolved as shift
WARNING: shift/reduce conflict for IF in state 38 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 38 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 38 resolved as shift
WARNING: shift/reduce conflict for REAL in state 38 resolved as shift
WARNING: shift/reduce conflict for ID in state 39 resolved as shift
WARNING: shift/reduce conflict for ID in state 39 resolved as shift
WARNING: shift/reduce conflict for CASE in state 39 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 39 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 39 resolved as shift
WARNING: shift/reduce conflict for FOR in state 39 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 39 resolved as shift
WARNING: shift/reduce conflict for IF in state 39 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 39 resolved as shift
WARNING: shift/reduce conflict for ID in state 39 resolved as shift
WARNING: shift/reduce conflict for CASE in state 39 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 39 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 39 resolved as shift
WARNING: shift/reduce conflict for FOR in state 39 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 39 resolved as shift
WARNING: shift/reduce conflict for IF in state 39 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 39 resolved as shift
WARNING: shift/reduce conflict for ID in state 39 resolved as shift
WARNING: shift/reduce conflict for CASE in state 39 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 39 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 39 resolved as shift
WARNING: shift/reduce conflict for FOR in state 39 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 39 resolved as shift
WARNING: shift/reduce conflict for IF in state 39 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 39 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 39 resolved as shift
WARNING: shift/reduce conflict for REAL in state 39 resolved as shift
WARNING: shift/reduce conflict for ID in state 40 resolved as shift
WARNING: shift/reduce conflict for ID in state 40 resolved as shift
WARNING: shift/reduce conflict for CASE in state 40 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 40 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 40 resolved as shift
WARNING: shift/reduce conflict for FOR in state 40 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 40 resolved as shift
WARNING: shift/reduce conflict for IF in state 40 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 40 resolved as shift
WARNING: shift/reduce conflict for ID in state 40 resolved as shift
WARNING: shift/reduce conflict for CASE in state 40 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 40 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 40 resolved as shift
WARNING: shift/reduce conflict for FOR in state 40 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 40 resolved as shift
WARNING: shift/reduce conflict for IF in state 40 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 40 resolved as shift
WARNING: shift/reduce conflict for ID in state 40 resolved as shift
WARNING: shift/reduce conflict for CASE in state 40 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 40 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 40 resolved as shift
WARNING: shift/reduce conflict for FOR in state 40 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 40 resolved as shift
WARNING: shift/reduce conflict for IF in state 40 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 40 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 40 resolved as shift
WARNING: shift/reduce conflict for REAL in state 40 resolved as shift
WARNING: shift/reduce conflict for ID in state 41 resolved as shift
WARNING: shift/reduce conflict for ID in state 41 resolved as shift
WARNING: shift/reduce conflict for CASE in state 41 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 41 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 41 resolved as shift
WARNING: shift/reduce conflict for FOR in state 41 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 41 resolved as shift
WARNING: shift/reduce conflict for IF in state 41 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 41 resolved as shift
WARNING: shift/reduce conflict for ID in state 41 resolved as shift
WARNING: shift/reduce conflict for CASE in state 41 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 41 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 41 resolved as shift
WARNING: shift/reduce conflict for FOR in state 41 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 41 resolved as shift
WARNING: shift/reduce conflict for IF in state 41 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 41 resolved as shift
WARNING: shift/reduce conflict for ID in state 41 resolved as shift
WARNING: shift/reduce conflict for CASE in state 41 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 41 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 41 resolved as shift
WARNING: shift/reduce conflict for FOR in state 41 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 41 resolved as shift
WARNING: shift/reduce conflict for IF in state 41 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 41 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 41 resolved as shift
WARNING: shift/reduce conflict for REAL in state 41 resolved as shift
WARNING: shift/reduce conflict for ID in state 42 resolved as shift
WARNING: shift/reduce conflict for ID in state 42 resolved as shift
WARNING: shift/reduce conflict for CASE in state 42 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 42 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 42 resolved as shift
WARNING: shift/reduce conflict for FOR in state 42 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 42 resolved as shift
WARNING: shift/reduce conflict for IF in state 42 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 42 resolved as shift
WARNING: shift/reduce conflict for ID in state 42 resolved as shift
WARNING: shift/reduce conflict for CASE in state 42 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 42 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 42 resolved as shift
WARNING: shift/reduce conflict for FOR in state 42 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 42 resolved as shift
WARNING: shift/reduce conflict for IF in state 42 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 42 resolved as shift
WARNING: shift/reduce conflict for ID in state 42 resolved as shift
WARNING: shift/reduce conflict for CASE in state 42 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 42 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 42 resolved as shift
WARNING: shift/reduce conflict for FOR in state 42 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 42 resolved as shift
WARNING: shift/reduce conflict for IF in state 42 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 42 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 42 resolved as shift
WARNING: shift/reduce conflict for REAL in state 42 resolved as shift
WARNING: shift/reduce conflict for ID in state 43 resolved as shift
WARNING: shift/reduce conflict for ID in state 43 resolved as shift
WARNING: shift/reduce conflict for CASE in state 43 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 43 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 43 resolved as shift
WARNING: shift/reduce conflict for FOR in state 43 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 43 resolved as shift
WARNING: shift/reduce conflict for IF in state 43 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 43 resolved as shift
WARNING: shift/reduce conflict for ID in state 43 resolved as shift
WARNING: shift/reduce conflict for CASE in state 43 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 43 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 43 resolved as shift
WARNING: shift/reduce conflict for FOR in state 43 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 43 resolved as shift
WARNING: shift/reduce conflict for IF in state 43 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 43 resolved as shift
WARNING: shift/reduce conflict for ID in state 43 resolved as shift
WARNING: shift/reduce conflict for CASE in state 43 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 43 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 43 resolved as shift
WARNING: shift/reduce conflict for FOR in state 43 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 43 resolved as shift
WARNING: shift/reduce conflict for IF in state 43 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 43 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 43 resolved as shift
WARNING: shift/reduce conflict for REAL in state 43 resolved as shift
WARNING: shift/reduce conflict for ID in state 44 resolved as shift
WARNING: shift/reduce conflict for ID in state 44 resolved as shift
WARNING: shift/reduce conflict for CASE in state 44 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 44 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 44 resolved as shift
WARNING: shift/reduce conflict for FOR in state 44 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 44 resolved as shift
WARNING: shift/reduce conflict for IF in state 44 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 44 resolved as shift
WARNING: shift/reduce conflict for ID in state 44 resolved as shift
WARNING: shift/reduce conflict for CASE in state 44 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 44 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 44 resolved as shift
WARNING: shift/reduce conflict for FOR in state 44 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 44 resolved as shift
WARNING: shift/reduce conflict for IF in state 44 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 44 resolved as shift
WARNING: shift/reduce conflict for ID in state 44 resolved as shift
WARNING: shift/reduce conflict for CASE in state 44 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 44 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 44 resolved as shift
WARNING: shift/reduce conflict for FOR in state 44 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 44 resolved as shift
WARNING: shift/reduce conflict for IF in state 44 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 44 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 44 resolved as shift
WARNING: shift/reduce conflict for REAL in state 44 resolved as shift
WARNING: shift/reduce conflict for ID in state 45 resolved as shift
WARNING: shift/reduce conflict for ID in state 45 resolved as shift
WARNING: shift/reduce conflict for CASE in state 45 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 45 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 45 resolved as shift
WARNING: shift/reduce conflict for FOR in state 45 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 45 resolved as shift
WARNING: shift/reduce conflict for IF in state 45 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 45 resolved as shift
WARNING: shift/reduce conflict for ID in state 45 resolved as shift
WARNING: shift/reduce conflict for CASE in state 45 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 45 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 45 resolved as shift
WARNING: shift/reduce conflict for FOR in state 45 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 45 resolved as shift
WARNING: shift/reduce conflict for IF in state 45 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 45 resolved as shift
WARNING: shift/reduce conflict for ID in state 45 resolved as shift
WARNING: shift/reduce conflict for CASE in state 45 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 45 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 45 resolved as shift
WARNING: shift/reduce conflict for FOR in state 45 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 45 resolved as shift
WARNING: shift/reduce conflict for IF in state 45 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 45 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 45 resolved as shift
WARNING: shift/reduce conflict for REAL in state 45 resolved as shift
WARNING: shift/reduce conflict for UPLUS in state 49 resolved as shift
WARNING: shift/reduce conflict for UMINUS in state 49 resolved as shift
WARNING: shift/reduce conflict for UPLUS in state 51 resolved as shift
WARNING: shift/reduce conflict for UMINUS in state 51 resolved as shift
WARNING: shift/reduce conflict for ID in state 52 resolved as shift
WARNING: shift/reduce conflict for ID in state 52 resolved as shift
WARNING: shift/reduce conflict for CASE in state 52 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 52 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 52 resolved as shift
WARNING: shift/reduce conflict for FOR in state 52 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 52 resolved as shift
WARNING: shift/reduce conflict for IF in state 52 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 52 resolved as shift
WARNING: shift/reduce conflict for ID in state 52 resolved as shift
WARNING: shift/reduce conflict for CASE in state 52 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 52 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 52 resolved as shift
WARNING: shift/reduce conflict for FOR in state 52 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 52 resolved as shift
WARNING: shift/reduce conflict for IF in state 52 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 52 resolved as shift
WARNING: shift/reduce conflict for ID in state 52 resolved as shift
WARNING: shift/reduce conflict for CASE in state 52 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 52 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 52 resolved as shift
WARNING: shift/reduce conflict for FOR in state 52 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 52 resolved as shift
WARNING: shift/reduce conflict for IF in state 52 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 52 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 52 resolved as shift
WARNING: shift/reduce conflict for REAL in state 52 resolved as shift
WARNING: shift/reduce conflict for UPLUS in state 54 resolved as shift
WARNING: shift/reduce conflict for UMINUS in state 54 resolved as shift
WARNING: shift/reduce conflict for IF in state 55 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 55 resolved as shift
WARNING: shift/reduce conflict for IF in state 55 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 55 resolved as shift
WARNING: shift/reduce conflict for END in state 63 resolved as shift
WARNING: shift/reduce conflict for END in state 63 resolved as shift
WARNING: shift/reduce conflict for UPLUS in state 73 resolved as shift
WARNING: shift/reduce conflict for UMINUS in state 73 resolved as shift
WARNING: shift/reduce conflict for UPLUS in state 74 resolved as shift
WARNING: shift/reduce conflict for UMINUS in state 74 resolved as shift
WARNING: shift/reduce conflict for ID in state 75 resolved as shift
WARNING: shift/reduce conflict for ID in state 75 resolved as shift
WARNING: shift/reduce conflict for CASE in state 75 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 75 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 75 resolved as shift
WARNING: shift/reduce conflict for FOR in state 75 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 75 resolved as shift
WARNING: shift/reduce conflict for IF in state 75 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 75 resolved as shift
WARNING: shift/reduce conflict for ID in state 75 resolved as shift
WARNING: shift/reduce conflict for CASE in state 75 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 75 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 75 resolved as shift
WARNING: shift/reduce conflict for FOR in state 75 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 75 resolved as shift
WARNING: shift/reduce conflict for IF in state 75 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 75 resolved as shift
WARNING: shift/reduce conflict for ID in state 75 resolved as shift
WARNING: shift/reduce conflict for CASE in state 75 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 75 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 75 resolved as shift
WARNING: shift/reduce conflict for FOR in state 75 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 75 resolved as shift
WARNING: shift/reduce conflict for IF in state 75 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 75 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 75 resolved as shift
WARNING: shift/reduce conflict for REAL in state 75 resolved as shift
WARNING: shift/reduce conflict for ID in state 78 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 78 resolved as shift
WARNING: shift/reduce conflict for REAL in state 78 resolved as shift
WARNING: shift/reduce conflict for STRING in state 78 resolved as shift
WARNING: shift/reduce conflict for NOT in state 78 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 82 resolved as shift
WARNING: shift/reduce conflict for UNTIL in state 82 resolved as shift
WARNING: shift/reduce conflict for ID in state 88 resolved as shift
WARNING: shift/reduce conflict for ID in state 88 resolved as shift
WARNING: shift/reduce conflict for CASE in state 88 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 88 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 88 resolved as shift
WARNING: shift/reduce conflict for FOR in state 88 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 88 resolved as shift
WARNING: shift/reduce conflict for IF in state 88 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 88 resolved as shift
WARNING: shift/reduce conflict for ID in state 88 resolved as shift
WARNING: shift/reduce conflict for CASE in state 88 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 88 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 88 resolved as shift
WARNING: shift/reduce conflict for FOR in state 88 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 88 resolved as shift
WARNING: shift/reduce conflict for IF in state 88 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 88 resolved as shift
WARNING: shift/reduce conflict for ID in state 88 resolved as shift
WARNING: shift/reduce conflict for CASE in state 88 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 88 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 88 resolved as shift
WARNING: shift/reduce conflict for FOR in state 88 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 88 resolved as shift
WARNING: shift/reduce conflict for IF in state 88 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 88 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 88 resolved as shift
WARNING: shift/reduce conflict for REAL in state 88 resolved as shift
WARNING: shift/reduce conflict for ID in state 89 resolved as shift
WARNING: shift/reduce conflict for ID in state 89 resolved as shift
WARNING: shift/reduce conflict for CASE in state 89 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 89 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 89 resolved as shift
WARNING: shift/reduce conflict for FOR in state 89 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 89 resolved as shift
WARNING: shift/reduce conflict for IF in state 89 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 89 resolved as shift
WARNING: shift/reduce conflict for ID in state 89 resolved as shift
WARNING: shift/reduce conflict for CASE in state 89 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 89 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 89 resolved as shift
WARNING: shift/reduce conflict for FOR in state 89 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 89 resolved as shift
WARNING: shift/reduce conflict for IF in state 89 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 89 resolved as shift
WARNING: shift/reduce conflict for ID in state 89 resolved as shift
WARNING: shift/reduce conflict for CASE in state 89 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 89 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 89 resolved as shift
WARNING: shift/reduce conflict for FOR in state 89 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 89 resolved as shift
WARNING: shift/reduce conflict for IF in state 89 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 89 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 89 resolved as shift
WARNING: shift/reduce conflict for REAL in state 89 resolved as shift
WARNING: shift/reduce conflict for UPLUS in state 102 resolved as shift
WARNING: shift/reduce conflict for UMINUS in state 102 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 109 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 109 resolved as shift
WARNING: shift/reduce conflict for OR in state 109 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 109 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 109 resolved as shift
WARNING: shift/reduce conflict for DIV in state 109 resolved as shift
WARNING: shift/reduce conflict for MOD in state 109 resolved as shift
WARNING: shift/reduce conflict for AND in state 109 resolved as shift
WARNING: shift/reduce conflict for ID in state 114 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 114 resolved as shift
WARNING: shift/reduce conflict for REAL in state 114 resolved as shift
WARNING: shift/reduce conflict for STRING in state 114 resolved as shift
WARNING: shift/reduce conflict for NOT in state 114 resolved as shift
WARNING: shift/reduce conflict for ID in state 115 resolved as shift
WARNING: shift/reduce conflict for ID in state 115 resolved as shift
WARNING: shift/reduce conflict for CASE in state 115 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 115 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 115 resolved as shift
WARNING: shift/reduce conflict for FOR in state 115 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 115 resolved as shift
WARNING: shift/reduce conflict for IF in state 115 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 115 resolved as shift
WARNING: shift/reduce conflict for ID in state 115 resolved as shift
WARNING: shift/reduce conflict for CASE in state 115 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 115 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 115 resolved as shift
WARNING: shift/reduce conflict for FOR in state 115 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 115 resolved as shift
WARNING: shift/reduce conflict for IF in state 115 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 115 resolved as shift
WARNING: shift/reduce conflict for ID in state 115 resolved as shift
WARNING: shift/reduce conflict for CASE in state 115 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 115 resolved as shift
WARNING: shift/reduce conflict for REPEAT in state 115 resolved as shift
WARNING: shift/reduce conflict for FOR in state 115 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 115 resolved as shift
WARNING: shift/reduce conflict for IF in state 115 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 115 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 115 resolved as shift
WARNING: shift/reduce conflict for REAL in state 115 resolved as shift
WARNING: shift/reduce conflict for UPLUS in state 116 resolved as shift
WARNING: shift/reduce conflict for UMINUS in state 116 resolved as shift
WARNING: shift/reduce conflict for UPLUS in state 117 resolved as shift
WARNING: shift/reduce conflict for UMINUS in state 117 resolved as shift
WARNING: shift/reduce conflict for IF in state 118 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 118 resolved as shift
WARNING: shift/reduce conflict for IF in state 118 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 118 resolved as shift
WARNING: shift/reduce conflict for UPLUS in state 119 resolved as shift
WARNING: shift/reduce conflict for UMINUS in state 119 resolved as shift
WARNING: shift/reduce conflict for ID in state 132 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 132 resolved as shift
WARNING: shift/reduce conflict for REAL in state 132 resolved as shift
WARNING: shift/reduce conflict for STRING in state 132 resolved as shift
WARNING: shift/reduce conflict for NOT in state 132 resolved as shift
WARNING: shift/reduce conflict for UPLUS in state 154 resolved as shift
WARNING: shift/reduce conflict for UMINUS in state 154 resolved as shift
WARNING: shift/reduce conflict for UPLUS in state 156 resolved as shift
WARNING: shift/reduce conflict for UMINUS in state 156 resolved as shift
WARNING: reduce/reduce conflict in state 4 resolved using rule (program -> PROGRAM ID SEMICOLON)
WARNING: rejected rule (const_declaration_part -> <empty>) in state 4
WARNING: reduce/reduce conflict in state 22 resolved using rule (statement -> <empty>)
WARNING: rejected rule (if_statement -> <empty>) in state 22
WARNING: reduce/reduce conflict in state 22 resolved using rule (statement -> <empty>)
WARNING: rejected rule (if1 -> <empty>) in state 22
WARNING: reduce/reduce conflict in state 22 resolved using rule (statement -> <empty>)
WARNING: rejected rule (if2 -> <empty>) in state 22
WARNING: reduce/reduce conflict in state 36 resolved using rule (statement -> <empty>)
WARNING: rejected rule (if_statement -> <empty>) in state 36
WARNING: reduce/reduce conflict in state 36 resolved using rule (statement -> <empty>)
WARNING: rejected rule (if1 -> <empty>) in state 36
WARNING: reduce/reduce conflict in state 36 resolved using rule (statement -> <empty>)
WARNING: rejected rule (if2 -> <empty>) in state 36
WARNING: reduce/reduce conflict in state 37 resolved using rule (repeat_statement -> statement)
WARNING: rejected rule (for_statement -> statement) in state 37
WARNING: reduce/reduce conflict in state 38 resolved using rule (statement -> <empty>)
WARNING: rejected rule (if_statement -> <empty>) in state 38
WARNING: reduce/reduce conflict in state 38 resolved using rule (statement -> <empty>)
WARNING: rejected rule (if1 -> <empty>) in state 38
WARNING: reduce/reduce conflict in state 38 resolved using rule (statement -> <empty>)
WARNING: rejected rule (if2 -> <empty>) in state 38
WARNING: reduce/reduce conflict in state 39 resolved using rule (statement -> <empty>)
WARNING: rejected rule (if_statement -> <empty>) in state 39
WARNING: reduce/reduce conflict in state 39 resolved using rule (statement -> <empty>)
WARNING: rejected rule (if1 -> <empty>) in state 39
WARNING: reduce/reduce conflict in state 39 resolved using rule (statement -> <empty>)
WARNING: rejected rule (if2 -> <empty>) in state 39
WARNING: reduce/reduce conflict in state 40 resolved using rule (statement -> <empty>)
WARNING: rejected rule (if_statement -> <empty>) in state 40
WARNING: reduce/reduce conflict in state 40 resolved using rule (statement -> <empty>)
WARNING: rejected rule (if1 -> <empty>) in state 40
WARNING: reduce/reduce conflict in state 40 resolved using rule (statement -> <empty>)
WARNING: rejected rule (if2 -> <empty>) in state 40
WARNING: reduce/reduce conflict in state 41 resolved using rule (statement -> <empty>)
WARNING: rejected rule (if_statement -> <empty>) in state 41
WARNING: reduce/reduce conflict in state 41 resolved using rule (statement -> <empty>)
WARNING: rejected rule (if1 -> <empty>) in state 41
WARNING: reduce/reduce conflict in state 41 resolved using rule (statement -> <empty>)
WARNING: rejected rule (if2 -> <empty>) in state 41
WARNING: reduce/reduce conflict in state 42 resolved using rule (statement -> <empty>)
WARNING: rejected rule (if_statement -> <empty>) in state 42
WARNING: reduce/reduce conflict in state 42 resolved using rule (statement -> <empty>)
WARNING: rejected rule (if1 -> <empty>) in state 42
WARNING: reduce/reduce conflict in state 42 resolved using rule (statement -> <empty>)
WARNING: rejected rule (if2 -> <empty>) in state 42
WARNING: reduce/reduce conflict in state 43 resolved using rule (statement -> <empty>)
WARNING: rejected rule (if_statement -> <empty>) in state 43
WARNING: reduce/reduce conflict in state 43 resolved using rule (statement -> <empty>)
WARNING: rejected rule (if1 -> <empty>) in state 43
WARNING: reduce/reduce conflict in state 43 resolved using rule (statement -> <empty>)
WARNING: rejected rule (if2 -> <empty>) in state 43
WARNING: reduce/reduce conflict in state 44 resolved using rule (statement -> <empty>)
WARNING: rejected rule (if_statement -> <empty>) in state 44
WARNING: reduce/reduce conflict in state 44 resolved using rule (statement -> <empty>)
WARNING: rejected rule (if1 -> <empty>) in state 44
WARNING: reduce/reduce conflict in state 44 resolved using rule (statement -> <empty>)
WARNING: rejected rule (if2 -> <empty>) in state 44
WARNING: reduce/reduce conflict in state 45 resolved using rule (statement -> <empty>)
WARNING: rejected rule (if_statement -> <empty>) in state 45
WARNING: reduce/reduce conflict in state 45 resolved using rule (statement -> <empty>)
WARNING: rejected rule (if1 -> <empty>) in state 45
WARNING: reduce/reduce conflict in state 45 resolved using rule (statement -> <empty>)
WARNING: rejected rule (if2 -> <empty>) in state 45
WARNING: reduce/reduce conflict in state 52 resolved using rule (statement -> <empty>)
WARNING: rejected rule (if_statement -> <empty>) in state 52
WARNING: reduce/reduce conflict in state 52 resolved using rule (statement -> <empty>)
WARNING: rejected rule (if1 -> <empty>) in state 52
WARNING: reduce/reduce conflict in state 52 resolved using rule (statement -> <empty>)
WARNING: rejected rule (if2 -> <empty>) in state 52
WARNING: reduce/reduce conflict in state 55 resolved using rule (if1 -> <empty>)
WARNING: rejected rule (if2 -> <empty>) in state 55
WARNING: reduce/reduce conflict in state 63 resolved using rule (repeat_statement -> statement)
WARNING: rejected rule (for_statement -> statement) in state 63
WARNING: reduce/reduce conflict in state 65 resolved using rule (statement -> assign_statement statement)
WARNING: rejected rule (repeat_statement -> statement) in state 65
WARNING: reduce/reduce conflict in state 65 resolved using rule (statement -> assign_statement statement)
WARNING: rejected rule (for_statement -> statement) in state 65
WARNING: reduce/reduce conflict in state 66 resolved using rule (statement -> procedure_call statement)
WARNING: rejected rule (repeat_statement -> statement) in state 66
WARNING: reduce/reduce conflict in state 66 resolved using rule (statement -> procedure_call statement)
WARNING: rejected rule (for_statement -> statement) in state 66
WARNING: reduce/reduce conflict in state 67 resolved using rule (statement -> if_statement statement)
WARNING: rejected rule (repeat_statement -> statement) in state 67
WARNING: reduce/reduce conflict in state 67 resolved using rule (statement -> if_statement statement)
WARNING: rejected rule (for_statement -> statement) in state 67
WARNING: reduce/reduce conflict in state 68 resolved using rule (statement -> case_statement statement)
WARNING: rejected rule (repeat_statement -> statement) in state 68
WARNING: reduce/reduce conflict in state 68 resolved using rule (statement -> case_statement statement)
WARNING: rejected rule (for_statement -> statement) in state 68
WARNING: reduce/reduce conflict in state 69 resolved using rule (statement -> while_statement statement)
WARNING: rejected rule (repeat_statement -> statement) in state 69
WARNING: reduce/reduce conflict in state 69 resolved using rule (statement -> while_statement statement)
WARNING: rejected rule (for_statement -> statement) in state 69
WARNING: reduce/reduce conflict in state 70 resolved using rule (statement -> repeat_statement statement)
WARNING: rejected rule (repeat_statement -> statement) in state 70
WARNING: reduce/reduce conflict in state 70 resolved using rule (statement -> repeat_statement statement)
WARNING: rejected rule (for_statement -> statement) in state 70
WARNING: reduce/reduce conflict in state 71 resolved using rule (statement -> for_statement statement)
WARNING: rejected rule (repeat_statement -> statement) in state 71
WARNING: reduce/reduce conflict in state 71 resolved using rule (statement -> for_statement statement)
WARNING: rejected rule (for_statement -> statement) in state 71
WARNING: reduce/reduce conflict in state 72 resolved using rule (statement -> compound_statement_semicolon statement)
WARNING: rejected rule (repeat_statement -> statement) in state 72
WARNING: reduce/reduce conflict in state 72 resolved using rule (statement -> compound_statement_semicolon statement)
WARNING: rejected rule (for_statement -> statement) in state 72
WARNING: reduce/reduce conflict in state 75 resolved using rule (statement -> <empty>)
WARNING: rejected rule (if_statement -> <empty>) in state 75
WARNING: reduce/reduce conflict in state 75 resolved using rule (statement -> <empty>)
WARNING: rejected rule (if1 -> <empty>) in state 75
WARNING: reduce/reduce conflict in state 75 resolved using rule (statement -> <empty>)
WARNING: rejected rule (if2 -> <empty>) in state 75
WARNING: reduce/reduce conflict in state 82 resolved using rule (repeat_statement -> statement)
WARNING: rejected rule (for_statement -> statement) in state 82
WARNING: reduce/reduce conflict in state 88 resolved using rule (statement -> <empty>)
WARNING: rejected rule (if_statement -> <empty>) in state 88
WARNING: reduce/reduce conflict in state 88 resolved using rule (statement -> <empty>)
WARNING: rejected rule (if1 -> <empty>) in state 88
WARNING: reduce/reduce conflict in state 88 resolved using rule (statement -> <empty>)
WARNING: rejected rule (if2 -> <empty>) in state 88
WARNING: reduce/reduce conflict in state 89 resolved using rule (statement -> <empty>)
WARNING: rejected rule (if_statement -> <empty>) in state 89
WARNING: reduce/reduce conflict in state 89 resolved using rule (statement -> <empty>)
WARNING: rejected rule (if1 -> <empty>) in state 89
WARNING: reduce/reduce conflict in state 89 resolved using rule (statement -> <empty>)
WARNING: rejected rule (if2 -> <empty>) in state 89
WARNING: reduce/reduce conflict in state 99 resolved using rule (case -> ID TWOPOINTS statement)
WARNING: rejected rule (repeat_statement -> statement) in state 99
WARNING: reduce/reduce conflict in state 99 resolved using rule (case -> ID TWOPOINTS statement)
WARNING: rejected rule (for_statement -> statement) in state 99
WARNING: reduce/reduce conflict in state 109 resolved using rule (simple_expr -> uplus_uminus factor)
WARNING: rejected rule (addop_mulop -> <empty>) in state 109
WARNING: reduce/reduce conflict in state 115 resolved using rule (statement -> <empty>)
WARNING: rejected rule (if_statement -> <empty>) in state 115
WARNING: reduce/reduce conflict in state 115 resolved using rule (statement -> <empty>)
WARNING: rejected rule (if1 -> <empty>) in state 115
WARNING: reduce/reduce conflict in state 115 resolved using rule (statement -> <empty>)
WARNING: rejected rule (if2 -> <empty>) in state 115
WARNING: reduce/reduce conflict in state 118 resolved using rule (if1 -> <empty>)
WARNING: rejected rule (if2 -> <empty>) in state 118
WARNING: reduce/reduce conflict in state 120 resolved using rule (case -> INTEGER TWOPOINTS statement)
WARNING: rejected rule (repeat_statement -> statement) in state 120
WARNING: reduce/reduce conflict in state 120 resolved using rule (case -> INTEGER TWOPOINTS statement)
WARNING: rejected rule (for_statement -> statement) in state 120
WARNING: reduce/reduce conflict in state 121 resolved using rule (case -> REAL TWOPOINTS statement)
WARNING: rejected rule (repeat_statement -> statement) in state 121
WARNING: reduce/reduce conflict in state 121 resolved using rule (case -> REAL TWOPOINTS statement)
WARNING: rejected rule (for_statement -> statement) in state 121
WARNING: reduce/reduce conflict in state 142 resolved using rule (while_statement -> WHILE expr DO statement)
WARNING: rejected rule (repeat_statement -> statement) in state 142
WARNING: reduce/reduce conflict in state 142 resolved using rule (while_statement -> WHILE expr DO statement)
WARNING: rejected rule (for_statement -> statement) in state 142
WARNING: reduce/reduce conflict in state 146 resolved using rule (if1 -> IF expr_list THEN if2)
WARNING: rejected rule (if2 -> IF expr_list THEN if2) in state 146
WARNING: Rule (if_statement -> <empty>) is never reduced
WARNING: Rule (if2 -> <empty>) is never reduced
WARNING: Rule (for_statement -> statement) is never reduced
WARNING: Rule (if2 -> IF expr_list THEN if2) is never reduced
