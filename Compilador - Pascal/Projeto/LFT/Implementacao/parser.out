Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARRAY
    COMMENT
    DIVIDE_INT
    DOWNTO
    EXP
    FALSE
    LBRACKET
    RBRACKET
    RESERVED
    TRUE
    UMINUS
    UPLUS

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON block
Rule 2     program -> PROGRAM ID SEMICOLON
Rule 3     block -> const_declaration_part var_declaration_part subroutine_declaration_part compound_statement_score
Rule 4     const_declaration_part -> CONST const_definition
Rule 5     const_declaration_part -> <empty>
Rule 6     const_definition -> ID EQUALS types SEMICOLON const_definition
Rule 7     const_definition -> ID EQUALS types SEMICOLON
Rule 8     var_declaration_part -> VAR var_declaration
Rule 9     var_declaration_part -> <empty>
Rule 10    var_declaration -> identifier_list TWOPOINTS types SEMICOLON var_declaration
Rule 11    var_declaration -> identifier_list TWOPOINTS types SEMICOLON
Rule 12    types -> INTEGER
Rule 13    types -> REAL
Rule 14    types -> STRING
Rule 15    types -> BOOLEAN
Rule 16    types -> CHAR
Rule 17    types -> ID
Rule 18    identifier_list -> ID
Rule 19    identifier_list -> ID COMMA identifier_list
Rule 20    subroutine_declaration_part -> procedure_declaration subroutine_declaration_part
Rule 21    subroutine_declaration_part -> function_declaration subroutine_declaration_part
Rule 22    subroutine_declaration_part -> <empty>
Rule 23    procedure_declaration -> PROCEDURE ID LPARENT param_section RPARENT SEMICOLON
Rule 24    function_declaration -> FUNCTION ID LPARENT param_section RPARENT TWOPOINTS types SEMICOLON
Rule 25    param_section -> identifier_list TWOPOINTS types SEMICOLON param_section
Rule 26    param_section -> <empty>
Rule 27    compound_statement_score -> BEGIN statements END SCORE
Rule 28    compound_statement_score -> BEGIN END SCORE
Rule 29    compound_statement_semicolon -> BEGIN statements END SEMICOLON
Rule 30    compound_statement_semicolon -> BEGIN END SEMICOLON
Rule 31    statements -> statement
Rule 32    statements -> statement statements
Rule 33    statement -> nstatement
Rule 34    statement -> if2_statement
Rule 35    nstatement -> assign_statement
Rule 36    nstatement -> procedure_call_statement
Rule 37    nstatement -> IF expr_list THEN nstatement ELSE nstatement
Rule 38    nstatement -> case_statement
Rule 39    nstatement -> while_statement
Rule 40    nstatement -> repeat_statement
Rule 41    nstatement -> for_statement
Rule 42    nstatement -> compound_statement_semicolon
Rule 43    assign_statement -> ID ASSIGNMENT expr SEMICOLON
Rule 44    procedure_call_statement -> ID LPARENT expr_list RPARENT SEMICOLON
Rule 45    if2_statement -> IF expr_list THEN statement
Rule 46    if2_statement -> IF expr_list THEN nstatement ELSE if2_statement
Rule 47    case_statement -> CASE expr OF cases END SEMICOLON
Rule 48    cases -> case
Rule 49    cases -> case cases
Rule 50    case -> INTEGER TWOPOINTS statement
Rule 51    case -> REAL TWOPOINTS statement
Rule 52    case -> ID TWOPOINTS statement
Rule 53    while_statement -> WHILE expr DO statement
Rule 54    repeat_statement -> REPEAT statement UNTIL expr SEMICOLON
Rule 55    for_statement -> FOR ID ASSIGNMENT expr TO expr DO statement
Rule 56    expr_list -> expr
Rule 57    expr_list -> expr COMMA expr_list
Rule 58    expr -> expr EQUALS expr
Rule 59    expr -> expr LTHAN expr
Rule 60    expr -> expr GTHAN expr
Rule 61    expr -> expr DIFFERENT expr
Rule 62    expr -> expr GEQUALS expr
Rule 63    expr -> expr LEQUALS expr
Rule 64    expr -> expr PLUS expr
Rule 65    expr -> expr MINUS expr
Rule 66    expr -> expr OR expr
Rule 67    expr -> expr TIMES expr
Rule 68    expr -> expr DIVIDE expr
Rule 69    expr -> expr DIV expr
Rule 70    expr -> expr MOD expr
Rule 71    expr -> expr AND expr
Rule 72    expr -> PLUS expr
Rule 73    expr -> MINUS expr
Rule 74    expr -> factor
Rule 75    factor -> ID
Rule 76    factor -> INTEGER
Rule 77    factor -> REAL
Rule 78    factor -> STRING
Rule 79    factor -> NOT factor

Terminals, with rules where they appear

AND                  : 71
ARRAY                : 
ASSIGNMENT           : 43 55
BEGIN                : 27 28 29 30
BOOLEAN              : 15
CASE                 : 47
CHAR                 : 16
COMMA                : 19 57
COMMENT              : 
CONST                : 4
DIFFERENT            : 61
DIV                  : 69
DIVIDE               : 68
DIVIDE_INT           : 
DO                   : 53 55
DOWNTO               : 
ELSE                 : 37 46
END                  : 27 28 29 30 47
EQUALS               : 6 7 58
EXP                  : 
FALSE                : 
FOR                  : 55
FUNCTION             : 24
GEQUALS              : 62
GTHAN                : 60
ID                   : 1 2 6 7 17 18 19 23 24 43 44 52 55 75
IF                   : 37 45 46
INTEGER              : 12 50 76
LBRACKET             : 
LEQUALS              : 63
LPARENT              : 23 24 44
LTHAN                : 59
MINUS                : 65 73
MOD                  : 70
NOT                  : 79
OF                   : 47
OR                   : 66
PLUS                 : 64 72
PROCEDURE            : 23
PROGRAM              : 1 2
RBRACKET             : 
REAL                 : 13 51 77
REPEAT               : 54
RESERVED             : 
RPARENT              : 23 24 44
SCORE                : 27 28
SEMICOLON            : 1 2 6 7 10 11 23 24 25 29 30 43 44 47 54
STRING               : 14 78
THEN                 : 37 45 46
TIMES                : 67
TO                   : 55
TRUE                 : 
TWOPOINTS            : 10 11 24 25 50 51 52
UMINUS               : 
UNTIL                : 54
UPLUS                : 
VAR                  : 8
WHILE                : 53
error                : 

Nonterminals, with rules where they appear

assign_statement     : 35
block                : 1
case                 : 48 49
case_statement       : 38
cases                : 47 49
compound_statement_score : 3
compound_statement_semicolon : 42
const_declaration_part : 3
const_definition     : 4 6
expr                 : 43 47 53 54 55 55 56 57 58 58 59 59 60 60 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 68 69 69 70 70 71 71 72 73
expr_list            : 37 44 45 46 57
factor               : 74 79
for_statement        : 41
function_declaration : 21
identifier_list      : 10 11 19 25
if2_statement        : 34 46
nstatement           : 33 37 37 46
param_section        : 23 24 25
procedure_call_statement : 36
procedure_declaration : 20
program              : 0
repeat_statement     : 40
statement            : 31 32 45 50 51 52 53 54 55
statements           : 27 29 32
subroutine_declaration_part : 3 20 21
types                : 6 7 10 11 24 25
var_declaration      : 8 10
var_declaration_part : 3
while_statement      : 39

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON block
    (2) program -> . PROGRAM ID SEMICOLON

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON block
    (2) program -> PROGRAM . ID SEMICOLON

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON block
    (2) program -> PROGRAM ID . SEMICOLON

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . block
    (2) program -> PROGRAM ID SEMICOLON .
    (3) block -> . const_declaration_part var_declaration_part subroutine_declaration_part compound_statement_score
    (4) const_declaration_part -> . CONST const_definition
    (5) const_declaration_part -> .

    $end            reduce using rule 2 (program -> PROGRAM ID SEMICOLON .)
    CONST           shift and go to state 7
    VAR             reduce using rule 5 (const_declaration_part -> .)
    PROCEDURE       reduce using rule 5 (const_declaration_part -> .)
    FUNCTION        reduce using rule 5 (const_declaration_part -> .)
    BEGIN           reduce using rule 5 (const_declaration_part -> .)

    block                          shift and go to state 5
    const_declaration_part         shift and go to state 6

state 5

    (1) program -> PROGRAM ID SEMICOLON block .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON block .)


state 6

    (3) block -> const_declaration_part . var_declaration_part subroutine_declaration_part compound_statement_score
    (8) var_declaration_part -> . VAR var_declaration
    (9) var_declaration_part -> .

    VAR             shift and go to state 9
    PROCEDURE       reduce using rule 9 (var_declaration_part -> .)
    FUNCTION        reduce using rule 9 (var_declaration_part -> .)
    BEGIN           reduce using rule 9 (var_declaration_part -> .)

    var_declaration_part           shift and go to state 8

state 7

    (4) const_declaration_part -> CONST . const_definition
    (6) const_definition -> . ID EQUALS types SEMICOLON const_definition
    (7) const_definition -> . ID EQUALS types SEMICOLON

    ID              shift and go to state 11

    const_definition               shift and go to state 10

state 8

    (3) block -> const_declaration_part var_declaration_part . subroutine_declaration_part compound_statement_score
    (20) subroutine_declaration_part -> . procedure_declaration subroutine_declaration_part
    (21) subroutine_declaration_part -> . function_declaration subroutine_declaration_part
    (22) subroutine_declaration_part -> .
    (23) procedure_declaration -> . PROCEDURE ID LPARENT param_section RPARENT SEMICOLON
    (24) function_declaration -> . FUNCTION ID LPARENT param_section RPARENT TWOPOINTS types SEMICOLON

    BEGIN           reduce using rule 22 (subroutine_declaration_part -> .)
    PROCEDURE       shift and go to state 15
    FUNCTION        shift and go to state 16

    subroutine_declaration_part    shift and go to state 12
    procedure_declaration          shift and go to state 13
    function_declaration           shift and go to state 14

state 9

    (8) var_declaration_part -> VAR . var_declaration
    (10) var_declaration -> . identifier_list TWOPOINTS types SEMICOLON var_declaration
    (11) var_declaration -> . identifier_list TWOPOINTS types SEMICOLON
    (18) identifier_list -> . ID
    (19) identifier_list -> . ID COMMA identifier_list

    ID              shift and go to state 19

    var_declaration                shift and go to state 17
    identifier_list                shift and go to state 18

state 10

    (4) const_declaration_part -> CONST const_definition .

    VAR             reduce using rule 4 (const_declaration_part -> CONST const_definition .)
    PROCEDURE       reduce using rule 4 (const_declaration_part -> CONST const_definition .)
    FUNCTION        reduce using rule 4 (const_declaration_part -> CONST const_definition .)
    BEGIN           reduce using rule 4 (const_declaration_part -> CONST const_definition .)


state 11

    (6) const_definition -> ID . EQUALS types SEMICOLON const_definition
    (7) const_definition -> ID . EQUALS types SEMICOLON

    EQUALS          shift and go to state 20


state 12

    (3) block -> const_declaration_part var_declaration_part subroutine_declaration_part . compound_statement_score
    (27) compound_statement_score -> . BEGIN statements END SCORE
    (28) compound_statement_score -> . BEGIN END SCORE

    BEGIN           shift and go to state 22

    compound_statement_score       shift and go to state 21

state 13

    (20) subroutine_declaration_part -> procedure_declaration . subroutine_declaration_part
    (20) subroutine_declaration_part -> . procedure_declaration subroutine_declaration_part
    (21) subroutine_declaration_part -> . function_declaration subroutine_declaration_part
    (22) subroutine_declaration_part -> .
    (23) procedure_declaration -> . PROCEDURE ID LPARENT param_section RPARENT SEMICOLON
    (24) function_declaration -> . FUNCTION ID LPARENT param_section RPARENT TWOPOINTS types SEMICOLON

    BEGIN           reduce using rule 22 (subroutine_declaration_part -> .)
    PROCEDURE       shift and go to state 15
    FUNCTION        shift and go to state 16

    procedure_declaration          shift and go to state 13
    subroutine_declaration_part    shift and go to state 23
    function_declaration           shift and go to state 14

state 14

    (21) subroutine_declaration_part -> function_declaration . subroutine_declaration_part
    (20) subroutine_declaration_part -> . procedure_declaration subroutine_declaration_part
    (21) subroutine_declaration_part -> . function_declaration subroutine_declaration_part
    (22) subroutine_declaration_part -> .
    (23) procedure_declaration -> . PROCEDURE ID LPARENT param_section RPARENT SEMICOLON
    (24) function_declaration -> . FUNCTION ID LPARENT param_section RPARENT TWOPOINTS types SEMICOLON

    BEGIN           reduce using rule 22 (subroutine_declaration_part -> .)
    PROCEDURE       shift and go to state 15
    FUNCTION        shift and go to state 16

    function_declaration           shift and go to state 14
    subroutine_declaration_part    shift and go to state 24
    procedure_declaration          shift and go to state 13

state 15

    (23) procedure_declaration -> PROCEDURE . ID LPARENT param_section RPARENT SEMICOLON

    ID              shift and go to state 25


state 16

    (24) function_declaration -> FUNCTION . ID LPARENT param_section RPARENT TWOPOINTS types SEMICOLON

    ID              shift and go to state 26


state 17

    (8) var_declaration_part -> VAR var_declaration .

    PROCEDURE       reduce using rule 8 (var_declaration_part -> VAR var_declaration .)
    FUNCTION        reduce using rule 8 (var_declaration_part -> VAR var_declaration .)
    BEGIN           reduce using rule 8 (var_declaration_part -> VAR var_declaration .)


state 18

    (10) var_declaration -> identifier_list . TWOPOINTS types SEMICOLON var_declaration
    (11) var_declaration -> identifier_list . TWOPOINTS types SEMICOLON

    TWOPOINTS       shift and go to state 27


state 19

    (18) identifier_list -> ID .
    (19) identifier_list -> ID . COMMA identifier_list

    TWOPOINTS       reduce using rule 18 (identifier_list -> ID .)
    COMMA           shift and go to state 28


state 20

    (6) const_definition -> ID EQUALS . types SEMICOLON const_definition
    (7) const_definition -> ID EQUALS . types SEMICOLON
    (12) types -> . INTEGER
    (13) types -> . REAL
    (14) types -> . STRING
    (15) types -> . BOOLEAN
    (16) types -> . CHAR
    (17) types -> . ID

    INTEGER         shift and go to state 31
    REAL            shift and go to state 32
    STRING          shift and go to state 33
    BOOLEAN         shift and go to state 34
    CHAR            shift and go to state 35
    ID              shift and go to state 29

    types                          shift and go to state 30

state 21

    (3) block -> const_declaration_part var_declaration_part subroutine_declaration_part compound_statement_score .

    $end            reduce using rule 3 (block -> const_declaration_part var_declaration_part subroutine_declaration_part compound_statement_score .)


state 22

    (27) compound_statement_score -> BEGIN . statements END SCORE
    (28) compound_statement_score -> BEGIN . END SCORE
    (31) statements -> . statement
    (32) statements -> . statement statements
    (33) statement -> . nstatement
    (34) statement -> . if2_statement
    (35) nstatement -> . assign_statement
    (36) nstatement -> . procedure_call_statement
    (37) nstatement -> . IF expr_list THEN nstatement ELSE nstatement
    (38) nstatement -> . case_statement
    (39) nstatement -> . while_statement
    (40) nstatement -> . repeat_statement
    (41) nstatement -> . for_statement
    (42) nstatement -> . compound_statement_semicolon
    (45) if2_statement -> . IF expr_list THEN statement
    (46) if2_statement -> . IF expr_list THEN nstatement ELSE if2_statement
    (43) assign_statement -> . ID ASSIGNMENT expr SEMICOLON
    (44) procedure_call_statement -> . ID LPARENT expr_list RPARENT SEMICOLON
    (47) case_statement -> . CASE expr OF cases END SEMICOLON
    (53) while_statement -> . WHILE expr DO statement
    (54) repeat_statement -> . REPEAT statement UNTIL expr SEMICOLON
    (55) for_statement -> . FOR ID ASSIGNMENT expr TO expr DO statement
    (29) compound_statement_semicolon -> . BEGIN statements END SEMICOLON
    (30) compound_statement_semicolon -> . BEGIN END SEMICOLON

    END             shift and go to state 38
    IF              shift and go to state 44
    ID              shift and go to state 50
    CASE            shift and go to state 51
    WHILE           shift and go to state 52
    REPEAT          shift and go to state 53
    FOR             shift and go to state 54
    BEGIN           shift and go to state 36

    statements                     shift and go to state 37
    statement                      shift and go to state 39
    nstatement                     shift and go to state 40
    if2_statement                  shift and go to state 41
    assign_statement               shift and go to state 42
    procedure_call_statement       shift and go to state 43
    case_statement                 shift and go to state 45
    while_statement                shift and go to state 46
    repeat_statement               shift and go to state 47
    for_statement                  shift and go to state 48
    compound_statement_semicolon   shift and go to state 49

state 23

    (20) subroutine_declaration_part -> procedure_declaration subroutine_declaration_part .

    BEGIN           reduce using rule 20 (subroutine_declaration_part -> procedure_declaration subroutine_declaration_part .)


state 24

    (21) subroutine_declaration_part -> function_declaration subroutine_declaration_part .

    BEGIN           reduce using rule 21 (subroutine_declaration_part -> function_declaration subroutine_declaration_part .)


state 25

    (23) procedure_declaration -> PROCEDURE ID . LPARENT param_section RPARENT SEMICOLON

    LPARENT         shift and go to state 55


state 26

    (24) function_declaration -> FUNCTION ID . LPARENT param_section RPARENT TWOPOINTS types SEMICOLON

    LPARENT         shift and go to state 56


state 27

    (10) var_declaration -> identifier_list TWOPOINTS . types SEMICOLON var_declaration
    (11) var_declaration -> identifier_list TWOPOINTS . types SEMICOLON
    (12) types -> . INTEGER
    (13) types -> . REAL
    (14) types -> . STRING
    (15) types -> . BOOLEAN
    (16) types -> . CHAR
    (17) types -> . ID

    INTEGER         shift and go to state 31
    REAL            shift and go to state 32
    STRING          shift and go to state 33
    BOOLEAN         shift and go to state 34
    CHAR            shift and go to state 35
    ID              shift and go to state 29

    types                          shift and go to state 57

state 28

    (19) identifier_list -> ID COMMA . identifier_list
    (18) identifier_list -> . ID
    (19) identifier_list -> . ID COMMA identifier_list

    ID              shift and go to state 19

    identifier_list                shift and go to state 58

state 29

    (17) types -> ID .

    SEMICOLON       reduce using rule 17 (types -> ID .)


state 30

    (6) const_definition -> ID EQUALS types . SEMICOLON const_definition
    (7) const_definition -> ID EQUALS types . SEMICOLON

    SEMICOLON       shift and go to state 59


state 31

    (12) types -> INTEGER .

    SEMICOLON       reduce using rule 12 (types -> INTEGER .)


state 32

    (13) types -> REAL .

    SEMICOLON       reduce using rule 13 (types -> REAL .)


state 33

    (14) types -> STRING .

    SEMICOLON       reduce using rule 14 (types -> STRING .)


state 34

    (15) types -> BOOLEAN .

    SEMICOLON       reduce using rule 15 (types -> BOOLEAN .)


state 35

    (16) types -> CHAR .

    SEMICOLON       reduce using rule 16 (types -> CHAR .)


state 36

    (29) compound_statement_semicolon -> BEGIN . statements END SEMICOLON
    (30) compound_statement_semicolon -> BEGIN . END SEMICOLON
    (31) statements -> . statement
    (32) statements -> . statement statements
    (33) statement -> . nstatement
    (34) statement -> . if2_statement
    (35) nstatement -> . assign_statement
    (36) nstatement -> . procedure_call_statement
    (37) nstatement -> . IF expr_list THEN nstatement ELSE nstatement
    (38) nstatement -> . case_statement
    (39) nstatement -> . while_statement
    (40) nstatement -> . repeat_statement
    (41) nstatement -> . for_statement
    (42) nstatement -> . compound_statement_semicolon
    (45) if2_statement -> . IF expr_list THEN statement
    (46) if2_statement -> . IF expr_list THEN nstatement ELSE if2_statement
    (43) assign_statement -> . ID ASSIGNMENT expr SEMICOLON
    (44) procedure_call_statement -> . ID LPARENT expr_list RPARENT SEMICOLON
    (47) case_statement -> . CASE expr OF cases END SEMICOLON
    (53) while_statement -> . WHILE expr DO statement
    (54) repeat_statement -> . REPEAT statement UNTIL expr SEMICOLON
    (55) for_statement -> . FOR ID ASSIGNMENT expr TO expr DO statement
    (29) compound_statement_semicolon -> . BEGIN statements END SEMICOLON
    (30) compound_statement_semicolon -> . BEGIN END SEMICOLON

    END             shift and go to state 61
    IF              shift and go to state 44
    ID              shift and go to state 50
    CASE            shift and go to state 51
    WHILE           shift and go to state 52
    REPEAT          shift and go to state 53
    FOR             shift and go to state 54
    BEGIN           shift and go to state 36

    statements                     shift and go to state 60
    statement                      shift and go to state 39
    nstatement                     shift and go to state 40
    if2_statement                  shift and go to state 41
    assign_statement               shift and go to state 42
    procedure_call_statement       shift and go to state 43
    case_statement                 shift and go to state 45
    while_statement                shift and go to state 46
    repeat_statement               shift and go to state 47
    for_statement                  shift and go to state 48
    compound_statement_semicolon   shift and go to state 49

state 37

    (27) compound_statement_score -> BEGIN statements . END SCORE

    END             shift and go to state 62


state 38

    (28) compound_statement_score -> BEGIN END . SCORE

    SCORE           shift and go to state 63


state 39

    (31) statements -> statement .
    (32) statements -> statement . statements
    (31) statements -> . statement
    (32) statements -> . statement statements
    (33) statement -> . nstatement
    (34) statement -> . if2_statement
    (35) nstatement -> . assign_statement
    (36) nstatement -> . procedure_call_statement
    (37) nstatement -> . IF expr_list THEN nstatement ELSE nstatement
    (38) nstatement -> . case_statement
    (39) nstatement -> . while_statement
    (40) nstatement -> . repeat_statement
    (41) nstatement -> . for_statement
    (42) nstatement -> . compound_statement_semicolon
    (45) if2_statement -> . IF expr_list THEN statement
    (46) if2_statement -> . IF expr_list THEN nstatement ELSE if2_statement
    (43) assign_statement -> . ID ASSIGNMENT expr SEMICOLON
    (44) procedure_call_statement -> . ID LPARENT expr_list RPARENT SEMICOLON
    (47) case_statement -> . CASE expr OF cases END SEMICOLON
    (53) while_statement -> . WHILE expr DO statement
    (54) repeat_statement -> . REPEAT statement UNTIL expr SEMICOLON
    (55) for_statement -> . FOR ID ASSIGNMENT expr TO expr DO statement
    (29) compound_statement_semicolon -> . BEGIN statements END SEMICOLON
    (30) compound_statement_semicolon -> . BEGIN END SEMICOLON

    END             reduce using rule 31 (statements -> statement .)
    IF              shift and go to state 44
    ID              shift and go to state 50
    CASE            shift and go to state 51
    WHILE           shift and go to state 52
    REPEAT          shift and go to state 53
    FOR             shift and go to state 54
    BEGIN           shift and go to state 36

    statement                      shift and go to state 39
    statements                     shift and go to state 64
    nstatement                     shift and go to state 40
    if2_statement                  shift and go to state 41
    assign_statement               shift and go to state 42
    procedure_call_statement       shift and go to state 43
    case_statement                 shift and go to state 45
    while_statement                shift and go to state 46
    repeat_statement               shift and go to state 47
    for_statement                  shift and go to state 48
    compound_statement_semicolon   shift and go to state 49

state 40

    (33) statement -> nstatement .

    IF              reduce using rule 33 (statement -> nstatement .)
    ID              reduce using rule 33 (statement -> nstatement .)
    CASE            reduce using rule 33 (statement -> nstatement .)
    WHILE           reduce using rule 33 (statement -> nstatement .)
    REPEAT          reduce using rule 33 (statement -> nstatement .)
    FOR             reduce using rule 33 (statement -> nstatement .)
    BEGIN           reduce using rule 33 (statement -> nstatement .)
    END             reduce using rule 33 (statement -> nstatement .)
    UNTIL           reduce using rule 33 (statement -> nstatement .)
    ELSE            reduce using rule 33 (statement -> nstatement .)
    INTEGER         reduce using rule 33 (statement -> nstatement .)
    REAL            reduce using rule 33 (statement -> nstatement .)


state 41

    (34) statement -> if2_statement .

    IF              reduce using rule 34 (statement -> if2_statement .)
    ID              reduce using rule 34 (statement -> if2_statement .)
    CASE            reduce using rule 34 (statement -> if2_statement .)
    WHILE           reduce using rule 34 (statement -> if2_statement .)
    REPEAT          reduce using rule 34 (statement -> if2_statement .)
    FOR             reduce using rule 34 (statement -> if2_statement .)
    BEGIN           reduce using rule 34 (statement -> if2_statement .)
    END             reduce using rule 34 (statement -> if2_statement .)
    UNTIL           reduce using rule 34 (statement -> if2_statement .)
    ELSE            reduce using rule 34 (statement -> if2_statement .)
    INTEGER         reduce using rule 34 (statement -> if2_statement .)
    REAL            reduce using rule 34 (statement -> if2_statement .)


state 42

    (35) nstatement -> assign_statement .

    IF              reduce using rule 35 (nstatement -> assign_statement .)
    ID              reduce using rule 35 (nstatement -> assign_statement .)
    CASE            reduce using rule 35 (nstatement -> assign_statement .)
    WHILE           reduce using rule 35 (nstatement -> assign_statement .)
    REPEAT          reduce using rule 35 (nstatement -> assign_statement .)
    FOR             reduce using rule 35 (nstatement -> assign_statement .)
    BEGIN           reduce using rule 35 (nstatement -> assign_statement .)
    END             reduce using rule 35 (nstatement -> assign_statement .)
    UNTIL           reduce using rule 35 (nstatement -> assign_statement .)
    ELSE            reduce using rule 35 (nstatement -> assign_statement .)
    INTEGER         reduce using rule 35 (nstatement -> assign_statement .)
    REAL            reduce using rule 35 (nstatement -> assign_statement .)


state 43

    (36) nstatement -> procedure_call_statement .

    IF              reduce using rule 36 (nstatement -> procedure_call_statement .)
    ID              reduce using rule 36 (nstatement -> procedure_call_statement .)
    CASE            reduce using rule 36 (nstatement -> procedure_call_statement .)
    WHILE           reduce using rule 36 (nstatement -> procedure_call_statement .)
    REPEAT          reduce using rule 36 (nstatement -> procedure_call_statement .)
    FOR             reduce using rule 36 (nstatement -> procedure_call_statement .)
    BEGIN           reduce using rule 36 (nstatement -> procedure_call_statement .)
    END             reduce using rule 36 (nstatement -> procedure_call_statement .)
    UNTIL           reduce using rule 36 (nstatement -> procedure_call_statement .)
    ELSE            reduce using rule 36 (nstatement -> procedure_call_statement .)
    INTEGER         reduce using rule 36 (nstatement -> procedure_call_statement .)
    REAL            reduce using rule 36 (nstatement -> procedure_call_statement .)


state 44

    (37) nstatement -> IF . expr_list THEN nstatement ELSE nstatement
    (45) if2_statement -> IF . expr_list THEN statement
    (46) if2_statement -> IF . expr_list THEN nstatement ELSE if2_statement
    (56) expr_list -> . expr
    (57) expr_list -> . expr COMMA expr_list
    (58) expr -> . expr EQUALS expr
    (59) expr -> . expr LTHAN expr
    (60) expr -> . expr GTHAN expr
    (61) expr -> . expr DIFFERENT expr
    (62) expr -> . expr GEQUALS expr
    (63) expr -> . expr LEQUALS expr
    (64) expr -> . expr PLUS expr
    (65) expr -> . expr MINUS expr
    (66) expr -> . expr OR expr
    (67) expr -> . expr TIMES expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr DIV expr
    (70) expr -> . expr MOD expr
    (71) expr -> . expr AND expr
    (72) expr -> . PLUS expr
    (73) expr -> . MINUS expr
    (74) expr -> . factor
    (75) factor -> . ID
    (76) factor -> . INTEGER
    (77) factor -> . REAL
    (78) factor -> . STRING
    (79) factor -> . NOT factor

    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    ID              shift and go to state 70
    INTEGER         shift and go to state 71
    REAL            shift and go to state 72
    STRING          shift and go to state 73
    NOT             shift and go to state 74

    expr_list                      shift and go to state 65
    expr                           shift and go to state 66
    factor                         shift and go to state 69

state 45

    (38) nstatement -> case_statement .

    IF              reduce using rule 38 (nstatement -> case_statement .)
    ID              reduce using rule 38 (nstatement -> case_statement .)
    CASE            reduce using rule 38 (nstatement -> case_statement .)
    WHILE           reduce using rule 38 (nstatement -> case_statement .)
    REPEAT          reduce using rule 38 (nstatement -> case_statement .)
    FOR             reduce using rule 38 (nstatement -> case_statement .)
    BEGIN           reduce using rule 38 (nstatement -> case_statement .)
    END             reduce using rule 38 (nstatement -> case_statement .)
    UNTIL           reduce using rule 38 (nstatement -> case_statement .)
    ELSE            reduce using rule 38 (nstatement -> case_statement .)
    INTEGER         reduce using rule 38 (nstatement -> case_statement .)
    REAL            reduce using rule 38 (nstatement -> case_statement .)


state 46

    (39) nstatement -> while_statement .

    IF              reduce using rule 39 (nstatement -> while_statement .)
    ID              reduce using rule 39 (nstatement -> while_statement .)
    CASE            reduce using rule 39 (nstatement -> while_statement .)
    WHILE           reduce using rule 39 (nstatement -> while_statement .)
    REPEAT          reduce using rule 39 (nstatement -> while_statement .)
    FOR             reduce using rule 39 (nstatement -> while_statement .)
    BEGIN           reduce using rule 39 (nstatement -> while_statement .)
    END             reduce using rule 39 (nstatement -> while_statement .)
    UNTIL           reduce using rule 39 (nstatement -> while_statement .)
    ELSE            reduce using rule 39 (nstatement -> while_statement .)
    INTEGER         reduce using rule 39 (nstatement -> while_statement .)
    REAL            reduce using rule 39 (nstatement -> while_statement .)


state 47

    (40) nstatement -> repeat_statement .

    IF              reduce using rule 40 (nstatement -> repeat_statement .)
    ID              reduce using rule 40 (nstatement -> repeat_statement .)
    CASE            reduce using rule 40 (nstatement -> repeat_statement .)
    WHILE           reduce using rule 40 (nstatement -> repeat_statement .)
    REPEAT          reduce using rule 40 (nstatement -> repeat_statement .)
    FOR             reduce using rule 40 (nstatement -> repeat_statement .)
    BEGIN           reduce using rule 40 (nstatement -> repeat_statement .)
    END             reduce using rule 40 (nstatement -> repeat_statement .)
    UNTIL           reduce using rule 40 (nstatement -> repeat_statement .)
    ELSE            reduce using rule 40 (nstatement -> repeat_statement .)
    INTEGER         reduce using rule 40 (nstatement -> repeat_statement .)
    REAL            reduce using rule 40 (nstatement -> repeat_statement .)


state 48

    (41) nstatement -> for_statement .

    IF              reduce using rule 41 (nstatement -> for_statement .)
    ID              reduce using rule 41 (nstatement -> for_statement .)
    CASE            reduce using rule 41 (nstatement -> for_statement .)
    WHILE           reduce using rule 41 (nstatement -> for_statement .)
    REPEAT          reduce using rule 41 (nstatement -> for_statement .)
    FOR             reduce using rule 41 (nstatement -> for_statement .)
    BEGIN           reduce using rule 41 (nstatement -> for_statement .)
    END             reduce using rule 41 (nstatement -> for_statement .)
    UNTIL           reduce using rule 41 (nstatement -> for_statement .)
    ELSE            reduce using rule 41 (nstatement -> for_statement .)
    INTEGER         reduce using rule 41 (nstatement -> for_statement .)
    REAL            reduce using rule 41 (nstatement -> for_statement .)


state 49

    (42) nstatement -> compound_statement_semicolon .

    IF              reduce using rule 42 (nstatement -> compound_statement_semicolon .)
    ID              reduce using rule 42 (nstatement -> compound_statement_semicolon .)
    CASE            reduce using rule 42 (nstatement -> compound_statement_semicolon .)
    WHILE           reduce using rule 42 (nstatement -> compound_statement_semicolon .)
    REPEAT          reduce using rule 42 (nstatement -> compound_statement_semicolon .)
    FOR             reduce using rule 42 (nstatement -> compound_statement_semicolon .)
    BEGIN           reduce using rule 42 (nstatement -> compound_statement_semicolon .)
    END             reduce using rule 42 (nstatement -> compound_statement_semicolon .)
    UNTIL           reduce using rule 42 (nstatement -> compound_statement_semicolon .)
    ELSE            reduce using rule 42 (nstatement -> compound_statement_semicolon .)
    INTEGER         reduce using rule 42 (nstatement -> compound_statement_semicolon .)
    REAL            reduce using rule 42 (nstatement -> compound_statement_semicolon .)


state 50

    (43) assign_statement -> ID . ASSIGNMENT expr SEMICOLON
    (44) procedure_call_statement -> ID . LPARENT expr_list RPARENT SEMICOLON

    ASSIGNMENT      shift and go to state 75
    LPARENT         shift and go to state 76


state 51

    (47) case_statement -> CASE . expr OF cases END SEMICOLON
    (58) expr -> . expr EQUALS expr
    (59) expr -> . expr LTHAN expr
    (60) expr -> . expr GTHAN expr
    (61) expr -> . expr DIFFERENT expr
    (62) expr -> . expr GEQUALS expr
    (63) expr -> . expr LEQUALS expr
    (64) expr -> . expr PLUS expr
    (65) expr -> . expr MINUS expr
    (66) expr -> . expr OR expr
    (67) expr -> . expr TIMES expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr DIV expr
    (70) expr -> . expr MOD expr
    (71) expr -> . expr AND expr
    (72) expr -> . PLUS expr
    (73) expr -> . MINUS expr
    (74) expr -> . factor
    (75) factor -> . ID
    (76) factor -> . INTEGER
    (77) factor -> . REAL
    (78) factor -> . STRING
    (79) factor -> . NOT factor

    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    ID              shift and go to state 70
    INTEGER         shift and go to state 71
    REAL            shift and go to state 72
    STRING          shift and go to state 73
    NOT             shift and go to state 74

    expr                           shift and go to state 77
    factor                         shift and go to state 69

state 52

    (53) while_statement -> WHILE . expr DO statement
    (58) expr -> . expr EQUALS expr
    (59) expr -> . expr LTHAN expr
    (60) expr -> . expr GTHAN expr
    (61) expr -> . expr DIFFERENT expr
    (62) expr -> . expr GEQUALS expr
    (63) expr -> . expr LEQUALS expr
    (64) expr -> . expr PLUS expr
    (65) expr -> . expr MINUS expr
    (66) expr -> . expr OR expr
    (67) expr -> . expr TIMES expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr DIV expr
    (70) expr -> . expr MOD expr
    (71) expr -> . expr AND expr
    (72) expr -> . PLUS expr
    (73) expr -> . MINUS expr
    (74) expr -> . factor
    (75) factor -> . ID
    (76) factor -> . INTEGER
    (77) factor -> . REAL
    (78) factor -> . STRING
    (79) factor -> . NOT factor

    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    ID              shift and go to state 70
    INTEGER         shift and go to state 71
    REAL            shift and go to state 72
    STRING          shift and go to state 73
    NOT             shift and go to state 74

    expr                           shift and go to state 78
    factor                         shift and go to state 69

state 53

    (54) repeat_statement -> REPEAT . statement UNTIL expr SEMICOLON
    (33) statement -> . nstatement
    (34) statement -> . if2_statement
    (35) nstatement -> . assign_statement
    (36) nstatement -> . procedure_call_statement
    (37) nstatement -> . IF expr_list THEN nstatement ELSE nstatement
    (38) nstatement -> . case_statement
    (39) nstatement -> . while_statement
    (40) nstatement -> . repeat_statement
    (41) nstatement -> . for_statement
    (42) nstatement -> . compound_statement_semicolon
    (45) if2_statement -> . IF expr_list THEN statement
    (46) if2_statement -> . IF expr_list THEN nstatement ELSE if2_statement
    (43) assign_statement -> . ID ASSIGNMENT expr SEMICOLON
    (44) procedure_call_statement -> . ID LPARENT expr_list RPARENT SEMICOLON
    (47) case_statement -> . CASE expr OF cases END SEMICOLON
    (53) while_statement -> . WHILE expr DO statement
    (54) repeat_statement -> . REPEAT statement UNTIL expr SEMICOLON
    (55) for_statement -> . FOR ID ASSIGNMENT expr TO expr DO statement
    (29) compound_statement_semicolon -> . BEGIN statements END SEMICOLON
    (30) compound_statement_semicolon -> . BEGIN END SEMICOLON

    IF              shift and go to state 44
    ID              shift and go to state 50
    CASE            shift and go to state 51
    WHILE           shift and go to state 52
    REPEAT          shift and go to state 53
    FOR             shift and go to state 54
    BEGIN           shift and go to state 36

    statement                      shift and go to state 79
    nstatement                     shift and go to state 40
    if2_statement                  shift and go to state 41
    assign_statement               shift and go to state 42
    procedure_call_statement       shift and go to state 43
    case_statement                 shift and go to state 45
    while_statement                shift and go to state 46
    repeat_statement               shift and go to state 47
    for_statement                  shift and go to state 48
    compound_statement_semicolon   shift and go to state 49

state 54

    (55) for_statement -> FOR . ID ASSIGNMENT expr TO expr DO statement

    ID              shift and go to state 80


state 55

    (23) procedure_declaration -> PROCEDURE ID LPARENT . param_section RPARENT SEMICOLON
    (25) param_section -> . identifier_list TWOPOINTS types SEMICOLON param_section
    (26) param_section -> .
    (18) identifier_list -> . ID
    (19) identifier_list -> . ID COMMA identifier_list

    RPARENT         reduce using rule 26 (param_section -> .)
    ID              shift and go to state 19

    param_section                  shift and go to state 81
    identifier_list                shift and go to state 82

state 56

    (24) function_declaration -> FUNCTION ID LPARENT . param_section RPARENT TWOPOINTS types SEMICOLON
    (25) param_section -> . identifier_list TWOPOINTS types SEMICOLON param_section
    (26) param_section -> .
    (18) identifier_list -> . ID
    (19) identifier_list -> . ID COMMA identifier_list

    RPARENT         reduce using rule 26 (param_section -> .)
    ID              shift and go to state 19

    param_section                  shift and go to state 83
    identifier_list                shift and go to state 82

state 57

    (10) var_declaration -> identifier_list TWOPOINTS types . SEMICOLON var_declaration
    (11) var_declaration -> identifier_list TWOPOINTS types . SEMICOLON

    SEMICOLON       shift and go to state 84


state 58

    (19) identifier_list -> ID COMMA identifier_list .

    TWOPOINTS       reduce using rule 19 (identifier_list -> ID COMMA identifier_list .)


state 59

    (6) const_definition -> ID EQUALS types SEMICOLON . const_definition
    (7) const_definition -> ID EQUALS types SEMICOLON .
    (6) const_definition -> . ID EQUALS types SEMICOLON const_definition
    (7) const_definition -> . ID EQUALS types SEMICOLON

    VAR             reduce using rule 7 (const_definition -> ID EQUALS types SEMICOLON .)
    PROCEDURE       reduce using rule 7 (const_definition -> ID EQUALS types SEMICOLON .)
    FUNCTION        reduce using rule 7 (const_definition -> ID EQUALS types SEMICOLON .)
    BEGIN           reduce using rule 7 (const_definition -> ID EQUALS types SEMICOLON .)
    ID              shift and go to state 11

    const_definition               shift and go to state 85

state 60

    (29) compound_statement_semicolon -> BEGIN statements . END SEMICOLON

    END             shift and go to state 86


state 61

    (30) compound_statement_semicolon -> BEGIN END . SEMICOLON

    SEMICOLON       shift and go to state 87


state 62

    (27) compound_statement_score -> BEGIN statements END . SCORE

    SCORE           shift and go to state 88


state 63

    (28) compound_statement_score -> BEGIN END SCORE .

    $end            reduce using rule 28 (compound_statement_score -> BEGIN END SCORE .)


state 64

    (32) statements -> statement statements .

    END             reduce using rule 32 (statements -> statement statements .)


state 65

    (37) nstatement -> IF expr_list . THEN nstatement ELSE nstatement
    (45) if2_statement -> IF expr_list . THEN statement
    (46) if2_statement -> IF expr_list . THEN nstatement ELSE if2_statement

    THEN            shift and go to state 89


state 66

    (56) expr_list -> expr .
    (57) expr_list -> expr . COMMA expr_list
    (58) expr -> expr . EQUALS expr
    (59) expr -> expr . LTHAN expr
    (60) expr -> expr . GTHAN expr
    (61) expr -> expr . DIFFERENT expr
    (62) expr -> expr . GEQUALS expr
    (63) expr -> expr . LEQUALS expr
    (64) expr -> expr . PLUS expr
    (65) expr -> expr . MINUS expr
    (66) expr -> expr . OR expr
    (67) expr -> expr . TIMES expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . DIV expr
    (70) expr -> expr . MOD expr
    (71) expr -> expr . AND expr

    THEN            reduce using rule 56 (expr_list -> expr .)
    RPARENT         reduce using rule 56 (expr_list -> expr .)
    COMMA           shift and go to state 90
    EQUALS          shift and go to state 91
    LTHAN           shift and go to state 92
    GTHAN           shift and go to state 93
    DIFFERENT       shift and go to state 94
    GEQUALS         shift and go to state 95
    LEQUALS         shift and go to state 96
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    OR              shift and go to state 99
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 101
    DIV             shift and go to state 102
    MOD             shift and go to state 103
    AND             shift and go to state 104


state 67

    (72) expr -> PLUS . expr
    (58) expr -> . expr EQUALS expr
    (59) expr -> . expr LTHAN expr
    (60) expr -> . expr GTHAN expr
    (61) expr -> . expr DIFFERENT expr
    (62) expr -> . expr GEQUALS expr
    (63) expr -> . expr LEQUALS expr
    (64) expr -> . expr PLUS expr
    (65) expr -> . expr MINUS expr
    (66) expr -> . expr OR expr
    (67) expr -> . expr TIMES expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr DIV expr
    (70) expr -> . expr MOD expr
    (71) expr -> . expr AND expr
    (72) expr -> . PLUS expr
    (73) expr -> . MINUS expr
    (74) expr -> . factor
    (75) factor -> . ID
    (76) factor -> . INTEGER
    (77) factor -> . REAL
    (78) factor -> . STRING
    (79) factor -> . NOT factor

    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    ID              shift and go to state 70
    INTEGER         shift and go to state 71
    REAL            shift and go to state 72
    STRING          shift and go to state 73
    NOT             shift and go to state 74

    expr                           shift and go to state 105
    factor                         shift and go to state 69

state 68

    (73) expr -> MINUS . expr
    (58) expr -> . expr EQUALS expr
    (59) expr -> . expr LTHAN expr
    (60) expr -> . expr GTHAN expr
    (61) expr -> . expr DIFFERENT expr
    (62) expr -> . expr GEQUALS expr
    (63) expr -> . expr LEQUALS expr
    (64) expr -> . expr PLUS expr
    (65) expr -> . expr MINUS expr
    (66) expr -> . expr OR expr
    (67) expr -> . expr TIMES expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr DIV expr
    (70) expr -> . expr MOD expr
    (71) expr -> . expr AND expr
    (72) expr -> . PLUS expr
    (73) expr -> . MINUS expr
    (74) expr -> . factor
    (75) factor -> . ID
    (76) factor -> . INTEGER
    (77) factor -> . REAL
    (78) factor -> . STRING
    (79) factor -> . NOT factor

    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    ID              shift and go to state 70
    INTEGER         shift and go to state 71
    REAL            shift and go to state 72
    STRING          shift and go to state 73
    NOT             shift and go to state 74

    expr                           shift and go to state 106
    factor                         shift and go to state 69

state 69

    (74) expr -> factor .

    COMMA           reduce using rule 74 (expr -> factor .)
    EQUALS          reduce using rule 74 (expr -> factor .)
    LTHAN           reduce using rule 74 (expr -> factor .)
    GTHAN           reduce using rule 74 (expr -> factor .)
    DIFFERENT       reduce using rule 74 (expr -> factor .)
    GEQUALS         reduce using rule 74 (expr -> factor .)
    LEQUALS         reduce using rule 74 (expr -> factor .)
    PLUS            reduce using rule 74 (expr -> factor .)
    MINUS           reduce using rule 74 (expr -> factor .)
    OR              reduce using rule 74 (expr -> factor .)
    TIMES           reduce using rule 74 (expr -> factor .)
    DIVIDE          reduce using rule 74 (expr -> factor .)
    DIV             reduce using rule 74 (expr -> factor .)
    MOD             reduce using rule 74 (expr -> factor .)
    AND             reduce using rule 74 (expr -> factor .)
    THEN            reduce using rule 74 (expr -> factor .)
    OF              reduce using rule 74 (expr -> factor .)
    DO              reduce using rule 74 (expr -> factor .)
    SEMICOLON       reduce using rule 74 (expr -> factor .)
    RPARENT         reduce using rule 74 (expr -> factor .)
    TO              reduce using rule 74 (expr -> factor .)


state 70

    (75) factor -> ID .

    COMMA           reduce using rule 75 (factor -> ID .)
    EQUALS          reduce using rule 75 (factor -> ID .)
    LTHAN           reduce using rule 75 (factor -> ID .)
    GTHAN           reduce using rule 75 (factor -> ID .)
    DIFFERENT       reduce using rule 75 (factor -> ID .)
    GEQUALS         reduce using rule 75 (factor -> ID .)
    LEQUALS         reduce using rule 75 (factor -> ID .)
    PLUS            reduce using rule 75 (factor -> ID .)
    MINUS           reduce using rule 75 (factor -> ID .)
    OR              reduce using rule 75 (factor -> ID .)
    TIMES           reduce using rule 75 (factor -> ID .)
    DIVIDE          reduce using rule 75 (factor -> ID .)
    DIV             reduce using rule 75 (factor -> ID .)
    MOD             reduce using rule 75 (factor -> ID .)
    AND             reduce using rule 75 (factor -> ID .)
    THEN            reduce using rule 75 (factor -> ID .)
    OF              reduce using rule 75 (factor -> ID .)
    DO              reduce using rule 75 (factor -> ID .)
    SEMICOLON       reduce using rule 75 (factor -> ID .)
    RPARENT         reduce using rule 75 (factor -> ID .)
    TO              reduce using rule 75 (factor -> ID .)


state 71

    (76) factor -> INTEGER .

    COMMA           reduce using rule 76 (factor -> INTEGER .)
    EQUALS          reduce using rule 76 (factor -> INTEGER .)
    LTHAN           reduce using rule 76 (factor -> INTEGER .)
    GTHAN           reduce using rule 76 (factor -> INTEGER .)
    DIFFERENT       reduce using rule 76 (factor -> INTEGER .)
    GEQUALS         reduce using rule 76 (factor -> INTEGER .)
    LEQUALS         reduce using rule 76 (factor -> INTEGER .)
    PLUS            reduce using rule 76 (factor -> INTEGER .)
    MINUS           reduce using rule 76 (factor -> INTEGER .)
    OR              reduce using rule 76 (factor -> INTEGER .)
    TIMES           reduce using rule 76 (factor -> INTEGER .)
    DIVIDE          reduce using rule 76 (factor -> INTEGER .)
    DIV             reduce using rule 76 (factor -> INTEGER .)
    MOD             reduce using rule 76 (factor -> INTEGER .)
    AND             reduce using rule 76 (factor -> INTEGER .)
    THEN            reduce using rule 76 (factor -> INTEGER .)
    OF              reduce using rule 76 (factor -> INTEGER .)
    DO              reduce using rule 76 (factor -> INTEGER .)
    SEMICOLON       reduce using rule 76 (factor -> INTEGER .)
    RPARENT         reduce using rule 76 (factor -> INTEGER .)
    TO              reduce using rule 76 (factor -> INTEGER .)


state 72

    (77) factor -> REAL .

    COMMA           reduce using rule 77 (factor -> REAL .)
    EQUALS          reduce using rule 77 (factor -> REAL .)
    LTHAN           reduce using rule 77 (factor -> REAL .)
    GTHAN           reduce using rule 77 (factor -> REAL .)
    DIFFERENT       reduce using rule 77 (factor -> REAL .)
    GEQUALS         reduce using rule 77 (factor -> REAL .)
    LEQUALS         reduce using rule 77 (factor -> REAL .)
    PLUS            reduce using rule 77 (factor -> REAL .)
    MINUS           reduce using rule 77 (factor -> REAL .)
    OR              reduce using rule 77 (factor -> REAL .)
    TIMES           reduce using rule 77 (factor -> REAL .)
    DIVIDE          reduce using rule 77 (factor -> REAL .)
    DIV             reduce using rule 77 (factor -> REAL .)
    MOD             reduce using rule 77 (factor -> REAL .)
    AND             reduce using rule 77 (factor -> REAL .)
    THEN            reduce using rule 77 (factor -> REAL .)
    OF              reduce using rule 77 (factor -> REAL .)
    DO              reduce using rule 77 (factor -> REAL .)
    SEMICOLON       reduce using rule 77 (factor -> REAL .)
    RPARENT         reduce using rule 77 (factor -> REAL .)
    TO              reduce using rule 77 (factor -> REAL .)


state 73

    (78) factor -> STRING .

    COMMA           reduce using rule 78 (factor -> STRING .)
    EQUALS          reduce using rule 78 (factor -> STRING .)
    LTHAN           reduce using rule 78 (factor -> STRING .)
    GTHAN           reduce using rule 78 (factor -> STRING .)
    DIFFERENT       reduce using rule 78 (factor -> STRING .)
    GEQUALS         reduce using rule 78 (factor -> STRING .)
    LEQUALS         reduce using rule 78 (factor -> STRING .)
    PLUS            reduce using rule 78 (factor -> STRING .)
    MINUS           reduce using rule 78 (factor -> STRING .)
    OR              reduce using rule 78 (factor -> STRING .)
    TIMES           reduce using rule 78 (factor -> STRING .)
    DIVIDE          reduce using rule 78 (factor -> STRING .)
    DIV             reduce using rule 78 (factor -> STRING .)
    MOD             reduce using rule 78 (factor -> STRING .)
    AND             reduce using rule 78 (factor -> STRING .)
    THEN            reduce using rule 78 (factor -> STRING .)
    OF              reduce using rule 78 (factor -> STRING .)
    DO              reduce using rule 78 (factor -> STRING .)
    SEMICOLON       reduce using rule 78 (factor -> STRING .)
    RPARENT         reduce using rule 78 (factor -> STRING .)
    TO              reduce using rule 78 (factor -> STRING .)


state 74

    (79) factor -> NOT . factor
    (75) factor -> . ID
    (76) factor -> . INTEGER
    (77) factor -> . REAL
    (78) factor -> . STRING
    (79) factor -> . NOT factor

    ID              shift and go to state 70
    INTEGER         shift and go to state 71
    REAL            shift and go to state 72
    STRING          shift and go to state 73
    NOT             shift and go to state 74

    factor                         shift and go to state 107

state 75

    (43) assign_statement -> ID ASSIGNMENT . expr SEMICOLON
    (58) expr -> . expr EQUALS expr
    (59) expr -> . expr LTHAN expr
    (60) expr -> . expr GTHAN expr
    (61) expr -> . expr DIFFERENT expr
    (62) expr -> . expr GEQUALS expr
    (63) expr -> . expr LEQUALS expr
    (64) expr -> . expr PLUS expr
    (65) expr -> . expr MINUS expr
    (66) expr -> . expr OR expr
    (67) expr -> . expr TIMES expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr DIV expr
    (70) expr -> . expr MOD expr
    (71) expr -> . expr AND expr
    (72) expr -> . PLUS expr
    (73) expr -> . MINUS expr
    (74) expr -> . factor
    (75) factor -> . ID
    (76) factor -> . INTEGER
    (77) factor -> . REAL
    (78) factor -> . STRING
    (79) factor -> . NOT factor

    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    ID              shift and go to state 70
    INTEGER         shift and go to state 71
    REAL            shift and go to state 72
    STRING          shift and go to state 73
    NOT             shift and go to state 74

    expr                           shift and go to state 108
    factor                         shift and go to state 69

state 76

    (44) procedure_call_statement -> ID LPARENT . expr_list RPARENT SEMICOLON
    (56) expr_list -> . expr
    (57) expr_list -> . expr COMMA expr_list
    (58) expr -> . expr EQUALS expr
    (59) expr -> . expr LTHAN expr
    (60) expr -> . expr GTHAN expr
    (61) expr -> . expr DIFFERENT expr
    (62) expr -> . expr GEQUALS expr
    (63) expr -> . expr LEQUALS expr
    (64) expr -> . expr PLUS expr
    (65) expr -> . expr MINUS expr
    (66) expr -> . expr OR expr
    (67) expr -> . expr TIMES expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr DIV expr
    (70) expr -> . expr MOD expr
    (71) expr -> . expr AND expr
    (72) expr -> . PLUS expr
    (73) expr -> . MINUS expr
    (74) expr -> . factor
    (75) factor -> . ID
    (76) factor -> . INTEGER
    (77) factor -> . REAL
    (78) factor -> . STRING
    (79) factor -> . NOT factor

    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    ID              shift and go to state 70
    INTEGER         shift and go to state 71
    REAL            shift and go to state 72
    STRING          shift and go to state 73
    NOT             shift and go to state 74

    expr_list                      shift and go to state 109
    expr                           shift and go to state 66
    factor                         shift and go to state 69

state 77

    (47) case_statement -> CASE expr . OF cases END SEMICOLON
    (58) expr -> expr . EQUALS expr
    (59) expr -> expr . LTHAN expr
    (60) expr -> expr . GTHAN expr
    (61) expr -> expr . DIFFERENT expr
    (62) expr -> expr . GEQUALS expr
    (63) expr -> expr . LEQUALS expr
    (64) expr -> expr . PLUS expr
    (65) expr -> expr . MINUS expr
    (66) expr -> expr . OR expr
    (67) expr -> expr . TIMES expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . DIV expr
    (70) expr -> expr . MOD expr
    (71) expr -> expr . AND expr

    OF              shift and go to state 110
    EQUALS          shift and go to state 91
    LTHAN           shift and go to state 92
    GTHAN           shift and go to state 93
    DIFFERENT       shift and go to state 94
    GEQUALS         shift and go to state 95
    LEQUALS         shift and go to state 96
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    OR              shift and go to state 99
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 101
    DIV             shift and go to state 102
    MOD             shift and go to state 103
    AND             shift and go to state 104


state 78

    (53) while_statement -> WHILE expr . DO statement
    (58) expr -> expr . EQUALS expr
    (59) expr -> expr . LTHAN expr
    (60) expr -> expr . GTHAN expr
    (61) expr -> expr . DIFFERENT expr
    (62) expr -> expr . GEQUALS expr
    (63) expr -> expr . LEQUALS expr
    (64) expr -> expr . PLUS expr
    (65) expr -> expr . MINUS expr
    (66) expr -> expr . OR expr
    (67) expr -> expr . TIMES expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . DIV expr
    (70) expr -> expr . MOD expr
    (71) expr -> expr . AND expr

    DO              shift and go to state 111
    EQUALS          shift and go to state 91
    LTHAN           shift and go to state 92
    GTHAN           shift and go to state 93
    DIFFERENT       shift and go to state 94
    GEQUALS         shift and go to state 95
    LEQUALS         shift and go to state 96
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    OR              shift and go to state 99
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 101
    DIV             shift and go to state 102
    MOD             shift and go to state 103
    AND             shift and go to state 104


state 79

    (54) repeat_statement -> REPEAT statement . UNTIL expr SEMICOLON

    UNTIL           shift and go to state 112


state 80

    (55) for_statement -> FOR ID . ASSIGNMENT expr TO expr DO statement

    ASSIGNMENT      shift and go to state 113


state 81

    (23) procedure_declaration -> PROCEDURE ID LPARENT param_section . RPARENT SEMICOLON

    RPARENT         shift and go to state 114


state 82

    (25) param_section -> identifier_list . TWOPOINTS types SEMICOLON param_section

    TWOPOINTS       shift and go to state 115


state 83

    (24) function_declaration -> FUNCTION ID LPARENT param_section . RPARENT TWOPOINTS types SEMICOLON

    RPARENT         shift and go to state 116


state 84

    (10) var_declaration -> identifier_list TWOPOINTS types SEMICOLON . var_declaration
    (11) var_declaration -> identifier_list TWOPOINTS types SEMICOLON .
    (10) var_declaration -> . identifier_list TWOPOINTS types SEMICOLON var_declaration
    (11) var_declaration -> . identifier_list TWOPOINTS types SEMICOLON
    (18) identifier_list -> . ID
    (19) identifier_list -> . ID COMMA identifier_list

    PROCEDURE       reduce using rule 11 (var_declaration -> identifier_list TWOPOINTS types SEMICOLON .)
    FUNCTION        reduce using rule 11 (var_declaration -> identifier_list TWOPOINTS types SEMICOLON .)
    BEGIN           reduce using rule 11 (var_declaration -> identifier_list TWOPOINTS types SEMICOLON .)
    ID              shift and go to state 19

    identifier_list                shift and go to state 18
    var_declaration                shift and go to state 117

state 85

    (6) const_definition -> ID EQUALS types SEMICOLON const_definition .

    VAR             reduce using rule 6 (const_definition -> ID EQUALS types SEMICOLON const_definition .)
    PROCEDURE       reduce using rule 6 (const_definition -> ID EQUALS types SEMICOLON const_definition .)
    FUNCTION        reduce using rule 6 (const_definition -> ID EQUALS types SEMICOLON const_definition .)
    BEGIN           reduce using rule 6 (const_definition -> ID EQUALS types SEMICOLON const_definition .)


state 86

    (29) compound_statement_semicolon -> BEGIN statements END . SEMICOLON

    SEMICOLON       shift and go to state 118


state 87

    (30) compound_statement_semicolon -> BEGIN END SEMICOLON .

    IF              reduce using rule 30 (compound_statement_semicolon -> BEGIN END SEMICOLON .)
    ID              reduce using rule 30 (compound_statement_semicolon -> BEGIN END SEMICOLON .)
    CASE            reduce using rule 30 (compound_statement_semicolon -> BEGIN END SEMICOLON .)
    WHILE           reduce using rule 30 (compound_statement_semicolon -> BEGIN END SEMICOLON .)
    REPEAT          reduce using rule 30 (compound_statement_semicolon -> BEGIN END SEMICOLON .)
    FOR             reduce using rule 30 (compound_statement_semicolon -> BEGIN END SEMICOLON .)
    BEGIN           reduce using rule 30 (compound_statement_semicolon -> BEGIN END SEMICOLON .)
    END             reduce using rule 30 (compound_statement_semicolon -> BEGIN END SEMICOLON .)
    UNTIL           reduce using rule 30 (compound_statement_semicolon -> BEGIN END SEMICOLON .)
    ELSE            reduce using rule 30 (compound_statement_semicolon -> BEGIN END SEMICOLON .)
    INTEGER         reduce using rule 30 (compound_statement_semicolon -> BEGIN END SEMICOLON .)
    REAL            reduce using rule 30 (compound_statement_semicolon -> BEGIN END SEMICOLON .)


state 88

    (27) compound_statement_score -> BEGIN statements END SCORE .

    $end            reduce using rule 27 (compound_statement_score -> BEGIN statements END SCORE .)


state 89

    (37) nstatement -> IF expr_list THEN . nstatement ELSE nstatement
    (45) if2_statement -> IF expr_list THEN . statement
    (46) if2_statement -> IF expr_list THEN . nstatement ELSE if2_statement
    (35) nstatement -> . assign_statement
    (36) nstatement -> . procedure_call_statement
    (37) nstatement -> . IF expr_list THEN nstatement ELSE nstatement
    (38) nstatement -> . case_statement
    (39) nstatement -> . while_statement
    (40) nstatement -> . repeat_statement
    (41) nstatement -> . for_statement
    (42) nstatement -> . compound_statement_semicolon
    (33) statement -> . nstatement
    (34) statement -> . if2_statement
    (43) assign_statement -> . ID ASSIGNMENT expr SEMICOLON
    (44) procedure_call_statement -> . ID LPARENT expr_list RPARENT SEMICOLON
    (47) case_statement -> . CASE expr OF cases END SEMICOLON
    (53) while_statement -> . WHILE expr DO statement
    (54) repeat_statement -> . REPEAT statement UNTIL expr SEMICOLON
    (55) for_statement -> . FOR ID ASSIGNMENT expr TO expr DO statement
    (29) compound_statement_semicolon -> . BEGIN statements END SEMICOLON
    (30) compound_statement_semicolon -> . BEGIN END SEMICOLON
    (45) if2_statement -> . IF expr_list THEN statement
    (46) if2_statement -> . IF expr_list THEN nstatement ELSE if2_statement

    IF              shift and go to state 44
    ID              shift and go to state 50
    CASE            shift and go to state 51
    WHILE           shift and go to state 52
    REPEAT          shift and go to state 53
    FOR             shift and go to state 54
    BEGIN           shift and go to state 36

    nstatement                     shift and go to state 119
    statement                      shift and go to state 120
    if2_statement                  shift and go to state 41
    assign_statement               shift and go to state 42
    procedure_call_statement       shift and go to state 43
    case_statement                 shift and go to state 45
    while_statement                shift and go to state 46
    repeat_statement               shift and go to state 47
    for_statement                  shift and go to state 48
    compound_statement_semicolon   shift and go to state 49

state 90

    (57) expr_list -> expr COMMA . expr_list
    (56) expr_list -> . expr
    (57) expr_list -> . expr COMMA expr_list
    (58) expr -> . expr EQUALS expr
    (59) expr -> . expr LTHAN expr
    (60) expr -> . expr GTHAN expr
    (61) expr -> . expr DIFFERENT expr
    (62) expr -> . expr GEQUALS expr
    (63) expr -> . expr LEQUALS expr
    (64) expr -> . expr PLUS expr
    (65) expr -> . expr MINUS expr
    (66) expr -> . expr OR expr
    (67) expr -> . expr TIMES expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr DIV expr
    (70) expr -> . expr MOD expr
    (71) expr -> . expr AND expr
    (72) expr -> . PLUS expr
    (73) expr -> . MINUS expr
    (74) expr -> . factor
    (75) factor -> . ID
    (76) factor -> . INTEGER
    (77) factor -> . REAL
    (78) factor -> . STRING
    (79) factor -> . NOT factor

    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    ID              shift and go to state 70
    INTEGER         shift and go to state 71
    REAL            shift and go to state 72
    STRING          shift and go to state 73
    NOT             shift and go to state 74

    expr                           shift and go to state 66
    expr_list                      shift and go to state 121
    factor                         shift and go to state 69

state 91

    (58) expr -> expr EQUALS . expr
    (58) expr -> . expr EQUALS expr
    (59) expr -> . expr LTHAN expr
    (60) expr -> . expr GTHAN expr
    (61) expr -> . expr DIFFERENT expr
    (62) expr -> . expr GEQUALS expr
    (63) expr -> . expr LEQUALS expr
    (64) expr -> . expr PLUS expr
    (65) expr -> . expr MINUS expr
    (66) expr -> . expr OR expr
    (67) expr -> . expr TIMES expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr DIV expr
    (70) expr -> . expr MOD expr
    (71) expr -> . expr AND expr
    (72) expr -> . PLUS expr
    (73) expr -> . MINUS expr
    (74) expr -> . factor
    (75) factor -> . ID
    (76) factor -> . INTEGER
    (77) factor -> . REAL
    (78) factor -> . STRING
    (79) factor -> . NOT factor

    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    ID              shift and go to state 70
    INTEGER         shift and go to state 71
    REAL            shift and go to state 72
    STRING          shift and go to state 73
    NOT             shift and go to state 74

    expr                           shift and go to state 122
    factor                         shift and go to state 69

state 92

    (59) expr -> expr LTHAN . expr
    (58) expr -> . expr EQUALS expr
    (59) expr -> . expr LTHAN expr
    (60) expr -> . expr GTHAN expr
    (61) expr -> . expr DIFFERENT expr
    (62) expr -> . expr GEQUALS expr
    (63) expr -> . expr LEQUALS expr
    (64) expr -> . expr PLUS expr
    (65) expr -> . expr MINUS expr
    (66) expr -> . expr OR expr
    (67) expr -> . expr TIMES expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr DIV expr
    (70) expr -> . expr MOD expr
    (71) expr -> . expr AND expr
    (72) expr -> . PLUS expr
    (73) expr -> . MINUS expr
    (74) expr -> . factor
    (75) factor -> . ID
    (76) factor -> . INTEGER
    (77) factor -> . REAL
    (78) factor -> . STRING
    (79) factor -> . NOT factor

    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    ID              shift and go to state 70
    INTEGER         shift and go to state 71
    REAL            shift and go to state 72
    STRING          shift and go to state 73
    NOT             shift and go to state 74

    expr                           shift and go to state 123
    factor                         shift and go to state 69

state 93

    (60) expr -> expr GTHAN . expr
    (58) expr -> . expr EQUALS expr
    (59) expr -> . expr LTHAN expr
    (60) expr -> . expr GTHAN expr
    (61) expr -> . expr DIFFERENT expr
    (62) expr -> . expr GEQUALS expr
    (63) expr -> . expr LEQUALS expr
    (64) expr -> . expr PLUS expr
    (65) expr -> . expr MINUS expr
    (66) expr -> . expr OR expr
    (67) expr -> . expr TIMES expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr DIV expr
    (70) expr -> . expr MOD expr
    (71) expr -> . expr AND expr
    (72) expr -> . PLUS expr
    (73) expr -> . MINUS expr
    (74) expr -> . factor
    (75) factor -> . ID
    (76) factor -> . INTEGER
    (77) factor -> . REAL
    (78) factor -> . STRING
    (79) factor -> . NOT factor

    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    ID              shift and go to state 70
    INTEGER         shift and go to state 71
    REAL            shift and go to state 72
    STRING          shift and go to state 73
    NOT             shift and go to state 74

    expr                           shift and go to state 124
    factor                         shift and go to state 69

state 94

    (61) expr -> expr DIFFERENT . expr
    (58) expr -> . expr EQUALS expr
    (59) expr -> . expr LTHAN expr
    (60) expr -> . expr GTHAN expr
    (61) expr -> . expr DIFFERENT expr
    (62) expr -> . expr GEQUALS expr
    (63) expr -> . expr LEQUALS expr
    (64) expr -> . expr PLUS expr
    (65) expr -> . expr MINUS expr
    (66) expr -> . expr OR expr
    (67) expr -> . expr TIMES expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr DIV expr
    (70) expr -> . expr MOD expr
    (71) expr -> . expr AND expr
    (72) expr -> . PLUS expr
    (73) expr -> . MINUS expr
    (74) expr -> . factor
    (75) factor -> . ID
    (76) factor -> . INTEGER
    (77) factor -> . REAL
    (78) factor -> . STRING
    (79) factor -> . NOT factor

    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    ID              shift and go to state 70
    INTEGER         shift and go to state 71
    REAL            shift and go to state 72
    STRING          shift and go to state 73
    NOT             shift and go to state 74

    expr                           shift and go to state 125
    factor                         shift and go to state 69

state 95

    (62) expr -> expr GEQUALS . expr
    (58) expr -> . expr EQUALS expr
    (59) expr -> . expr LTHAN expr
    (60) expr -> . expr GTHAN expr
    (61) expr -> . expr DIFFERENT expr
    (62) expr -> . expr GEQUALS expr
    (63) expr -> . expr LEQUALS expr
    (64) expr -> . expr PLUS expr
    (65) expr -> . expr MINUS expr
    (66) expr -> . expr OR expr
    (67) expr -> . expr TIMES expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr DIV expr
    (70) expr -> . expr MOD expr
    (71) expr -> . expr AND expr
    (72) expr -> . PLUS expr
    (73) expr -> . MINUS expr
    (74) expr -> . factor
    (75) factor -> . ID
    (76) factor -> . INTEGER
    (77) factor -> . REAL
    (78) factor -> . STRING
    (79) factor -> . NOT factor

    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    ID              shift and go to state 70
    INTEGER         shift and go to state 71
    REAL            shift and go to state 72
    STRING          shift and go to state 73
    NOT             shift and go to state 74

    expr                           shift and go to state 126
    factor                         shift and go to state 69

state 96

    (63) expr -> expr LEQUALS . expr
    (58) expr -> . expr EQUALS expr
    (59) expr -> . expr LTHAN expr
    (60) expr -> . expr GTHAN expr
    (61) expr -> . expr DIFFERENT expr
    (62) expr -> . expr GEQUALS expr
    (63) expr -> . expr LEQUALS expr
    (64) expr -> . expr PLUS expr
    (65) expr -> . expr MINUS expr
    (66) expr -> . expr OR expr
    (67) expr -> . expr TIMES expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr DIV expr
    (70) expr -> . expr MOD expr
    (71) expr -> . expr AND expr
    (72) expr -> . PLUS expr
    (73) expr -> . MINUS expr
    (74) expr -> . factor
    (75) factor -> . ID
    (76) factor -> . INTEGER
    (77) factor -> . REAL
    (78) factor -> . STRING
    (79) factor -> . NOT factor

    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    ID              shift and go to state 70
    INTEGER         shift and go to state 71
    REAL            shift and go to state 72
    STRING          shift and go to state 73
    NOT             shift and go to state 74

    expr                           shift and go to state 127
    factor                         shift and go to state 69

state 97

    (64) expr -> expr PLUS . expr
    (58) expr -> . expr EQUALS expr
    (59) expr -> . expr LTHAN expr
    (60) expr -> . expr GTHAN expr
    (61) expr -> . expr DIFFERENT expr
    (62) expr -> . expr GEQUALS expr
    (63) expr -> . expr LEQUALS expr
    (64) expr -> . expr PLUS expr
    (65) expr -> . expr MINUS expr
    (66) expr -> . expr OR expr
    (67) expr -> . expr TIMES expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr DIV expr
    (70) expr -> . expr MOD expr
    (71) expr -> . expr AND expr
    (72) expr -> . PLUS expr
    (73) expr -> . MINUS expr
    (74) expr -> . factor
    (75) factor -> . ID
    (76) factor -> . INTEGER
    (77) factor -> . REAL
    (78) factor -> . STRING
    (79) factor -> . NOT factor

    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    ID              shift and go to state 70
    INTEGER         shift and go to state 71
    REAL            shift and go to state 72
    STRING          shift and go to state 73
    NOT             shift and go to state 74

    expr                           shift and go to state 128
    factor                         shift and go to state 69

state 98

    (65) expr -> expr MINUS . expr
    (58) expr -> . expr EQUALS expr
    (59) expr -> . expr LTHAN expr
    (60) expr -> . expr GTHAN expr
    (61) expr -> . expr DIFFERENT expr
    (62) expr -> . expr GEQUALS expr
    (63) expr -> . expr LEQUALS expr
    (64) expr -> . expr PLUS expr
    (65) expr -> . expr MINUS expr
    (66) expr -> . expr OR expr
    (67) expr -> . expr TIMES expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr DIV expr
    (70) expr -> . expr MOD expr
    (71) expr -> . expr AND expr
    (72) expr -> . PLUS expr
    (73) expr -> . MINUS expr
    (74) expr -> . factor
    (75) factor -> . ID
    (76) factor -> . INTEGER
    (77) factor -> . REAL
    (78) factor -> . STRING
    (79) factor -> . NOT factor

    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    ID              shift and go to state 70
    INTEGER         shift and go to state 71
    REAL            shift and go to state 72
    STRING          shift and go to state 73
    NOT             shift and go to state 74

    expr                           shift and go to state 129
    factor                         shift and go to state 69

state 99

    (66) expr -> expr OR . expr
    (58) expr -> . expr EQUALS expr
    (59) expr -> . expr LTHAN expr
    (60) expr -> . expr GTHAN expr
    (61) expr -> . expr DIFFERENT expr
    (62) expr -> . expr GEQUALS expr
    (63) expr -> . expr LEQUALS expr
    (64) expr -> . expr PLUS expr
    (65) expr -> . expr MINUS expr
    (66) expr -> . expr OR expr
    (67) expr -> . expr TIMES expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr DIV expr
    (70) expr -> . expr MOD expr
    (71) expr -> . expr AND expr
    (72) expr -> . PLUS expr
    (73) expr -> . MINUS expr
    (74) expr -> . factor
    (75) factor -> . ID
    (76) factor -> . INTEGER
    (77) factor -> . REAL
    (78) factor -> . STRING
    (79) factor -> . NOT factor

    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    ID              shift and go to state 70
    INTEGER         shift and go to state 71
    REAL            shift and go to state 72
    STRING          shift and go to state 73
    NOT             shift and go to state 74

    expr                           shift and go to state 130
    factor                         shift and go to state 69

state 100

    (67) expr -> expr TIMES . expr
    (58) expr -> . expr EQUALS expr
    (59) expr -> . expr LTHAN expr
    (60) expr -> . expr GTHAN expr
    (61) expr -> . expr DIFFERENT expr
    (62) expr -> . expr GEQUALS expr
    (63) expr -> . expr LEQUALS expr
    (64) expr -> . expr PLUS expr
    (65) expr -> . expr MINUS expr
    (66) expr -> . expr OR expr
    (67) expr -> . expr TIMES expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr DIV expr
    (70) expr -> . expr MOD expr
    (71) expr -> . expr AND expr
    (72) expr -> . PLUS expr
    (73) expr -> . MINUS expr
    (74) expr -> . factor
    (75) factor -> . ID
    (76) factor -> . INTEGER
    (77) factor -> . REAL
    (78) factor -> . STRING
    (79) factor -> . NOT factor

    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    ID              shift and go to state 70
    INTEGER         shift and go to state 71
    REAL            shift and go to state 72
    STRING          shift and go to state 73
    NOT             shift and go to state 74

    expr                           shift and go to state 131
    factor                         shift and go to state 69

state 101

    (68) expr -> expr DIVIDE . expr
    (58) expr -> . expr EQUALS expr
    (59) expr -> . expr LTHAN expr
    (60) expr -> . expr GTHAN expr
    (61) expr -> . expr DIFFERENT expr
    (62) expr -> . expr GEQUALS expr
    (63) expr -> . expr LEQUALS expr
    (64) expr -> . expr PLUS expr
    (65) expr -> . expr MINUS expr
    (66) expr -> . expr OR expr
    (67) expr -> . expr TIMES expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr DIV expr
    (70) expr -> . expr MOD expr
    (71) expr -> . expr AND expr
    (72) expr -> . PLUS expr
    (73) expr -> . MINUS expr
    (74) expr -> . factor
    (75) factor -> . ID
    (76) factor -> . INTEGER
    (77) factor -> . REAL
    (78) factor -> . STRING
    (79) factor -> . NOT factor

    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    ID              shift and go to state 70
    INTEGER         shift and go to state 71
    REAL            shift and go to state 72
    STRING          shift and go to state 73
    NOT             shift and go to state 74

    expr                           shift and go to state 132
    factor                         shift and go to state 69

state 102

    (69) expr -> expr DIV . expr
    (58) expr -> . expr EQUALS expr
    (59) expr -> . expr LTHAN expr
    (60) expr -> . expr GTHAN expr
    (61) expr -> . expr DIFFERENT expr
    (62) expr -> . expr GEQUALS expr
    (63) expr -> . expr LEQUALS expr
    (64) expr -> . expr PLUS expr
    (65) expr -> . expr MINUS expr
    (66) expr -> . expr OR expr
    (67) expr -> . expr TIMES expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr DIV expr
    (70) expr -> . expr MOD expr
    (71) expr -> . expr AND expr
    (72) expr -> . PLUS expr
    (73) expr -> . MINUS expr
    (74) expr -> . factor
    (75) factor -> . ID
    (76) factor -> . INTEGER
    (77) factor -> . REAL
    (78) factor -> . STRING
    (79) factor -> . NOT factor

    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    ID              shift and go to state 70
    INTEGER         shift and go to state 71
    REAL            shift and go to state 72
    STRING          shift and go to state 73
    NOT             shift and go to state 74

    expr                           shift and go to state 133
    factor                         shift and go to state 69

state 103

    (70) expr -> expr MOD . expr
    (58) expr -> . expr EQUALS expr
    (59) expr -> . expr LTHAN expr
    (60) expr -> . expr GTHAN expr
    (61) expr -> . expr DIFFERENT expr
    (62) expr -> . expr GEQUALS expr
    (63) expr -> . expr LEQUALS expr
    (64) expr -> . expr PLUS expr
    (65) expr -> . expr MINUS expr
    (66) expr -> . expr OR expr
    (67) expr -> . expr TIMES expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr DIV expr
    (70) expr -> . expr MOD expr
    (71) expr -> . expr AND expr
    (72) expr -> . PLUS expr
    (73) expr -> . MINUS expr
    (74) expr -> . factor
    (75) factor -> . ID
    (76) factor -> . INTEGER
    (77) factor -> . REAL
    (78) factor -> . STRING
    (79) factor -> . NOT factor

    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    ID              shift and go to state 70
    INTEGER         shift and go to state 71
    REAL            shift and go to state 72
    STRING          shift and go to state 73
    NOT             shift and go to state 74

    expr                           shift and go to state 134
    factor                         shift and go to state 69

state 104

    (71) expr -> expr AND . expr
    (58) expr -> . expr EQUALS expr
    (59) expr -> . expr LTHAN expr
    (60) expr -> . expr GTHAN expr
    (61) expr -> . expr DIFFERENT expr
    (62) expr -> . expr GEQUALS expr
    (63) expr -> . expr LEQUALS expr
    (64) expr -> . expr PLUS expr
    (65) expr -> . expr MINUS expr
    (66) expr -> . expr OR expr
    (67) expr -> . expr TIMES expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr DIV expr
    (70) expr -> . expr MOD expr
    (71) expr -> . expr AND expr
    (72) expr -> . PLUS expr
    (73) expr -> . MINUS expr
    (74) expr -> . factor
    (75) factor -> . ID
    (76) factor -> . INTEGER
    (77) factor -> . REAL
    (78) factor -> . STRING
    (79) factor -> . NOT factor

    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    ID              shift and go to state 70
    INTEGER         shift and go to state 71
    REAL            shift and go to state 72
    STRING          shift and go to state 73
    NOT             shift and go to state 74

    expr                           shift and go to state 135
    factor                         shift and go to state 69

state 105

    (72) expr -> PLUS expr .
    (58) expr -> expr . EQUALS expr
    (59) expr -> expr . LTHAN expr
    (60) expr -> expr . GTHAN expr
    (61) expr -> expr . DIFFERENT expr
    (62) expr -> expr . GEQUALS expr
    (63) expr -> expr . LEQUALS expr
    (64) expr -> expr . PLUS expr
    (65) expr -> expr . MINUS expr
    (66) expr -> expr . OR expr
    (67) expr -> expr . TIMES expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . DIV expr
    (70) expr -> expr . MOD expr
    (71) expr -> expr . AND expr

    COMMA           reduce using rule 72 (expr -> PLUS expr .)
    EQUALS          reduce using rule 72 (expr -> PLUS expr .)
    LTHAN           reduce using rule 72 (expr -> PLUS expr .)
    GTHAN           reduce using rule 72 (expr -> PLUS expr .)
    DIFFERENT       reduce using rule 72 (expr -> PLUS expr .)
    GEQUALS         reduce using rule 72 (expr -> PLUS expr .)
    LEQUALS         reduce using rule 72 (expr -> PLUS expr .)
    PLUS            reduce using rule 72 (expr -> PLUS expr .)
    MINUS           reduce using rule 72 (expr -> PLUS expr .)
    OR              reduce using rule 72 (expr -> PLUS expr .)
    TIMES           reduce using rule 72 (expr -> PLUS expr .)
    DIVIDE          reduce using rule 72 (expr -> PLUS expr .)
    DIV             reduce using rule 72 (expr -> PLUS expr .)
    MOD             reduce using rule 72 (expr -> PLUS expr .)
    AND             reduce using rule 72 (expr -> PLUS expr .)
    THEN            reduce using rule 72 (expr -> PLUS expr .)
    OF              reduce using rule 72 (expr -> PLUS expr .)
    DO              reduce using rule 72 (expr -> PLUS expr .)
    SEMICOLON       reduce using rule 72 (expr -> PLUS expr .)
    RPARENT         reduce using rule 72 (expr -> PLUS expr .)
    TO              reduce using rule 72 (expr -> PLUS expr .)

  ! EQUALS          [ shift and go to state 91 ]
  ! LTHAN           [ shift and go to state 92 ]
  ! GTHAN           [ shift and go to state 93 ]
  ! DIFFERENT       [ shift and go to state 94 ]
  ! GEQUALS         [ shift and go to state 95 ]
  ! LEQUALS         [ shift and go to state 96 ]
  ! PLUS            [ shift and go to state 97 ]
  ! MINUS           [ shift and go to state 98 ]
  ! OR              [ shift and go to state 99 ]
  ! TIMES           [ shift and go to state 100 ]
  ! DIVIDE          [ shift and go to state 101 ]
  ! DIV             [ shift and go to state 102 ]
  ! MOD             [ shift and go to state 103 ]
  ! AND             [ shift and go to state 104 ]


state 106

    (73) expr -> MINUS expr .
    (58) expr -> expr . EQUALS expr
    (59) expr -> expr . LTHAN expr
    (60) expr -> expr . GTHAN expr
    (61) expr -> expr . DIFFERENT expr
    (62) expr -> expr . GEQUALS expr
    (63) expr -> expr . LEQUALS expr
    (64) expr -> expr . PLUS expr
    (65) expr -> expr . MINUS expr
    (66) expr -> expr . OR expr
    (67) expr -> expr . TIMES expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . DIV expr
    (70) expr -> expr . MOD expr
    (71) expr -> expr . AND expr

    COMMA           reduce using rule 73 (expr -> MINUS expr .)
    EQUALS          reduce using rule 73 (expr -> MINUS expr .)
    LTHAN           reduce using rule 73 (expr -> MINUS expr .)
    GTHAN           reduce using rule 73 (expr -> MINUS expr .)
    DIFFERENT       reduce using rule 73 (expr -> MINUS expr .)
    GEQUALS         reduce using rule 73 (expr -> MINUS expr .)
    LEQUALS         reduce using rule 73 (expr -> MINUS expr .)
    PLUS            reduce using rule 73 (expr -> MINUS expr .)
    MINUS           reduce using rule 73 (expr -> MINUS expr .)
    OR              reduce using rule 73 (expr -> MINUS expr .)
    TIMES           reduce using rule 73 (expr -> MINUS expr .)
    DIVIDE          reduce using rule 73 (expr -> MINUS expr .)
    DIV             reduce using rule 73 (expr -> MINUS expr .)
    MOD             reduce using rule 73 (expr -> MINUS expr .)
    AND             reduce using rule 73 (expr -> MINUS expr .)
    THEN            reduce using rule 73 (expr -> MINUS expr .)
    OF              reduce using rule 73 (expr -> MINUS expr .)
    DO              reduce using rule 73 (expr -> MINUS expr .)
    SEMICOLON       reduce using rule 73 (expr -> MINUS expr .)
    RPARENT         reduce using rule 73 (expr -> MINUS expr .)
    TO              reduce using rule 73 (expr -> MINUS expr .)

  ! EQUALS          [ shift and go to state 91 ]
  ! LTHAN           [ shift and go to state 92 ]
  ! GTHAN           [ shift and go to state 93 ]
  ! DIFFERENT       [ shift and go to state 94 ]
  ! GEQUALS         [ shift and go to state 95 ]
  ! LEQUALS         [ shift and go to state 96 ]
  ! PLUS            [ shift and go to state 97 ]
  ! MINUS           [ shift and go to state 98 ]
  ! OR              [ shift and go to state 99 ]
  ! TIMES           [ shift and go to state 100 ]
  ! DIVIDE          [ shift and go to state 101 ]
  ! DIV             [ shift and go to state 102 ]
  ! MOD             [ shift and go to state 103 ]
  ! AND             [ shift and go to state 104 ]


state 107

    (79) factor -> NOT factor .

    COMMA           reduce using rule 79 (factor -> NOT factor .)
    EQUALS          reduce using rule 79 (factor -> NOT factor .)
    LTHAN           reduce using rule 79 (factor -> NOT factor .)
    GTHAN           reduce using rule 79 (factor -> NOT factor .)
    DIFFERENT       reduce using rule 79 (factor -> NOT factor .)
    GEQUALS         reduce using rule 79 (factor -> NOT factor .)
    LEQUALS         reduce using rule 79 (factor -> NOT factor .)
    PLUS            reduce using rule 79 (factor -> NOT factor .)
    MINUS           reduce using rule 79 (factor -> NOT factor .)
    OR              reduce using rule 79 (factor -> NOT factor .)
    TIMES           reduce using rule 79 (factor -> NOT factor .)
    DIVIDE          reduce using rule 79 (factor -> NOT factor .)
    DIV             reduce using rule 79 (factor -> NOT factor .)
    MOD             reduce using rule 79 (factor -> NOT factor .)
    AND             reduce using rule 79 (factor -> NOT factor .)
    THEN            reduce using rule 79 (factor -> NOT factor .)
    OF              reduce using rule 79 (factor -> NOT factor .)
    DO              reduce using rule 79 (factor -> NOT factor .)
    SEMICOLON       reduce using rule 79 (factor -> NOT factor .)
    RPARENT         reduce using rule 79 (factor -> NOT factor .)
    TO              reduce using rule 79 (factor -> NOT factor .)


state 108

    (43) assign_statement -> ID ASSIGNMENT expr . SEMICOLON
    (58) expr -> expr . EQUALS expr
    (59) expr -> expr . LTHAN expr
    (60) expr -> expr . GTHAN expr
    (61) expr -> expr . DIFFERENT expr
    (62) expr -> expr . GEQUALS expr
    (63) expr -> expr . LEQUALS expr
    (64) expr -> expr . PLUS expr
    (65) expr -> expr . MINUS expr
    (66) expr -> expr . OR expr
    (67) expr -> expr . TIMES expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . DIV expr
    (70) expr -> expr . MOD expr
    (71) expr -> expr . AND expr

    SEMICOLON       shift and go to state 136
    EQUALS          shift and go to state 91
    LTHAN           shift and go to state 92
    GTHAN           shift and go to state 93
    DIFFERENT       shift and go to state 94
    GEQUALS         shift and go to state 95
    LEQUALS         shift and go to state 96
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    OR              shift and go to state 99
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 101
    DIV             shift and go to state 102
    MOD             shift and go to state 103
    AND             shift and go to state 104


state 109

    (44) procedure_call_statement -> ID LPARENT expr_list . RPARENT SEMICOLON

    RPARENT         shift and go to state 137


state 110

    (47) case_statement -> CASE expr OF . cases END SEMICOLON
    (48) cases -> . case
    (49) cases -> . case cases
    (50) case -> . INTEGER TWOPOINTS statement
    (51) case -> . REAL TWOPOINTS statement
    (52) case -> . ID TWOPOINTS statement

    INTEGER         shift and go to state 140
    REAL            shift and go to state 141
    ID              shift and go to state 142

    cases                          shift and go to state 138
    case                           shift and go to state 139

state 111

    (53) while_statement -> WHILE expr DO . statement
    (33) statement -> . nstatement
    (34) statement -> . if2_statement
    (35) nstatement -> . assign_statement
    (36) nstatement -> . procedure_call_statement
    (37) nstatement -> . IF expr_list THEN nstatement ELSE nstatement
    (38) nstatement -> . case_statement
    (39) nstatement -> . while_statement
    (40) nstatement -> . repeat_statement
    (41) nstatement -> . for_statement
    (42) nstatement -> . compound_statement_semicolon
    (45) if2_statement -> . IF expr_list THEN statement
    (46) if2_statement -> . IF expr_list THEN nstatement ELSE if2_statement
    (43) assign_statement -> . ID ASSIGNMENT expr SEMICOLON
    (44) procedure_call_statement -> . ID LPARENT expr_list RPARENT SEMICOLON
    (47) case_statement -> . CASE expr OF cases END SEMICOLON
    (53) while_statement -> . WHILE expr DO statement
    (54) repeat_statement -> . REPEAT statement UNTIL expr SEMICOLON
    (55) for_statement -> . FOR ID ASSIGNMENT expr TO expr DO statement
    (29) compound_statement_semicolon -> . BEGIN statements END SEMICOLON
    (30) compound_statement_semicolon -> . BEGIN END SEMICOLON

    IF              shift and go to state 44
    ID              shift and go to state 50
    CASE            shift and go to state 51
    WHILE           shift and go to state 52
    REPEAT          shift and go to state 53
    FOR             shift and go to state 54
    BEGIN           shift and go to state 36

    statement                      shift and go to state 143
    nstatement                     shift and go to state 40
    if2_statement                  shift and go to state 41
    assign_statement               shift and go to state 42
    procedure_call_statement       shift and go to state 43
    case_statement                 shift and go to state 45
    while_statement                shift and go to state 46
    repeat_statement               shift and go to state 47
    for_statement                  shift and go to state 48
    compound_statement_semicolon   shift and go to state 49

state 112

    (54) repeat_statement -> REPEAT statement UNTIL . expr SEMICOLON
    (58) expr -> . expr EQUALS expr
    (59) expr -> . expr LTHAN expr
    (60) expr -> . expr GTHAN expr
    (61) expr -> . expr DIFFERENT expr
    (62) expr -> . expr GEQUALS expr
    (63) expr -> . expr LEQUALS expr
    (64) expr -> . expr PLUS expr
    (65) expr -> . expr MINUS expr
    (66) expr -> . expr OR expr
    (67) expr -> . expr TIMES expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr DIV expr
    (70) expr -> . expr MOD expr
    (71) expr -> . expr AND expr
    (72) expr -> . PLUS expr
    (73) expr -> . MINUS expr
    (74) expr -> . factor
    (75) factor -> . ID
    (76) factor -> . INTEGER
    (77) factor -> . REAL
    (78) factor -> . STRING
    (79) factor -> . NOT factor

    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    ID              shift and go to state 70
    INTEGER         shift and go to state 71
    REAL            shift and go to state 72
    STRING          shift and go to state 73
    NOT             shift and go to state 74

    expr                           shift and go to state 144
    factor                         shift and go to state 69

state 113

    (55) for_statement -> FOR ID ASSIGNMENT . expr TO expr DO statement
    (58) expr -> . expr EQUALS expr
    (59) expr -> . expr LTHAN expr
    (60) expr -> . expr GTHAN expr
    (61) expr -> . expr DIFFERENT expr
    (62) expr -> . expr GEQUALS expr
    (63) expr -> . expr LEQUALS expr
    (64) expr -> . expr PLUS expr
    (65) expr -> . expr MINUS expr
    (66) expr -> . expr OR expr
    (67) expr -> . expr TIMES expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr DIV expr
    (70) expr -> . expr MOD expr
    (71) expr -> . expr AND expr
    (72) expr -> . PLUS expr
    (73) expr -> . MINUS expr
    (74) expr -> . factor
    (75) factor -> . ID
    (76) factor -> . INTEGER
    (77) factor -> . REAL
    (78) factor -> . STRING
    (79) factor -> . NOT factor

    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    ID              shift and go to state 70
    INTEGER         shift and go to state 71
    REAL            shift and go to state 72
    STRING          shift and go to state 73
    NOT             shift and go to state 74

    expr                           shift and go to state 145
    factor                         shift and go to state 69

state 114

    (23) procedure_declaration -> PROCEDURE ID LPARENT param_section RPARENT . SEMICOLON

    SEMICOLON       shift and go to state 146


state 115

    (25) param_section -> identifier_list TWOPOINTS . types SEMICOLON param_section
    (12) types -> . INTEGER
    (13) types -> . REAL
    (14) types -> . STRING
    (15) types -> . BOOLEAN
    (16) types -> . CHAR
    (17) types -> . ID

    INTEGER         shift and go to state 31
    REAL            shift and go to state 32
    STRING          shift and go to state 33
    BOOLEAN         shift and go to state 34
    CHAR            shift and go to state 35
    ID              shift and go to state 29

    types                          shift and go to state 147

state 116

    (24) function_declaration -> FUNCTION ID LPARENT param_section RPARENT . TWOPOINTS types SEMICOLON

    TWOPOINTS       shift and go to state 148


state 117

    (10) var_declaration -> identifier_list TWOPOINTS types SEMICOLON var_declaration .

    PROCEDURE       reduce using rule 10 (var_declaration -> identifier_list TWOPOINTS types SEMICOLON var_declaration .)
    FUNCTION        reduce using rule 10 (var_declaration -> identifier_list TWOPOINTS types SEMICOLON var_declaration .)
    BEGIN           reduce using rule 10 (var_declaration -> identifier_list TWOPOINTS types SEMICOLON var_declaration .)


state 118

    (29) compound_statement_semicolon -> BEGIN statements END SEMICOLON .

    IF              reduce using rule 29 (compound_statement_semicolon -> BEGIN statements END SEMICOLON .)
    ID              reduce using rule 29 (compound_statement_semicolon -> BEGIN statements END SEMICOLON .)
    CASE            reduce using rule 29 (compound_statement_semicolon -> BEGIN statements END SEMICOLON .)
    WHILE           reduce using rule 29 (compound_statement_semicolon -> BEGIN statements END SEMICOLON .)
    REPEAT          reduce using rule 29 (compound_statement_semicolon -> BEGIN statements END SEMICOLON .)
    FOR             reduce using rule 29 (compound_statement_semicolon -> BEGIN statements END SEMICOLON .)
    BEGIN           reduce using rule 29 (compound_statement_semicolon -> BEGIN statements END SEMICOLON .)
    END             reduce using rule 29 (compound_statement_semicolon -> BEGIN statements END SEMICOLON .)
    UNTIL           reduce using rule 29 (compound_statement_semicolon -> BEGIN statements END SEMICOLON .)
    ELSE            reduce using rule 29 (compound_statement_semicolon -> BEGIN statements END SEMICOLON .)
    INTEGER         reduce using rule 29 (compound_statement_semicolon -> BEGIN statements END SEMICOLON .)
    REAL            reduce using rule 29 (compound_statement_semicolon -> BEGIN statements END SEMICOLON .)


state 119

    (37) nstatement -> IF expr_list THEN nstatement . ELSE nstatement
    (46) if2_statement -> IF expr_list THEN nstatement . ELSE if2_statement
    (33) statement -> nstatement .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 149
    IF              reduce using rule 33 (statement -> nstatement .)
    ID              reduce using rule 33 (statement -> nstatement .)
    CASE            reduce using rule 33 (statement -> nstatement .)
    WHILE           reduce using rule 33 (statement -> nstatement .)
    REPEAT          reduce using rule 33 (statement -> nstatement .)
    FOR             reduce using rule 33 (statement -> nstatement .)
    BEGIN           reduce using rule 33 (statement -> nstatement .)
    END             reduce using rule 33 (statement -> nstatement .)
    UNTIL           reduce using rule 33 (statement -> nstatement .)
    INTEGER         reduce using rule 33 (statement -> nstatement .)
    REAL            reduce using rule 33 (statement -> nstatement .)

  ! ELSE            [ reduce using rule 33 (statement -> nstatement .) ]


state 120

    (45) if2_statement -> IF expr_list THEN statement .

    IF              reduce using rule 45 (if2_statement -> IF expr_list THEN statement .)
    ID              reduce using rule 45 (if2_statement -> IF expr_list THEN statement .)
    CASE            reduce using rule 45 (if2_statement -> IF expr_list THEN statement .)
    WHILE           reduce using rule 45 (if2_statement -> IF expr_list THEN statement .)
    REPEAT          reduce using rule 45 (if2_statement -> IF expr_list THEN statement .)
    FOR             reduce using rule 45 (if2_statement -> IF expr_list THEN statement .)
    BEGIN           reduce using rule 45 (if2_statement -> IF expr_list THEN statement .)
    END             reduce using rule 45 (if2_statement -> IF expr_list THEN statement .)
    UNTIL           reduce using rule 45 (if2_statement -> IF expr_list THEN statement .)
    ELSE            reduce using rule 45 (if2_statement -> IF expr_list THEN statement .)
    INTEGER         reduce using rule 45 (if2_statement -> IF expr_list THEN statement .)
    REAL            reduce using rule 45 (if2_statement -> IF expr_list THEN statement .)


state 121

    (57) expr_list -> expr COMMA expr_list .

    THEN            reduce using rule 57 (expr_list -> expr COMMA expr_list .)
    RPARENT         reduce using rule 57 (expr_list -> expr COMMA expr_list .)


state 122

    (58) expr -> expr EQUALS expr .
    (58) expr -> expr . EQUALS expr
    (59) expr -> expr . LTHAN expr
    (60) expr -> expr . GTHAN expr
    (61) expr -> expr . DIFFERENT expr
    (62) expr -> expr . GEQUALS expr
    (63) expr -> expr . LEQUALS expr
    (64) expr -> expr . PLUS expr
    (65) expr -> expr . MINUS expr
    (66) expr -> expr . OR expr
    (67) expr -> expr . TIMES expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . DIV expr
    (70) expr -> expr . MOD expr
    (71) expr -> expr . AND expr

    COMMA           reduce using rule 58 (expr -> expr EQUALS expr .)
    EQUALS          reduce using rule 58 (expr -> expr EQUALS expr .)
    LTHAN           reduce using rule 58 (expr -> expr EQUALS expr .)
    GTHAN           reduce using rule 58 (expr -> expr EQUALS expr .)
    DIFFERENT       reduce using rule 58 (expr -> expr EQUALS expr .)
    GEQUALS         reduce using rule 58 (expr -> expr EQUALS expr .)
    LEQUALS         reduce using rule 58 (expr -> expr EQUALS expr .)
    THEN            reduce using rule 58 (expr -> expr EQUALS expr .)
    OF              reduce using rule 58 (expr -> expr EQUALS expr .)
    DO              reduce using rule 58 (expr -> expr EQUALS expr .)
    SEMICOLON       reduce using rule 58 (expr -> expr EQUALS expr .)
    RPARENT         reduce using rule 58 (expr -> expr EQUALS expr .)
    TO              reduce using rule 58 (expr -> expr EQUALS expr .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    OR              shift and go to state 99
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 101
    DIV             shift and go to state 102
    MOD             shift and go to state 103
    AND             shift and go to state 104

  ! PLUS            [ reduce using rule 58 (expr -> expr EQUALS expr .) ]
  ! MINUS           [ reduce using rule 58 (expr -> expr EQUALS expr .) ]
  ! OR              [ reduce using rule 58 (expr -> expr EQUALS expr .) ]
  ! TIMES           [ reduce using rule 58 (expr -> expr EQUALS expr .) ]
  ! DIVIDE          [ reduce using rule 58 (expr -> expr EQUALS expr .) ]
  ! DIV             [ reduce using rule 58 (expr -> expr EQUALS expr .) ]
  ! MOD             [ reduce using rule 58 (expr -> expr EQUALS expr .) ]
  ! AND             [ reduce using rule 58 (expr -> expr EQUALS expr .) ]
  ! EQUALS          [ shift and go to state 91 ]
  ! LTHAN           [ shift and go to state 92 ]
  ! GTHAN           [ shift and go to state 93 ]
  ! DIFFERENT       [ shift and go to state 94 ]
  ! GEQUALS         [ shift and go to state 95 ]
  ! LEQUALS         [ shift and go to state 96 ]


state 123

    (59) expr -> expr LTHAN expr .
    (58) expr -> expr . EQUALS expr
    (59) expr -> expr . LTHAN expr
    (60) expr -> expr . GTHAN expr
    (61) expr -> expr . DIFFERENT expr
    (62) expr -> expr . GEQUALS expr
    (63) expr -> expr . LEQUALS expr
    (64) expr -> expr . PLUS expr
    (65) expr -> expr . MINUS expr
    (66) expr -> expr . OR expr
    (67) expr -> expr . TIMES expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . DIV expr
    (70) expr -> expr . MOD expr
    (71) expr -> expr . AND expr

    COMMA           reduce using rule 59 (expr -> expr LTHAN expr .)
    EQUALS          reduce using rule 59 (expr -> expr LTHAN expr .)
    LTHAN           reduce using rule 59 (expr -> expr LTHAN expr .)
    GTHAN           reduce using rule 59 (expr -> expr LTHAN expr .)
    DIFFERENT       reduce using rule 59 (expr -> expr LTHAN expr .)
    GEQUALS         reduce using rule 59 (expr -> expr LTHAN expr .)
    LEQUALS         reduce using rule 59 (expr -> expr LTHAN expr .)
    THEN            reduce using rule 59 (expr -> expr LTHAN expr .)
    OF              reduce using rule 59 (expr -> expr LTHAN expr .)
    DO              reduce using rule 59 (expr -> expr LTHAN expr .)
    SEMICOLON       reduce using rule 59 (expr -> expr LTHAN expr .)
    RPARENT         reduce using rule 59 (expr -> expr LTHAN expr .)
    TO              reduce using rule 59 (expr -> expr LTHAN expr .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    OR              shift and go to state 99
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 101
    DIV             shift and go to state 102
    MOD             shift and go to state 103
    AND             shift and go to state 104

  ! PLUS            [ reduce using rule 59 (expr -> expr LTHAN expr .) ]
  ! MINUS           [ reduce using rule 59 (expr -> expr LTHAN expr .) ]
  ! OR              [ reduce using rule 59 (expr -> expr LTHAN expr .) ]
  ! TIMES           [ reduce using rule 59 (expr -> expr LTHAN expr .) ]
  ! DIVIDE          [ reduce using rule 59 (expr -> expr LTHAN expr .) ]
  ! DIV             [ reduce using rule 59 (expr -> expr LTHAN expr .) ]
  ! MOD             [ reduce using rule 59 (expr -> expr LTHAN expr .) ]
  ! AND             [ reduce using rule 59 (expr -> expr LTHAN expr .) ]
  ! EQUALS          [ shift and go to state 91 ]
  ! LTHAN           [ shift and go to state 92 ]
  ! GTHAN           [ shift and go to state 93 ]
  ! DIFFERENT       [ shift and go to state 94 ]
  ! GEQUALS         [ shift and go to state 95 ]
  ! LEQUALS         [ shift and go to state 96 ]


state 124

    (60) expr -> expr GTHAN expr .
    (58) expr -> expr . EQUALS expr
    (59) expr -> expr . LTHAN expr
    (60) expr -> expr . GTHAN expr
    (61) expr -> expr . DIFFERENT expr
    (62) expr -> expr . GEQUALS expr
    (63) expr -> expr . LEQUALS expr
    (64) expr -> expr . PLUS expr
    (65) expr -> expr . MINUS expr
    (66) expr -> expr . OR expr
    (67) expr -> expr . TIMES expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . DIV expr
    (70) expr -> expr . MOD expr
    (71) expr -> expr . AND expr

    COMMA           reduce using rule 60 (expr -> expr GTHAN expr .)
    EQUALS          reduce using rule 60 (expr -> expr GTHAN expr .)
    LTHAN           reduce using rule 60 (expr -> expr GTHAN expr .)
    GTHAN           reduce using rule 60 (expr -> expr GTHAN expr .)
    DIFFERENT       reduce using rule 60 (expr -> expr GTHAN expr .)
    GEQUALS         reduce using rule 60 (expr -> expr GTHAN expr .)
    LEQUALS         reduce using rule 60 (expr -> expr GTHAN expr .)
    THEN            reduce using rule 60 (expr -> expr GTHAN expr .)
    OF              reduce using rule 60 (expr -> expr GTHAN expr .)
    DO              reduce using rule 60 (expr -> expr GTHAN expr .)
    SEMICOLON       reduce using rule 60 (expr -> expr GTHAN expr .)
    RPARENT         reduce using rule 60 (expr -> expr GTHAN expr .)
    TO              reduce using rule 60 (expr -> expr GTHAN expr .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    OR              shift and go to state 99
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 101
    DIV             shift and go to state 102
    MOD             shift and go to state 103
    AND             shift and go to state 104

  ! PLUS            [ reduce using rule 60 (expr -> expr GTHAN expr .) ]
  ! MINUS           [ reduce using rule 60 (expr -> expr GTHAN expr .) ]
  ! OR              [ reduce using rule 60 (expr -> expr GTHAN expr .) ]
  ! TIMES           [ reduce using rule 60 (expr -> expr GTHAN expr .) ]
  ! DIVIDE          [ reduce using rule 60 (expr -> expr GTHAN expr .) ]
  ! DIV             [ reduce using rule 60 (expr -> expr GTHAN expr .) ]
  ! MOD             [ reduce using rule 60 (expr -> expr GTHAN expr .) ]
  ! AND             [ reduce using rule 60 (expr -> expr GTHAN expr .) ]
  ! EQUALS          [ shift and go to state 91 ]
  ! LTHAN           [ shift and go to state 92 ]
  ! GTHAN           [ shift and go to state 93 ]
  ! DIFFERENT       [ shift and go to state 94 ]
  ! GEQUALS         [ shift and go to state 95 ]
  ! LEQUALS         [ shift and go to state 96 ]


state 125

    (61) expr -> expr DIFFERENT expr .
    (58) expr -> expr . EQUALS expr
    (59) expr -> expr . LTHAN expr
    (60) expr -> expr . GTHAN expr
    (61) expr -> expr . DIFFERENT expr
    (62) expr -> expr . GEQUALS expr
    (63) expr -> expr . LEQUALS expr
    (64) expr -> expr . PLUS expr
    (65) expr -> expr . MINUS expr
    (66) expr -> expr . OR expr
    (67) expr -> expr . TIMES expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . DIV expr
    (70) expr -> expr . MOD expr
    (71) expr -> expr . AND expr

    COMMA           reduce using rule 61 (expr -> expr DIFFERENT expr .)
    EQUALS          reduce using rule 61 (expr -> expr DIFFERENT expr .)
    LTHAN           reduce using rule 61 (expr -> expr DIFFERENT expr .)
    GTHAN           reduce using rule 61 (expr -> expr DIFFERENT expr .)
    DIFFERENT       reduce using rule 61 (expr -> expr DIFFERENT expr .)
    GEQUALS         reduce using rule 61 (expr -> expr DIFFERENT expr .)
    LEQUALS         reduce using rule 61 (expr -> expr DIFFERENT expr .)
    THEN            reduce using rule 61 (expr -> expr DIFFERENT expr .)
    OF              reduce using rule 61 (expr -> expr DIFFERENT expr .)
    DO              reduce using rule 61 (expr -> expr DIFFERENT expr .)
    SEMICOLON       reduce using rule 61 (expr -> expr DIFFERENT expr .)
    RPARENT         reduce using rule 61 (expr -> expr DIFFERENT expr .)
    TO              reduce using rule 61 (expr -> expr DIFFERENT expr .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    OR              shift and go to state 99
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 101
    DIV             shift and go to state 102
    MOD             shift and go to state 103
    AND             shift and go to state 104

  ! PLUS            [ reduce using rule 61 (expr -> expr DIFFERENT expr .) ]
  ! MINUS           [ reduce using rule 61 (expr -> expr DIFFERENT expr .) ]
  ! OR              [ reduce using rule 61 (expr -> expr DIFFERENT expr .) ]
  ! TIMES           [ reduce using rule 61 (expr -> expr DIFFERENT expr .) ]
  ! DIVIDE          [ reduce using rule 61 (expr -> expr DIFFERENT expr .) ]
  ! DIV             [ reduce using rule 61 (expr -> expr DIFFERENT expr .) ]
  ! MOD             [ reduce using rule 61 (expr -> expr DIFFERENT expr .) ]
  ! AND             [ reduce using rule 61 (expr -> expr DIFFERENT expr .) ]
  ! EQUALS          [ shift and go to state 91 ]
  ! LTHAN           [ shift and go to state 92 ]
  ! GTHAN           [ shift and go to state 93 ]
  ! DIFFERENT       [ shift and go to state 94 ]
  ! GEQUALS         [ shift and go to state 95 ]
  ! LEQUALS         [ shift and go to state 96 ]


state 126

    (62) expr -> expr GEQUALS expr .
    (58) expr -> expr . EQUALS expr
    (59) expr -> expr . LTHAN expr
    (60) expr -> expr . GTHAN expr
    (61) expr -> expr . DIFFERENT expr
    (62) expr -> expr . GEQUALS expr
    (63) expr -> expr . LEQUALS expr
    (64) expr -> expr . PLUS expr
    (65) expr -> expr . MINUS expr
    (66) expr -> expr . OR expr
    (67) expr -> expr . TIMES expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . DIV expr
    (70) expr -> expr . MOD expr
    (71) expr -> expr . AND expr

    COMMA           reduce using rule 62 (expr -> expr GEQUALS expr .)
    EQUALS          reduce using rule 62 (expr -> expr GEQUALS expr .)
    LTHAN           reduce using rule 62 (expr -> expr GEQUALS expr .)
    GTHAN           reduce using rule 62 (expr -> expr GEQUALS expr .)
    DIFFERENT       reduce using rule 62 (expr -> expr GEQUALS expr .)
    GEQUALS         reduce using rule 62 (expr -> expr GEQUALS expr .)
    LEQUALS         reduce using rule 62 (expr -> expr GEQUALS expr .)
    THEN            reduce using rule 62 (expr -> expr GEQUALS expr .)
    OF              reduce using rule 62 (expr -> expr GEQUALS expr .)
    DO              reduce using rule 62 (expr -> expr GEQUALS expr .)
    SEMICOLON       reduce using rule 62 (expr -> expr GEQUALS expr .)
    RPARENT         reduce using rule 62 (expr -> expr GEQUALS expr .)
    TO              reduce using rule 62 (expr -> expr GEQUALS expr .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    OR              shift and go to state 99
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 101
    DIV             shift and go to state 102
    MOD             shift and go to state 103
    AND             shift and go to state 104

  ! PLUS            [ reduce using rule 62 (expr -> expr GEQUALS expr .) ]
  ! MINUS           [ reduce using rule 62 (expr -> expr GEQUALS expr .) ]
  ! OR              [ reduce using rule 62 (expr -> expr GEQUALS expr .) ]
  ! TIMES           [ reduce using rule 62 (expr -> expr GEQUALS expr .) ]
  ! DIVIDE          [ reduce using rule 62 (expr -> expr GEQUALS expr .) ]
  ! DIV             [ reduce using rule 62 (expr -> expr GEQUALS expr .) ]
  ! MOD             [ reduce using rule 62 (expr -> expr GEQUALS expr .) ]
  ! AND             [ reduce using rule 62 (expr -> expr GEQUALS expr .) ]
  ! EQUALS          [ shift and go to state 91 ]
  ! LTHAN           [ shift and go to state 92 ]
  ! GTHAN           [ shift and go to state 93 ]
  ! DIFFERENT       [ shift and go to state 94 ]
  ! GEQUALS         [ shift and go to state 95 ]
  ! LEQUALS         [ shift and go to state 96 ]


state 127

    (63) expr -> expr LEQUALS expr .
    (58) expr -> expr . EQUALS expr
    (59) expr -> expr . LTHAN expr
    (60) expr -> expr . GTHAN expr
    (61) expr -> expr . DIFFERENT expr
    (62) expr -> expr . GEQUALS expr
    (63) expr -> expr . LEQUALS expr
    (64) expr -> expr . PLUS expr
    (65) expr -> expr . MINUS expr
    (66) expr -> expr . OR expr
    (67) expr -> expr . TIMES expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . DIV expr
    (70) expr -> expr . MOD expr
    (71) expr -> expr . AND expr

    COMMA           reduce using rule 63 (expr -> expr LEQUALS expr .)
    EQUALS          reduce using rule 63 (expr -> expr LEQUALS expr .)
    LTHAN           reduce using rule 63 (expr -> expr LEQUALS expr .)
    GTHAN           reduce using rule 63 (expr -> expr LEQUALS expr .)
    DIFFERENT       reduce using rule 63 (expr -> expr LEQUALS expr .)
    GEQUALS         reduce using rule 63 (expr -> expr LEQUALS expr .)
    LEQUALS         reduce using rule 63 (expr -> expr LEQUALS expr .)
    THEN            reduce using rule 63 (expr -> expr LEQUALS expr .)
    OF              reduce using rule 63 (expr -> expr LEQUALS expr .)
    DO              reduce using rule 63 (expr -> expr LEQUALS expr .)
    SEMICOLON       reduce using rule 63 (expr -> expr LEQUALS expr .)
    RPARENT         reduce using rule 63 (expr -> expr LEQUALS expr .)
    TO              reduce using rule 63 (expr -> expr LEQUALS expr .)
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    OR              shift and go to state 99
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 101
    DIV             shift and go to state 102
    MOD             shift and go to state 103
    AND             shift and go to state 104

  ! PLUS            [ reduce using rule 63 (expr -> expr LEQUALS expr .) ]
  ! MINUS           [ reduce using rule 63 (expr -> expr LEQUALS expr .) ]
  ! OR              [ reduce using rule 63 (expr -> expr LEQUALS expr .) ]
  ! TIMES           [ reduce using rule 63 (expr -> expr LEQUALS expr .) ]
  ! DIVIDE          [ reduce using rule 63 (expr -> expr LEQUALS expr .) ]
  ! DIV             [ reduce using rule 63 (expr -> expr LEQUALS expr .) ]
  ! MOD             [ reduce using rule 63 (expr -> expr LEQUALS expr .) ]
  ! AND             [ reduce using rule 63 (expr -> expr LEQUALS expr .) ]
  ! EQUALS          [ shift and go to state 91 ]
  ! LTHAN           [ shift and go to state 92 ]
  ! GTHAN           [ shift and go to state 93 ]
  ! DIFFERENT       [ shift and go to state 94 ]
  ! GEQUALS         [ shift and go to state 95 ]
  ! LEQUALS         [ shift and go to state 96 ]


state 128

    (64) expr -> expr PLUS expr .
    (58) expr -> expr . EQUALS expr
    (59) expr -> expr . LTHAN expr
    (60) expr -> expr . GTHAN expr
    (61) expr -> expr . DIFFERENT expr
    (62) expr -> expr . GEQUALS expr
    (63) expr -> expr . LEQUALS expr
    (64) expr -> expr . PLUS expr
    (65) expr -> expr . MINUS expr
    (66) expr -> expr . OR expr
    (67) expr -> expr . TIMES expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . DIV expr
    (70) expr -> expr . MOD expr
    (71) expr -> expr . AND expr

    COMMA           reduce using rule 64 (expr -> expr PLUS expr .)
    EQUALS          reduce using rule 64 (expr -> expr PLUS expr .)
    LTHAN           reduce using rule 64 (expr -> expr PLUS expr .)
    GTHAN           reduce using rule 64 (expr -> expr PLUS expr .)
    DIFFERENT       reduce using rule 64 (expr -> expr PLUS expr .)
    GEQUALS         reduce using rule 64 (expr -> expr PLUS expr .)
    LEQUALS         reduce using rule 64 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 64 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 64 (expr -> expr PLUS expr .)
    OR              reduce using rule 64 (expr -> expr PLUS expr .)
    THEN            reduce using rule 64 (expr -> expr PLUS expr .)
    OF              reduce using rule 64 (expr -> expr PLUS expr .)
    DO              reduce using rule 64 (expr -> expr PLUS expr .)
    SEMICOLON       reduce using rule 64 (expr -> expr PLUS expr .)
    RPARENT         reduce using rule 64 (expr -> expr PLUS expr .)
    TO              reduce using rule 64 (expr -> expr PLUS expr .)
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 101
    DIV             shift and go to state 102
    MOD             shift and go to state 103
    AND             shift and go to state 104

  ! TIMES           [ reduce using rule 64 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 64 (expr -> expr PLUS expr .) ]
  ! DIV             [ reduce using rule 64 (expr -> expr PLUS expr .) ]
  ! MOD             [ reduce using rule 64 (expr -> expr PLUS expr .) ]
  ! AND             [ reduce using rule 64 (expr -> expr PLUS expr .) ]
  ! EQUALS          [ shift and go to state 91 ]
  ! LTHAN           [ shift and go to state 92 ]
  ! GTHAN           [ shift and go to state 93 ]
  ! DIFFERENT       [ shift and go to state 94 ]
  ! GEQUALS         [ shift and go to state 95 ]
  ! LEQUALS         [ shift and go to state 96 ]
  ! PLUS            [ shift and go to state 97 ]
  ! MINUS           [ shift and go to state 98 ]
  ! OR              [ shift and go to state 99 ]


state 129

    (65) expr -> expr MINUS expr .
    (58) expr -> expr . EQUALS expr
    (59) expr -> expr . LTHAN expr
    (60) expr -> expr . GTHAN expr
    (61) expr -> expr . DIFFERENT expr
    (62) expr -> expr . GEQUALS expr
    (63) expr -> expr . LEQUALS expr
    (64) expr -> expr . PLUS expr
    (65) expr -> expr . MINUS expr
    (66) expr -> expr . OR expr
    (67) expr -> expr . TIMES expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . DIV expr
    (70) expr -> expr . MOD expr
    (71) expr -> expr . AND expr

    COMMA           reduce using rule 65 (expr -> expr MINUS expr .)
    EQUALS          reduce using rule 65 (expr -> expr MINUS expr .)
    LTHAN           reduce using rule 65 (expr -> expr MINUS expr .)
    GTHAN           reduce using rule 65 (expr -> expr MINUS expr .)
    DIFFERENT       reduce using rule 65 (expr -> expr MINUS expr .)
    GEQUALS         reduce using rule 65 (expr -> expr MINUS expr .)
    LEQUALS         reduce using rule 65 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 65 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 65 (expr -> expr MINUS expr .)
    OR              reduce using rule 65 (expr -> expr MINUS expr .)
    THEN            reduce using rule 65 (expr -> expr MINUS expr .)
    OF              reduce using rule 65 (expr -> expr MINUS expr .)
    DO              reduce using rule 65 (expr -> expr MINUS expr .)
    SEMICOLON       reduce using rule 65 (expr -> expr MINUS expr .)
    RPARENT         reduce using rule 65 (expr -> expr MINUS expr .)
    TO              reduce using rule 65 (expr -> expr MINUS expr .)
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 101
    DIV             shift and go to state 102
    MOD             shift and go to state 103
    AND             shift and go to state 104

  ! TIMES           [ reduce using rule 65 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 65 (expr -> expr MINUS expr .) ]
  ! DIV             [ reduce using rule 65 (expr -> expr MINUS expr .) ]
  ! MOD             [ reduce using rule 65 (expr -> expr MINUS expr .) ]
  ! AND             [ reduce using rule 65 (expr -> expr MINUS expr .) ]
  ! EQUALS          [ shift and go to state 91 ]
  ! LTHAN           [ shift and go to state 92 ]
  ! GTHAN           [ shift and go to state 93 ]
  ! DIFFERENT       [ shift and go to state 94 ]
  ! GEQUALS         [ shift and go to state 95 ]
  ! LEQUALS         [ shift and go to state 96 ]
  ! PLUS            [ shift and go to state 97 ]
  ! MINUS           [ shift and go to state 98 ]
  ! OR              [ shift and go to state 99 ]


state 130

    (66) expr -> expr OR expr .
    (58) expr -> expr . EQUALS expr
    (59) expr -> expr . LTHAN expr
    (60) expr -> expr . GTHAN expr
    (61) expr -> expr . DIFFERENT expr
    (62) expr -> expr . GEQUALS expr
    (63) expr -> expr . LEQUALS expr
    (64) expr -> expr . PLUS expr
    (65) expr -> expr . MINUS expr
    (66) expr -> expr . OR expr
    (67) expr -> expr . TIMES expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . DIV expr
    (70) expr -> expr . MOD expr
    (71) expr -> expr . AND expr

    COMMA           reduce using rule 66 (expr -> expr OR expr .)
    EQUALS          reduce using rule 66 (expr -> expr OR expr .)
    LTHAN           reduce using rule 66 (expr -> expr OR expr .)
    GTHAN           reduce using rule 66 (expr -> expr OR expr .)
    DIFFERENT       reduce using rule 66 (expr -> expr OR expr .)
    GEQUALS         reduce using rule 66 (expr -> expr OR expr .)
    LEQUALS         reduce using rule 66 (expr -> expr OR expr .)
    PLUS            reduce using rule 66 (expr -> expr OR expr .)
    MINUS           reduce using rule 66 (expr -> expr OR expr .)
    OR              reduce using rule 66 (expr -> expr OR expr .)
    THEN            reduce using rule 66 (expr -> expr OR expr .)
    OF              reduce using rule 66 (expr -> expr OR expr .)
    DO              reduce using rule 66 (expr -> expr OR expr .)
    SEMICOLON       reduce using rule 66 (expr -> expr OR expr .)
    RPARENT         reduce using rule 66 (expr -> expr OR expr .)
    TO              reduce using rule 66 (expr -> expr OR expr .)
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 101
    DIV             shift and go to state 102
    MOD             shift and go to state 103
    AND             shift and go to state 104

  ! TIMES           [ reduce using rule 66 (expr -> expr OR expr .) ]
  ! DIVIDE          [ reduce using rule 66 (expr -> expr OR expr .) ]
  ! DIV             [ reduce using rule 66 (expr -> expr OR expr .) ]
  ! MOD             [ reduce using rule 66 (expr -> expr OR expr .) ]
  ! AND             [ reduce using rule 66 (expr -> expr OR expr .) ]
  ! EQUALS          [ shift and go to state 91 ]
  ! LTHAN           [ shift and go to state 92 ]
  ! GTHAN           [ shift and go to state 93 ]
  ! DIFFERENT       [ shift and go to state 94 ]
  ! GEQUALS         [ shift and go to state 95 ]
  ! LEQUALS         [ shift and go to state 96 ]
  ! PLUS            [ shift and go to state 97 ]
  ! MINUS           [ shift and go to state 98 ]
  ! OR              [ shift and go to state 99 ]


state 131

    (67) expr -> expr TIMES expr .
    (58) expr -> expr . EQUALS expr
    (59) expr -> expr . LTHAN expr
    (60) expr -> expr . GTHAN expr
    (61) expr -> expr . DIFFERENT expr
    (62) expr -> expr . GEQUALS expr
    (63) expr -> expr . LEQUALS expr
    (64) expr -> expr . PLUS expr
    (65) expr -> expr . MINUS expr
    (66) expr -> expr . OR expr
    (67) expr -> expr . TIMES expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . DIV expr
    (70) expr -> expr . MOD expr
    (71) expr -> expr . AND expr

    COMMA           reduce using rule 67 (expr -> expr TIMES expr .)
    EQUALS          reduce using rule 67 (expr -> expr TIMES expr .)
    LTHAN           reduce using rule 67 (expr -> expr TIMES expr .)
    GTHAN           reduce using rule 67 (expr -> expr TIMES expr .)
    DIFFERENT       reduce using rule 67 (expr -> expr TIMES expr .)
    GEQUALS         reduce using rule 67 (expr -> expr TIMES expr .)
    LEQUALS         reduce using rule 67 (expr -> expr TIMES expr .)
    PLUS            reduce using rule 67 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 67 (expr -> expr TIMES expr .)
    OR              reduce using rule 67 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 67 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 67 (expr -> expr TIMES expr .)
    DIV             reduce using rule 67 (expr -> expr TIMES expr .)
    MOD             reduce using rule 67 (expr -> expr TIMES expr .)
    AND             reduce using rule 67 (expr -> expr TIMES expr .)
    THEN            reduce using rule 67 (expr -> expr TIMES expr .)
    OF              reduce using rule 67 (expr -> expr TIMES expr .)
    DO              reduce using rule 67 (expr -> expr TIMES expr .)
    SEMICOLON       reduce using rule 67 (expr -> expr TIMES expr .)
    RPARENT         reduce using rule 67 (expr -> expr TIMES expr .)
    TO              reduce using rule 67 (expr -> expr TIMES expr .)

  ! EQUALS          [ shift and go to state 91 ]
  ! LTHAN           [ shift and go to state 92 ]
  ! GTHAN           [ shift and go to state 93 ]
  ! DIFFERENT       [ shift and go to state 94 ]
  ! GEQUALS         [ shift and go to state 95 ]
  ! LEQUALS         [ shift and go to state 96 ]
  ! PLUS            [ shift and go to state 97 ]
  ! MINUS           [ shift and go to state 98 ]
  ! OR              [ shift and go to state 99 ]
  ! TIMES           [ shift and go to state 100 ]
  ! DIVIDE          [ shift and go to state 101 ]
  ! DIV             [ shift and go to state 102 ]
  ! MOD             [ shift and go to state 103 ]
  ! AND             [ shift and go to state 104 ]


state 132

    (68) expr -> expr DIVIDE expr .
    (58) expr -> expr . EQUALS expr
    (59) expr -> expr . LTHAN expr
    (60) expr -> expr . GTHAN expr
    (61) expr -> expr . DIFFERENT expr
    (62) expr -> expr . GEQUALS expr
    (63) expr -> expr . LEQUALS expr
    (64) expr -> expr . PLUS expr
    (65) expr -> expr . MINUS expr
    (66) expr -> expr . OR expr
    (67) expr -> expr . TIMES expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . DIV expr
    (70) expr -> expr . MOD expr
    (71) expr -> expr . AND expr

    COMMA           reduce using rule 68 (expr -> expr DIVIDE expr .)
    EQUALS          reduce using rule 68 (expr -> expr DIVIDE expr .)
    LTHAN           reduce using rule 68 (expr -> expr DIVIDE expr .)
    GTHAN           reduce using rule 68 (expr -> expr DIVIDE expr .)
    DIFFERENT       reduce using rule 68 (expr -> expr DIVIDE expr .)
    GEQUALS         reduce using rule 68 (expr -> expr DIVIDE expr .)
    LEQUALS         reduce using rule 68 (expr -> expr DIVIDE expr .)
    PLUS            reduce using rule 68 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 68 (expr -> expr DIVIDE expr .)
    OR              reduce using rule 68 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 68 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 68 (expr -> expr DIVIDE expr .)
    DIV             reduce using rule 68 (expr -> expr DIVIDE expr .)
    MOD             reduce using rule 68 (expr -> expr DIVIDE expr .)
    AND             reduce using rule 68 (expr -> expr DIVIDE expr .)
    THEN            reduce using rule 68 (expr -> expr DIVIDE expr .)
    OF              reduce using rule 68 (expr -> expr DIVIDE expr .)
    DO              reduce using rule 68 (expr -> expr DIVIDE expr .)
    SEMICOLON       reduce using rule 68 (expr -> expr DIVIDE expr .)
    RPARENT         reduce using rule 68 (expr -> expr DIVIDE expr .)
    TO              reduce using rule 68 (expr -> expr DIVIDE expr .)

  ! EQUALS          [ shift and go to state 91 ]
  ! LTHAN           [ shift and go to state 92 ]
  ! GTHAN           [ shift and go to state 93 ]
  ! DIFFERENT       [ shift and go to state 94 ]
  ! GEQUALS         [ shift and go to state 95 ]
  ! LEQUALS         [ shift and go to state 96 ]
  ! PLUS            [ shift and go to state 97 ]
  ! MINUS           [ shift and go to state 98 ]
  ! OR              [ shift and go to state 99 ]
  ! TIMES           [ shift and go to state 100 ]
  ! DIVIDE          [ shift and go to state 101 ]
  ! DIV             [ shift and go to state 102 ]
  ! MOD             [ shift and go to state 103 ]
  ! AND             [ shift and go to state 104 ]


state 133

    (69) expr -> expr DIV expr .
    (58) expr -> expr . EQUALS expr
    (59) expr -> expr . LTHAN expr
    (60) expr -> expr . GTHAN expr
    (61) expr -> expr . DIFFERENT expr
    (62) expr -> expr . GEQUALS expr
    (63) expr -> expr . LEQUALS expr
    (64) expr -> expr . PLUS expr
    (65) expr -> expr . MINUS expr
    (66) expr -> expr . OR expr
    (67) expr -> expr . TIMES expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . DIV expr
    (70) expr -> expr . MOD expr
    (71) expr -> expr . AND expr

    COMMA           reduce using rule 69 (expr -> expr DIV expr .)
    EQUALS          reduce using rule 69 (expr -> expr DIV expr .)
    LTHAN           reduce using rule 69 (expr -> expr DIV expr .)
    GTHAN           reduce using rule 69 (expr -> expr DIV expr .)
    DIFFERENT       reduce using rule 69 (expr -> expr DIV expr .)
    GEQUALS         reduce using rule 69 (expr -> expr DIV expr .)
    LEQUALS         reduce using rule 69 (expr -> expr DIV expr .)
    PLUS            reduce using rule 69 (expr -> expr DIV expr .)
    MINUS           reduce using rule 69 (expr -> expr DIV expr .)
    OR              reduce using rule 69 (expr -> expr DIV expr .)
    TIMES           reduce using rule 69 (expr -> expr DIV expr .)
    DIVIDE          reduce using rule 69 (expr -> expr DIV expr .)
    DIV             reduce using rule 69 (expr -> expr DIV expr .)
    MOD             reduce using rule 69 (expr -> expr DIV expr .)
    AND             reduce using rule 69 (expr -> expr DIV expr .)
    THEN            reduce using rule 69 (expr -> expr DIV expr .)
    OF              reduce using rule 69 (expr -> expr DIV expr .)
    DO              reduce using rule 69 (expr -> expr DIV expr .)
    SEMICOLON       reduce using rule 69 (expr -> expr DIV expr .)
    RPARENT         reduce using rule 69 (expr -> expr DIV expr .)
    TO              reduce using rule 69 (expr -> expr DIV expr .)

  ! EQUALS          [ shift and go to state 91 ]
  ! LTHAN           [ shift and go to state 92 ]
  ! GTHAN           [ shift and go to state 93 ]
  ! DIFFERENT       [ shift and go to state 94 ]
  ! GEQUALS         [ shift and go to state 95 ]
  ! LEQUALS         [ shift and go to state 96 ]
  ! PLUS            [ shift and go to state 97 ]
  ! MINUS           [ shift and go to state 98 ]
  ! OR              [ shift and go to state 99 ]
  ! TIMES           [ shift and go to state 100 ]
  ! DIVIDE          [ shift and go to state 101 ]
  ! DIV             [ shift and go to state 102 ]
  ! MOD             [ shift and go to state 103 ]
  ! AND             [ shift and go to state 104 ]


state 134

    (70) expr -> expr MOD expr .
    (58) expr -> expr . EQUALS expr
    (59) expr -> expr . LTHAN expr
    (60) expr -> expr . GTHAN expr
    (61) expr -> expr . DIFFERENT expr
    (62) expr -> expr . GEQUALS expr
    (63) expr -> expr . LEQUALS expr
    (64) expr -> expr . PLUS expr
    (65) expr -> expr . MINUS expr
    (66) expr -> expr . OR expr
    (67) expr -> expr . TIMES expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . DIV expr
    (70) expr -> expr . MOD expr
    (71) expr -> expr . AND expr

    COMMA           reduce using rule 70 (expr -> expr MOD expr .)
    EQUALS          reduce using rule 70 (expr -> expr MOD expr .)
    LTHAN           reduce using rule 70 (expr -> expr MOD expr .)
    GTHAN           reduce using rule 70 (expr -> expr MOD expr .)
    DIFFERENT       reduce using rule 70 (expr -> expr MOD expr .)
    GEQUALS         reduce using rule 70 (expr -> expr MOD expr .)
    LEQUALS         reduce using rule 70 (expr -> expr MOD expr .)
    PLUS            reduce using rule 70 (expr -> expr MOD expr .)
    MINUS           reduce using rule 70 (expr -> expr MOD expr .)
    OR              reduce using rule 70 (expr -> expr MOD expr .)
    TIMES           reduce using rule 70 (expr -> expr MOD expr .)
    DIVIDE          reduce using rule 70 (expr -> expr MOD expr .)
    DIV             reduce using rule 70 (expr -> expr MOD expr .)
    MOD             reduce using rule 70 (expr -> expr MOD expr .)
    AND             reduce using rule 70 (expr -> expr MOD expr .)
    THEN            reduce using rule 70 (expr -> expr MOD expr .)
    OF              reduce using rule 70 (expr -> expr MOD expr .)
    DO              reduce using rule 70 (expr -> expr MOD expr .)
    SEMICOLON       reduce using rule 70 (expr -> expr MOD expr .)
    RPARENT         reduce using rule 70 (expr -> expr MOD expr .)
    TO              reduce using rule 70 (expr -> expr MOD expr .)

  ! EQUALS          [ shift and go to state 91 ]
  ! LTHAN           [ shift and go to state 92 ]
  ! GTHAN           [ shift and go to state 93 ]
  ! DIFFERENT       [ shift and go to state 94 ]
  ! GEQUALS         [ shift and go to state 95 ]
  ! LEQUALS         [ shift and go to state 96 ]
  ! PLUS            [ shift and go to state 97 ]
  ! MINUS           [ shift and go to state 98 ]
  ! OR              [ shift and go to state 99 ]
  ! TIMES           [ shift and go to state 100 ]
  ! DIVIDE          [ shift and go to state 101 ]
  ! DIV             [ shift and go to state 102 ]
  ! MOD             [ shift and go to state 103 ]
  ! AND             [ shift and go to state 104 ]


state 135

    (71) expr -> expr AND expr .
    (58) expr -> expr . EQUALS expr
    (59) expr -> expr . LTHAN expr
    (60) expr -> expr . GTHAN expr
    (61) expr -> expr . DIFFERENT expr
    (62) expr -> expr . GEQUALS expr
    (63) expr -> expr . LEQUALS expr
    (64) expr -> expr . PLUS expr
    (65) expr -> expr . MINUS expr
    (66) expr -> expr . OR expr
    (67) expr -> expr . TIMES expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . DIV expr
    (70) expr -> expr . MOD expr
    (71) expr -> expr . AND expr

    COMMA           reduce using rule 71 (expr -> expr AND expr .)
    EQUALS          reduce using rule 71 (expr -> expr AND expr .)
    LTHAN           reduce using rule 71 (expr -> expr AND expr .)
    GTHAN           reduce using rule 71 (expr -> expr AND expr .)
    DIFFERENT       reduce using rule 71 (expr -> expr AND expr .)
    GEQUALS         reduce using rule 71 (expr -> expr AND expr .)
    LEQUALS         reduce using rule 71 (expr -> expr AND expr .)
    PLUS            reduce using rule 71 (expr -> expr AND expr .)
    MINUS           reduce using rule 71 (expr -> expr AND expr .)
    OR              reduce using rule 71 (expr -> expr AND expr .)
    TIMES           reduce using rule 71 (expr -> expr AND expr .)
    DIVIDE          reduce using rule 71 (expr -> expr AND expr .)
    DIV             reduce using rule 71 (expr -> expr AND expr .)
    MOD             reduce using rule 71 (expr -> expr AND expr .)
    AND             reduce using rule 71 (expr -> expr AND expr .)
    THEN            reduce using rule 71 (expr -> expr AND expr .)
    OF              reduce using rule 71 (expr -> expr AND expr .)
    DO              reduce using rule 71 (expr -> expr AND expr .)
    SEMICOLON       reduce using rule 71 (expr -> expr AND expr .)
    RPARENT         reduce using rule 71 (expr -> expr AND expr .)
    TO              reduce using rule 71 (expr -> expr AND expr .)

  ! EQUALS          [ shift and go to state 91 ]
  ! LTHAN           [ shift and go to state 92 ]
  ! GTHAN           [ shift and go to state 93 ]
  ! DIFFERENT       [ shift and go to state 94 ]
  ! GEQUALS         [ shift and go to state 95 ]
  ! LEQUALS         [ shift and go to state 96 ]
  ! PLUS            [ shift and go to state 97 ]
  ! MINUS           [ shift and go to state 98 ]
  ! OR              [ shift and go to state 99 ]
  ! TIMES           [ shift and go to state 100 ]
  ! DIVIDE          [ shift and go to state 101 ]
  ! DIV             [ shift and go to state 102 ]
  ! MOD             [ shift and go to state 103 ]
  ! AND             [ shift and go to state 104 ]


state 136

    (43) assign_statement -> ID ASSIGNMENT expr SEMICOLON .

    IF              reduce using rule 43 (assign_statement -> ID ASSIGNMENT expr SEMICOLON .)
    ID              reduce using rule 43 (assign_statement -> ID ASSIGNMENT expr SEMICOLON .)
    CASE            reduce using rule 43 (assign_statement -> ID ASSIGNMENT expr SEMICOLON .)
    WHILE           reduce using rule 43 (assign_statement -> ID ASSIGNMENT expr SEMICOLON .)
    REPEAT          reduce using rule 43 (assign_statement -> ID ASSIGNMENT expr SEMICOLON .)
    FOR             reduce using rule 43 (assign_statement -> ID ASSIGNMENT expr SEMICOLON .)
    BEGIN           reduce using rule 43 (assign_statement -> ID ASSIGNMENT expr SEMICOLON .)
    END             reduce using rule 43 (assign_statement -> ID ASSIGNMENT expr SEMICOLON .)
    UNTIL           reduce using rule 43 (assign_statement -> ID ASSIGNMENT expr SEMICOLON .)
    ELSE            reduce using rule 43 (assign_statement -> ID ASSIGNMENT expr SEMICOLON .)
    INTEGER         reduce using rule 43 (assign_statement -> ID ASSIGNMENT expr SEMICOLON .)
    REAL            reduce using rule 43 (assign_statement -> ID ASSIGNMENT expr SEMICOLON .)


state 137

    (44) procedure_call_statement -> ID LPARENT expr_list RPARENT . SEMICOLON

    SEMICOLON       shift and go to state 150


state 138

    (47) case_statement -> CASE expr OF cases . END SEMICOLON

    END             shift and go to state 151


state 139

    (48) cases -> case .
    (49) cases -> case . cases
    (48) cases -> . case
    (49) cases -> . case cases
    (50) case -> . INTEGER TWOPOINTS statement
    (51) case -> . REAL TWOPOINTS statement
    (52) case -> . ID TWOPOINTS statement

    END             reduce using rule 48 (cases -> case .)
    INTEGER         shift and go to state 140
    REAL            shift and go to state 141
    ID              shift and go to state 142

    case                           shift and go to state 139
    cases                          shift and go to state 152

state 140

    (50) case -> INTEGER . TWOPOINTS statement

    TWOPOINTS       shift and go to state 153


state 141

    (51) case -> REAL . TWOPOINTS statement

    TWOPOINTS       shift and go to state 154


state 142

    (52) case -> ID . TWOPOINTS statement

    TWOPOINTS       shift and go to state 155


state 143

    (53) while_statement -> WHILE expr DO statement .

    IF              reduce using rule 53 (while_statement -> WHILE expr DO statement .)
    ID              reduce using rule 53 (while_statement -> WHILE expr DO statement .)
    CASE            reduce using rule 53 (while_statement -> WHILE expr DO statement .)
    WHILE           reduce using rule 53 (while_statement -> WHILE expr DO statement .)
    REPEAT          reduce using rule 53 (while_statement -> WHILE expr DO statement .)
    FOR             reduce using rule 53 (while_statement -> WHILE expr DO statement .)
    BEGIN           reduce using rule 53 (while_statement -> WHILE expr DO statement .)
    END             reduce using rule 53 (while_statement -> WHILE expr DO statement .)
    UNTIL           reduce using rule 53 (while_statement -> WHILE expr DO statement .)
    ELSE            reduce using rule 53 (while_statement -> WHILE expr DO statement .)
    INTEGER         reduce using rule 53 (while_statement -> WHILE expr DO statement .)
    REAL            reduce using rule 53 (while_statement -> WHILE expr DO statement .)


state 144

    (54) repeat_statement -> REPEAT statement UNTIL expr . SEMICOLON
    (58) expr -> expr . EQUALS expr
    (59) expr -> expr . LTHAN expr
    (60) expr -> expr . GTHAN expr
    (61) expr -> expr . DIFFERENT expr
    (62) expr -> expr . GEQUALS expr
    (63) expr -> expr . LEQUALS expr
    (64) expr -> expr . PLUS expr
    (65) expr -> expr . MINUS expr
    (66) expr -> expr . OR expr
    (67) expr -> expr . TIMES expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . DIV expr
    (70) expr -> expr . MOD expr
    (71) expr -> expr . AND expr

    SEMICOLON       shift and go to state 156
    EQUALS          shift and go to state 91
    LTHAN           shift and go to state 92
    GTHAN           shift and go to state 93
    DIFFERENT       shift and go to state 94
    GEQUALS         shift and go to state 95
    LEQUALS         shift and go to state 96
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    OR              shift and go to state 99
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 101
    DIV             shift and go to state 102
    MOD             shift and go to state 103
    AND             shift and go to state 104


state 145

    (55) for_statement -> FOR ID ASSIGNMENT expr . TO expr DO statement
    (58) expr -> expr . EQUALS expr
    (59) expr -> expr . LTHAN expr
    (60) expr -> expr . GTHAN expr
    (61) expr -> expr . DIFFERENT expr
    (62) expr -> expr . GEQUALS expr
    (63) expr -> expr . LEQUALS expr
    (64) expr -> expr . PLUS expr
    (65) expr -> expr . MINUS expr
    (66) expr -> expr . OR expr
    (67) expr -> expr . TIMES expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . DIV expr
    (70) expr -> expr . MOD expr
    (71) expr -> expr . AND expr

    TO              shift and go to state 157
    EQUALS          shift and go to state 91
    LTHAN           shift and go to state 92
    GTHAN           shift and go to state 93
    DIFFERENT       shift and go to state 94
    GEQUALS         shift and go to state 95
    LEQUALS         shift and go to state 96
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    OR              shift and go to state 99
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 101
    DIV             shift and go to state 102
    MOD             shift and go to state 103
    AND             shift and go to state 104


state 146

    (23) procedure_declaration -> PROCEDURE ID LPARENT param_section RPARENT SEMICOLON .

    PROCEDURE       reduce using rule 23 (procedure_declaration -> PROCEDURE ID LPARENT param_section RPARENT SEMICOLON .)
    FUNCTION        reduce using rule 23 (procedure_declaration -> PROCEDURE ID LPARENT param_section RPARENT SEMICOLON .)
    BEGIN           reduce using rule 23 (procedure_declaration -> PROCEDURE ID LPARENT param_section RPARENT SEMICOLON .)


state 147

    (25) param_section -> identifier_list TWOPOINTS types . SEMICOLON param_section

    SEMICOLON       shift and go to state 158


state 148

    (24) function_declaration -> FUNCTION ID LPARENT param_section RPARENT TWOPOINTS . types SEMICOLON
    (12) types -> . INTEGER
    (13) types -> . REAL
    (14) types -> . STRING
    (15) types -> . BOOLEAN
    (16) types -> . CHAR
    (17) types -> . ID

    INTEGER         shift and go to state 31
    REAL            shift and go to state 32
    STRING          shift and go to state 33
    BOOLEAN         shift and go to state 34
    CHAR            shift and go to state 35
    ID              shift and go to state 29

    types                          shift and go to state 159

state 149

    (37) nstatement -> IF expr_list THEN nstatement ELSE . nstatement
    (46) if2_statement -> IF expr_list THEN nstatement ELSE . if2_statement
    (35) nstatement -> . assign_statement
    (36) nstatement -> . procedure_call_statement
    (37) nstatement -> . IF expr_list THEN nstatement ELSE nstatement
    (38) nstatement -> . case_statement
    (39) nstatement -> . while_statement
    (40) nstatement -> . repeat_statement
    (41) nstatement -> . for_statement
    (42) nstatement -> . compound_statement_semicolon
    (45) if2_statement -> . IF expr_list THEN statement
    (46) if2_statement -> . IF expr_list THEN nstatement ELSE if2_statement
    (43) assign_statement -> . ID ASSIGNMENT expr SEMICOLON
    (44) procedure_call_statement -> . ID LPARENT expr_list RPARENT SEMICOLON
    (47) case_statement -> . CASE expr OF cases END SEMICOLON
    (53) while_statement -> . WHILE expr DO statement
    (54) repeat_statement -> . REPEAT statement UNTIL expr SEMICOLON
    (55) for_statement -> . FOR ID ASSIGNMENT expr TO expr DO statement
    (29) compound_statement_semicolon -> . BEGIN statements END SEMICOLON
    (30) compound_statement_semicolon -> . BEGIN END SEMICOLON

    IF              shift and go to state 44
    ID              shift and go to state 50
    CASE            shift and go to state 51
    WHILE           shift and go to state 52
    REPEAT          shift and go to state 53
    FOR             shift and go to state 54
    BEGIN           shift and go to state 36

    nstatement                     shift and go to state 160
    if2_statement                  shift and go to state 161
    assign_statement               shift and go to state 42
    procedure_call_statement       shift and go to state 43
    case_statement                 shift and go to state 45
    while_statement                shift and go to state 46
    repeat_statement               shift and go to state 47
    for_statement                  shift and go to state 48
    compound_statement_semicolon   shift and go to state 49

state 150

    (44) procedure_call_statement -> ID LPARENT expr_list RPARENT SEMICOLON .

    IF              reduce using rule 44 (procedure_call_statement -> ID LPARENT expr_list RPARENT SEMICOLON .)
    ID              reduce using rule 44 (procedure_call_statement -> ID LPARENT expr_list RPARENT SEMICOLON .)
    CASE            reduce using rule 44 (procedure_call_statement -> ID LPARENT expr_list RPARENT SEMICOLON .)
    WHILE           reduce using rule 44 (procedure_call_statement -> ID LPARENT expr_list RPARENT SEMICOLON .)
    REPEAT          reduce using rule 44 (procedure_call_statement -> ID LPARENT expr_list RPARENT SEMICOLON .)
    FOR             reduce using rule 44 (procedure_call_statement -> ID LPARENT expr_list RPARENT SEMICOLON .)
    BEGIN           reduce using rule 44 (procedure_call_statement -> ID LPARENT expr_list RPARENT SEMICOLON .)
    END             reduce using rule 44 (procedure_call_statement -> ID LPARENT expr_list RPARENT SEMICOLON .)
    UNTIL           reduce using rule 44 (procedure_call_statement -> ID LPARENT expr_list RPARENT SEMICOLON .)
    ELSE            reduce using rule 44 (procedure_call_statement -> ID LPARENT expr_list RPARENT SEMICOLON .)
    INTEGER         reduce using rule 44 (procedure_call_statement -> ID LPARENT expr_list RPARENT SEMICOLON .)
    REAL            reduce using rule 44 (procedure_call_statement -> ID LPARENT expr_list RPARENT SEMICOLON .)


state 151

    (47) case_statement -> CASE expr OF cases END . SEMICOLON

    SEMICOLON       shift and go to state 162


state 152

    (49) cases -> case cases .

    END             reduce using rule 49 (cases -> case cases .)


state 153

    (50) case -> INTEGER TWOPOINTS . statement
    (33) statement -> . nstatement
    (34) statement -> . if2_statement
    (35) nstatement -> . assign_statement
    (36) nstatement -> . procedure_call_statement
    (37) nstatement -> . IF expr_list THEN nstatement ELSE nstatement
    (38) nstatement -> . case_statement
    (39) nstatement -> . while_statement
    (40) nstatement -> . repeat_statement
    (41) nstatement -> . for_statement
    (42) nstatement -> . compound_statement_semicolon
    (45) if2_statement -> . IF expr_list THEN statement
    (46) if2_statement -> . IF expr_list THEN nstatement ELSE if2_statement
    (43) assign_statement -> . ID ASSIGNMENT expr SEMICOLON
    (44) procedure_call_statement -> . ID LPARENT expr_list RPARENT SEMICOLON
    (47) case_statement -> . CASE expr OF cases END SEMICOLON
    (53) while_statement -> . WHILE expr DO statement
    (54) repeat_statement -> . REPEAT statement UNTIL expr SEMICOLON
    (55) for_statement -> . FOR ID ASSIGNMENT expr TO expr DO statement
    (29) compound_statement_semicolon -> . BEGIN statements END SEMICOLON
    (30) compound_statement_semicolon -> . BEGIN END SEMICOLON

    IF              shift and go to state 44
    ID              shift and go to state 50
    CASE            shift and go to state 51
    WHILE           shift and go to state 52
    REPEAT          shift and go to state 53
    FOR             shift and go to state 54
    BEGIN           shift and go to state 36

    statement                      shift and go to state 163
    nstatement                     shift and go to state 40
    if2_statement                  shift and go to state 41
    assign_statement               shift and go to state 42
    procedure_call_statement       shift and go to state 43
    case_statement                 shift and go to state 45
    while_statement                shift and go to state 46
    repeat_statement               shift and go to state 47
    for_statement                  shift and go to state 48
    compound_statement_semicolon   shift and go to state 49

state 154

    (51) case -> REAL TWOPOINTS . statement
    (33) statement -> . nstatement
    (34) statement -> . if2_statement
    (35) nstatement -> . assign_statement
    (36) nstatement -> . procedure_call_statement
    (37) nstatement -> . IF expr_list THEN nstatement ELSE nstatement
    (38) nstatement -> . case_statement
    (39) nstatement -> . while_statement
    (40) nstatement -> . repeat_statement
    (41) nstatement -> . for_statement
    (42) nstatement -> . compound_statement_semicolon
    (45) if2_statement -> . IF expr_list THEN statement
    (46) if2_statement -> . IF expr_list THEN nstatement ELSE if2_statement
    (43) assign_statement -> . ID ASSIGNMENT expr SEMICOLON
    (44) procedure_call_statement -> . ID LPARENT expr_list RPARENT SEMICOLON
    (47) case_statement -> . CASE expr OF cases END SEMICOLON
    (53) while_statement -> . WHILE expr DO statement
    (54) repeat_statement -> . REPEAT statement UNTIL expr SEMICOLON
    (55) for_statement -> . FOR ID ASSIGNMENT expr TO expr DO statement
    (29) compound_statement_semicolon -> . BEGIN statements END SEMICOLON
    (30) compound_statement_semicolon -> . BEGIN END SEMICOLON

    IF              shift and go to state 44
    ID              shift and go to state 50
    CASE            shift and go to state 51
    WHILE           shift and go to state 52
    REPEAT          shift and go to state 53
    FOR             shift and go to state 54
    BEGIN           shift and go to state 36

    statement                      shift and go to state 164
    nstatement                     shift and go to state 40
    if2_statement                  shift and go to state 41
    assign_statement               shift and go to state 42
    procedure_call_statement       shift and go to state 43
    case_statement                 shift and go to state 45
    while_statement                shift and go to state 46
    repeat_statement               shift and go to state 47
    for_statement                  shift and go to state 48
    compound_statement_semicolon   shift and go to state 49

state 155

    (52) case -> ID TWOPOINTS . statement
    (33) statement -> . nstatement
    (34) statement -> . if2_statement
    (35) nstatement -> . assign_statement
    (36) nstatement -> . procedure_call_statement
    (37) nstatement -> . IF expr_list THEN nstatement ELSE nstatement
    (38) nstatement -> . case_statement
    (39) nstatement -> . while_statement
    (40) nstatement -> . repeat_statement
    (41) nstatement -> . for_statement
    (42) nstatement -> . compound_statement_semicolon
    (45) if2_statement -> . IF expr_list THEN statement
    (46) if2_statement -> . IF expr_list THEN nstatement ELSE if2_statement
    (43) assign_statement -> . ID ASSIGNMENT expr SEMICOLON
    (44) procedure_call_statement -> . ID LPARENT expr_list RPARENT SEMICOLON
    (47) case_statement -> . CASE expr OF cases END SEMICOLON
    (53) while_statement -> . WHILE expr DO statement
    (54) repeat_statement -> . REPEAT statement UNTIL expr SEMICOLON
    (55) for_statement -> . FOR ID ASSIGNMENT expr TO expr DO statement
    (29) compound_statement_semicolon -> . BEGIN statements END SEMICOLON
    (30) compound_statement_semicolon -> . BEGIN END SEMICOLON

    IF              shift and go to state 44
    ID              shift and go to state 50
    CASE            shift and go to state 51
    WHILE           shift and go to state 52
    REPEAT          shift and go to state 53
    FOR             shift and go to state 54
    BEGIN           shift and go to state 36

    statement                      shift and go to state 165
    nstatement                     shift and go to state 40
    if2_statement                  shift and go to state 41
    assign_statement               shift and go to state 42
    procedure_call_statement       shift and go to state 43
    case_statement                 shift and go to state 45
    while_statement                shift and go to state 46
    repeat_statement               shift and go to state 47
    for_statement                  shift and go to state 48
    compound_statement_semicolon   shift and go to state 49

state 156

    (54) repeat_statement -> REPEAT statement UNTIL expr SEMICOLON .

    IF              reduce using rule 54 (repeat_statement -> REPEAT statement UNTIL expr SEMICOLON .)
    ID              reduce using rule 54 (repeat_statement -> REPEAT statement UNTIL expr SEMICOLON .)
    CASE            reduce using rule 54 (repeat_statement -> REPEAT statement UNTIL expr SEMICOLON .)
    WHILE           reduce using rule 54 (repeat_statement -> REPEAT statement UNTIL expr SEMICOLON .)
    REPEAT          reduce using rule 54 (repeat_statement -> REPEAT statement UNTIL expr SEMICOLON .)
    FOR             reduce using rule 54 (repeat_statement -> REPEAT statement UNTIL expr SEMICOLON .)
    BEGIN           reduce using rule 54 (repeat_statement -> REPEAT statement UNTIL expr SEMICOLON .)
    END             reduce using rule 54 (repeat_statement -> REPEAT statement UNTIL expr SEMICOLON .)
    UNTIL           reduce using rule 54 (repeat_statement -> REPEAT statement UNTIL expr SEMICOLON .)
    ELSE            reduce using rule 54 (repeat_statement -> REPEAT statement UNTIL expr SEMICOLON .)
    INTEGER         reduce using rule 54 (repeat_statement -> REPEAT statement UNTIL expr SEMICOLON .)
    REAL            reduce using rule 54 (repeat_statement -> REPEAT statement UNTIL expr SEMICOLON .)


state 157

    (55) for_statement -> FOR ID ASSIGNMENT expr TO . expr DO statement
    (58) expr -> . expr EQUALS expr
    (59) expr -> . expr LTHAN expr
    (60) expr -> . expr GTHAN expr
    (61) expr -> . expr DIFFERENT expr
    (62) expr -> . expr GEQUALS expr
    (63) expr -> . expr LEQUALS expr
    (64) expr -> . expr PLUS expr
    (65) expr -> . expr MINUS expr
    (66) expr -> . expr OR expr
    (67) expr -> . expr TIMES expr
    (68) expr -> . expr DIVIDE expr
    (69) expr -> . expr DIV expr
    (70) expr -> . expr MOD expr
    (71) expr -> . expr AND expr
    (72) expr -> . PLUS expr
    (73) expr -> . MINUS expr
    (74) expr -> . factor
    (75) factor -> . ID
    (76) factor -> . INTEGER
    (77) factor -> . REAL
    (78) factor -> . STRING
    (79) factor -> . NOT factor

    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    ID              shift and go to state 70
    INTEGER         shift and go to state 71
    REAL            shift and go to state 72
    STRING          shift and go to state 73
    NOT             shift and go to state 74

    expr                           shift and go to state 166
    factor                         shift and go to state 69

state 158

    (25) param_section -> identifier_list TWOPOINTS types SEMICOLON . param_section
    (25) param_section -> . identifier_list TWOPOINTS types SEMICOLON param_section
    (26) param_section -> .
    (18) identifier_list -> . ID
    (19) identifier_list -> . ID COMMA identifier_list

    RPARENT         reduce using rule 26 (param_section -> .)
    ID              shift and go to state 19

    identifier_list                shift and go to state 82
    param_section                  shift and go to state 167

state 159

    (24) function_declaration -> FUNCTION ID LPARENT param_section RPARENT TWOPOINTS types . SEMICOLON

    SEMICOLON       shift and go to state 168


state 160

    (37) nstatement -> IF expr_list THEN nstatement ELSE nstatement .

    IF              reduce using rule 37 (nstatement -> IF expr_list THEN nstatement ELSE nstatement .)
    ID              reduce using rule 37 (nstatement -> IF expr_list THEN nstatement ELSE nstatement .)
    CASE            reduce using rule 37 (nstatement -> IF expr_list THEN nstatement ELSE nstatement .)
    WHILE           reduce using rule 37 (nstatement -> IF expr_list THEN nstatement ELSE nstatement .)
    REPEAT          reduce using rule 37 (nstatement -> IF expr_list THEN nstatement ELSE nstatement .)
    FOR             reduce using rule 37 (nstatement -> IF expr_list THEN nstatement ELSE nstatement .)
    BEGIN           reduce using rule 37 (nstatement -> IF expr_list THEN nstatement ELSE nstatement .)
    END             reduce using rule 37 (nstatement -> IF expr_list THEN nstatement ELSE nstatement .)
    UNTIL           reduce using rule 37 (nstatement -> IF expr_list THEN nstatement ELSE nstatement .)
    ELSE            reduce using rule 37 (nstatement -> IF expr_list THEN nstatement ELSE nstatement .)
    INTEGER         reduce using rule 37 (nstatement -> IF expr_list THEN nstatement ELSE nstatement .)
    REAL            reduce using rule 37 (nstatement -> IF expr_list THEN nstatement ELSE nstatement .)


state 161

    (46) if2_statement -> IF expr_list THEN nstatement ELSE if2_statement .

    IF              reduce using rule 46 (if2_statement -> IF expr_list THEN nstatement ELSE if2_statement .)
    ID              reduce using rule 46 (if2_statement -> IF expr_list THEN nstatement ELSE if2_statement .)
    CASE            reduce using rule 46 (if2_statement -> IF expr_list THEN nstatement ELSE if2_statement .)
    WHILE           reduce using rule 46 (if2_statement -> IF expr_list THEN nstatement ELSE if2_statement .)
    REPEAT          reduce using rule 46 (if2_statement -> IF expr_list THEN nstatement ELSE if2_statement .)
    FOR             reduce using rule 46 (if2_statement -> IF expr_list THEN nstatement ELSE if2_statement .)
    BEGIN           reduce using rule 46 (if2_statement -> IF expr_list THEN nstatement ELSE if2_statement .)
    END             reduce using rule 46 (if2_statement -> IF expr_list THEN nstatement ELSE if2_statement .)
    UNTIL           reduce using rule 46 (if2_statement -> IF expr_list THEN nstatement ELSE if2_statement .)
    ELSE            reduce using rule 46 (if2_statement -> IF expr_list THEN nstatement ELSE if2_statement .)
    INTEGER         reduce using rule 46 (if2_statement -> IF expr_list THEN nstatement ELSE if2_statement .)
    REAL            reduce using rule 46 (if2_statement -> IF expr_list THEN nstatement ELSE if2_statement .)


state 162

    (47) case_statement -> CASE expr OF cases END SEMICOLON .

    IF              reduce using rule 47 (case_statement -> CASE expr OF cases END SEMICOLON .)
    ID              reduce using rule 47 (case_statement -> CASE expr OF cases END SEMICOLON .)
    CASE            reduce using rule 47 (case_statement -> CASE expr OF cases END SEMICOLON .)
    WHILE           reduce using rule 47 (case_statement -> CASE expr OF cases END SEMICOLON .)
    REPEAT          reduce using rule 47 (case_statement -> CASE expr OF cases END SEMICOLON .)
    FOR             reduce using rule 47 (case_statement -> CASE expr OF cases END SEMICOLON .)
    BEGIN           reduce using rule 47 (case_statement -> CASE expr OF cases END SEMICOLON .)
    END             reduce using rule 47 (case_statement -> CASE expr OF cases END SEMICOLON .)
    UNTIL           reduce using rule 47 (case_statement -> CASE expr OF cases END SEMICOLON .)
    ELSE            reduce using rule 47 (case_statement -> CASE expr OF cases END SEMICOLON .)
    INTEGER         reduce using rule 47 (case_statement -> CASE expr OF cases END SEMICOLON .)
    REAL            reduce using rule 47 (case_statement -> CASE expr OF cases END SEMICOLON .)


state 163

    (50) case -> INTEGER TWOPOINTS statement .

    INTEGER         reduce using rule 50 (case -> INTEGER TWOPOINTS statement .)
    REAL            reduce using rule 50 (case -> INTEGER TWOPOINTS statement .)
    ID              reduce using rule 50 (case -> INTEGER TWOPOINTS statement .)
    END             reduce using rule 50 (case -> INTEGER TWOPOINTS statement .)


state 164

    (51) case -> REAL TWOPOINTS statement .

    INTEGER         reduce using rule 51 (case -> REAL TWOPOINTS statement .)
    REAL            reduce using rule 51 (case -> REAL TWOPOINTS statement .)
    ID              reduce using rule 51 (case -> REAL TWOPOINTS statement .)
    END             reduce using rule 51 (case -> REAL TWOPOINTS statement .)


state 165

    (52) case -> ID TWOPOINTS statement .

    INTEGER         reduce using rule 52 (case -> ID TWOPOINTS statement .)
    REAL            reduce using rule 52 (case -> ID TWOPOINTS statement .)
    ID              reduce using rule 52 (case -> ID TWOPOINTS statement .)
    END             reduce using rule 52 (case -> ID TWOPOINTS statement .)


state 166

    (55) for_statement -> FOR ID ASSIGNMENT expr TO expr . DO statement
    (58) expr -> expr . EQUALS expr
    (59) expr -> expr . LTHAN expr
    (60) expr -> expr . GTHAN expr
    (61) expr -> expr . DIFFERENT expr
    (62) expr -> expr . GEQUALS expr
    (63) expr -> expr . LEQUALS expr
    (64) expr -> expr . PLUS expr
    (65) expr -> expr . MINUS expr
    (66) expr -> expr . OR expr
    (67) expr -> expr . TIMES expr
    (68) expr -> expr . DIVIDE expr
    (69) expr -> expr . DIV expr
    (70) expr -> expr . MOD expr
    (71) expr -> expr . AND expr

    DO              shift and go to state 169
    EQUALS          shift and go to state 91
    LTHAN           shift and go to state 92
    GTHAN           shift and go to state 93
    DIFFERENT       shift and go to state 94
    GEQUALS         shift and go to state 95
    LEQUALS         shift and go to state 96
    PLUS            shift and go to state 97
    MINUS           shift and go to state 98
    OR              shift and go to state 99
    TIMES           shift and go to state 100
    DIVIDE          shift and go to state 101
    DIV             shift and go to state 102
    MOD             shift and go to state 103
    AND             shift and go to state 104


state 167

    (25) param_section -> identifier_list TWOPOINTS types SEMICOLON param_section .

    RPARENT         reduce using rule 25 (param_section -> identifier_list TWOPOINTS types SEMICOLON param_section .)


state 168

    (24) function_declaration -> FUNCTION ID LPARENT param_section RPARENT TWOPOINTS types SEMICOLON .

    PROCEDURE       reduce using rule 24 (function_declaration -> FUNCTION ID LPARENT param_section RPARENT TWOPOINTS types SEMICOLON .)
    FUNCTION        reduce using rule 24 (function_declaration -> FUNCTION ID LPARENT param_section RPARENT TWOPOINTS types SEMICOLON .)
    BEGIN           reduce using rule 24 (function_declaration -> FUNCTION ID LPARENT param_section RPARENT TWOPOINTS types SEMICOLON .)


state 169

    (55) for_statement -> FOR ID ASSIGNMENT expr TO expr DO . statement
    (33) statement -> . nstatement
    (34) statement -> . if2_statement
    (35) nstatement -> . assign_statement
    (36) nstatement -> . procedure_call_statement
    (37) nstatement -> . IF expr_list THEN nstatement ELSE nstatement
    (38) nstatement -> . case_statement
    (39) nstatement -> . while_statement
    (40) nstatement -> . repeat_statement
    (41) nstatement -> . for_statement
    (42) nstatement -> . compound_statement_semicolon
    (45) if2_statement -> . IF expr_list THEN statement
    (46) if2_statement -> . IF expr_list THEN nstatement ELSE if2_statement
    (43) assign_statement -> . ID ASSIGNMENT expr SEMICOLON
    (44) procedure_call_statement -> . ID LPARENT expr_list RPARENT SEMICOLON
    (47) case_statement -> . CASE expr OF cases END SEMICOLON
    (53) while_statement -> . WHILE expr DO statement
    (54) repeat_statement -> . REPEAT statement UNTIL expr SEMICOLON
    (55) for_statement -> . FOR ID ASSIGNMENT expr TO expr DO statement
    (29) compound_statement_semicolon -> . BEGIN statements END SEMICOLON
    (30) compound_statement_semicolon -> . BEGIN END SEMICOLON

    IF              shift and go to state 44
    ID              shift and go to state 50
    CASE            shift and go to state 51
    WHILE           shift and go to state 52
    REPEAT          shift and go to state 53
    FOR             shift and go to state 54
    BEGIN           shift and go to state 36

    statement                      shift and go to state 170
    nstatement                     shift and go to state 40
    if2_statement                  shift and go to state 41
    assign_statement               shift and go to state 42
    procedure_call_statement       shift and go to state 43
    case_statement                 shift and go to state 45
    while_statement                shift and go to state 46
    repeat_statement               shift and go to state 47
    for_statement                  shift and go to state 48
    compound_statement_semicolon   shift and go to state 49

state 170

    (55) for_statement -> FOR ID ASSIGNMENT expr TO expr DO statement .

    IF              reduce using rule 55 (for_statement -> FOR ID ASSIGNMENT expr TO expr DO statement .)
    ID              reduce using rule 55 (for_statement -> FOR ID ASSIGNMENT expr TO expr DO statement .)
    CASE            reduce using rule 55 (for_statement -> FOR ID ASSIGNMENT expr TO expr DO statement .)
    WHILE           reduce using rule 55 (for_statement -> FOR ID ASSIGNMENT expr TO expr DO statement .)
    REPEAT          reduce using rule 55 (for_statement -> FOR ID ASSIGNMENT expr TO expr DO statement .)
    FOR             reduce using rule 55 (for_statement -> FOR ID ASSIGNMENT expr TO expr DO statement .)
    BEGIN           reduce using rule 55 (for_statement -> FOR ID ASSIGNMENT expr TO expr DO statement .)
    END             reduce using rule 55 (for_statement -> FOR ID ASSIGNMENT expr TO expr DO statement .)
    UNTIL           reduce using rule 55 (for_statement -> FOR ID ASSIGNMENT expr TO expr DO statement .)
    ELSE            reduce using rule 55 (for_statement -> FOR ID ASSIGNMENT expr TO expr DO statement .)
    INTEGER         reduce using rule 55 (for_statement -> FOR ID ASSIGNMENT expr TO expr DO statement .)
    REAL            reduce using rule 55 (for_statement -> FOR ID ASSIGNMENT expr TO expr DO statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 119 resolved as shift
